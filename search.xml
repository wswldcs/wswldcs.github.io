<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mac OS 配置前端开发环境</title>
      <link href="/archives/91fd1eed.html"/>
      <url>/archives/91fd1eed.html</url>
      
        <content type="html"><![CDATA[<h2 id="mac-OS-配置前端开发环境"><a href="#mac-OS-配置前端开发环境" class="headerlink" title="mac OS 配置前端开发环境"></a>mac OS 配置前端开发环境</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文默认你不是一个一无所知的小白，了解前端基本开发环境、常用的开发工具及基本的电脑操作。</p><p>前端基础开发环境比较简单，主要有以下几点：</p><ul><li>使用 <code>nvm</code> 管理 <code>node</code> 版本（安装node会自带npm，不推荐使用cnpm）</li><li>使用 <code>nrm</code> 管理 <code>npm</code> 源</li><li>根据情况安装使用 <code>yarn</code></li></ul><p>本文档仅适用我自己，仅供您参考可用，如文中有所错漏，欢迎与我交流。</p><p>使用本文档之前，默认你没有安装 <code>node</code> 开发环境，如果你已经安装过 <code>node</code> 可使用以下方法卸载：</p><p>依次在终端运行以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo npm uninstall npm -g</span><br><span class="line"></span><br><span class="line">sudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*</span><br><span class="line"></span><br><span class="line">sudo rm -rf /usr/local/include/node /Users/$USER/.npm</span><br><span class="line"></span><br><span class="line">sudo rm /usr/local/bin/node</span><br><span class="line"></span><br><span class="line">sudo rm /usr/local/share/man/man1/node.1</span><br><span class="line"></span><br><span class="line">sudo rm /usr/local/lib/dtrace/node.d</span><br></pre></td></tr></table></figure><h3 id="NVM-安装"><a href="#NVM-安装" class="headerlink" title="NVM 安装"></a>NVM 安装</h3><h4 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h4><p>打开你的终端，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>最新版本的安装命令，你可以点 <a href="https://github.com/nvm-sh/nvm">这里</a> 进行查看</p><p>安装过程中可能因为网络原因安装失败，可以多尝试一下。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20210615210329.png" alt="网络错误安装失败"></p><p>安装完成后，可以使用 <code>nvm ls</code> 查看时候安装成功。</p><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h5><ul><li><p>安装完成过后，提示 <code>command not found: nvm</code> 可能是缺少配置文件引起的，</p><p>注意：您的配置文件可能是 <code>.profile</code>、<code>.bash_profile</code>、<code>.bashrc</code>、<code>.zshrc</code> 等，最简单的方法就是把这几个配置文件都配置一份，如果没有，就新建一个。</p><p>打开你的 <code>访达</code> =》<code>用户</code> =〉<code>用户文件夹</code> 找到这些配置文件：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20210615210342.png" alt="配置文件地址"></p><p>把以下代码（安装完成后提示的最后3行代码）复制进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20210615210403.png" alt="image-20210615165232921"></p><p>完成之后，关闭终端，重新打开终端，输入 <code>nvm ls</code> 查看是否成功。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20210615210417.png" alt="成功"></p><h3 id="通过NVM管理node版本"><a href="#通过NVM管理node版本" class="headerlink" title="通过NVM管理node版本"></a>通过NVM管理node版本</h3><p>常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable ## 安装最新稳定版 node</span><br><span class="line">nvm install &lt;version&gt; ## 安装指定版本</span><br><span class="line">nvm uninstall &lt;version&gt; ## 删除已安装的指定版本，语法与install类似</span><br><span class="line">nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line">nvm ls ## 列出所有安装的版本</span><br><span class="line">nvm ls-remote ## 列出所有远程服务器的版本（官方node version list）</span><br><span class="line">nvm current ## 显示当前的版本</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line">nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br></pre></td></tr></table></figure><p>更多说明请直接阅读官方文档：<a href="https://github.com/nvm-sh/nvm">NVM</a></p><ul><li><p>查看目前所有版本 <code>nvm ls-remote</code> 查看长期支持版本。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20210615210431.png" alt="image-20210615170914167"></p></li><li><p>可以使用 <code>nvm install lts/fermium</code>  安装长期支持版本。</p></li><li><p>安装完成后可以使用 <code>nvm alias default 14.17.0</code>  设置 <code>14.17.0</code> 版本为默认版本。</p></li><li><p>最后使用使用命令 <code>nvm use default</code> 切换到默认版本。</p></li></ul><h3 id="安装-nrm-管理-npm-源"><a href="#安装-nrm-管理-npm-源" class="headerlink" title="安装 nrm 管理 npm 源"></a>安装 nrm 管理 npm 源</h3><p>使用以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><ul><li><p>常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nrm ls                             //查看可选的源。</span><br><span class="line">nrm use xxx                        //对应的名字</span><br><span class="line">nrm add registry http://xxxxxx/    //增加私有源</span><br><span class="line">nrm del &lt;registry&gt;                 //删除源</span><br><span class="line">nrm test npm                       //速度测试</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装-Yarn"><a href="#安装-Yarn" class="headerlink" title="安装 Yarn"></a>安装 Yarn</h3><p>yarn官方提供了安装文档，但是坑太多了，建议使用更加简单的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><p>Yarn 使用请直接参考 <a href="https://yarn.bootcss.com/docs/usage/">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js安装 </tag>
            
            <tag> Node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub Actions 实现自动化部署和部署到服务器</title>
      <link href="/archives/992bac21.html"/>
      <url>/archives/992bac21.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用GitHub-Actions-实现自动化部署"><a href="#使用GitHub-Actions-实现自动化部署" class="headerlink" title="使用GitHub Actions 实现自动化部署"></a>使用GitHub Actions 实现自动化部署</h2><div style="position: relative; padding: 30% 45%;">    <iframe style="        position: absolute;         width: 100%;         height: 100%;         left: 0; top: 0;"        src="//player.bilibili.com/player.html?aid=636474601&bvid=bv1Cb4y1773P&cid=505133755&page=1&high_quality=1"         scrolling="no"         border="0"         frameborder="no"         framespacing="0"         allowfullscreen="true">    </iframe></div><hr><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1、本次操作的都是<code>源码仓库</code>,你首先需要一个仓库来存放你的源码</p><p>2、部署到github pages和服务器选择需要的就行，不需要的可以删除掉</p><p>3、部署完成之后，github pages有个生效时间，多刷新几次</p><p>4、如果使用了coding双线部署和又拍云的CDN加速，发现部署了之后页面不刷新，请检查serverless是否生效，是否正常运行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">checkout:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到github</span> <span class="string">pages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;ConstOwn&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;xxxxxx@foxmail.com&quot;</span></span><br><span class="line"><span class="string">          # git clone https://github.com/xxxxx/xxxx.github.io.git .deploy_git</span></span><br><span class="line"><span class="string">          # 此处务必用HTTPS链接。SSH链接可能有权限报错的隐患</span></span><br><span class="line"><span class="string">          # =====注意.deploy_git前面有个空格=====</span></span><br><span class="line"><span class="string">          # 这行指令的目的是clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件</span></span><br><span class="line"><span class="string">          # 我注释掉了是为了刷新整个仓库，也可以选择不注释掉，但是可能出现没有识别到的情况</span></span><br><span class="line"><span class="string">          hexo deploy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到云服务器</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cross-the-world/scp-pipeline@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USER_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">user:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USER_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">pass:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USER_PASS</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">connect_timeout:</span> <span class="string">10s</span></span><br><span class="line">          <span class="attr">local:</span> <span class="string">&#x27;./.deploy_git/*&#x27;</span></span><br><span class="line">          <span class="attr">remote:</span> <span class="string">xxxxxx</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>img标签访问图片返回403 forbidden的解决方法</title>
      <link href="/archives/9ac5350.html"/>
      <url>/archives/9ac5350.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过浏览器直接访问图片资源可以正常访问，但是通过 img 标签的形式，在页面中显示图片加载失败，控制台报错信息提示：403 forbidden。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20210720104313.png" alt="img标签访问加载失败"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20210720105222.png" alt="控制台报错信息"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在页面头部的 <code>head</code>  中添加以下代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>http 请求体的 header 中有一个 referrer 字段，用来表示发起 http 请求的源地址信息，这个 referrer 信息是可以省略但是不可修改的，就是说你只能设置是否带上这个 referrer 信息，不能定制 referrer 里面的值。</p><p>服务器端在拿到这个 referrer 值后就可以进行相关的处理，比如图片资源，可以通过 referrer 值判断请求是否来自本站，若不是则返回 403 或者重定向返回其他信息，从而实现图片的防盗链。上面出现 403 就是因为，请求的是别人服务器上的资源，但把自己的 referrer 信息带过去了，被对方服务器拦截返回了 403。</p><p>在前端可以通过 meta 来设置 referrer policy(来源策略)，具体可以设置哪些值以及对应的结果参考这里。所以针对上面的 403 情况的解决方法，就是把 referrer 设置成 no-referrer，这样发送请求不会带上 referrer 信息，对方服务器也就无法拦截了。</p><p>隐藏 referrer 信息后，图片资源可以正常访问</p><p>浏览器中 referrer 默认的值是 no-referrer-when-downgrade，就是除了降级请求的情况以外都会带上 referrer 信息。降级请求是指 https 协议的地址去请求 http 协议，所以上面 403 的情况还有另一种解决方法就是，请求的图片地址换成 http 协议，自己的地址使用 http 协议，这样降级请求也不会带上 referrer。</p><h2 id="一些meta标签的说明"><a href="#一些meta标签的说明" class="headerlink" title="一些meta标签的说明"></a>一些meta标签的说明</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> <span class="comment">&lt;!-- 设置文档字符编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-ua-compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><span class="comment">&lt;!-- 告诉IE浏览器，IE8/9及以后的版本都会以最高版本IE来渲染页面。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><span class="comment">&lt;!-- 指定页面初始缩放比例。--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 上述3个meta标签须放在head标签最前面;其它head内容放在其后面，如link标签--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 允许控制加载资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 尽可能早的放在文档 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只适用于下面这个标签的内容 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 使用web应用程序的名称(当网站作为一个应用程序的时候)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;application-name&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Application Name&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 页面的简短描述(限150个字符)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在某些情况下这个描述作为搜索结果中所示的代码片段的一部分。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;A description of the page&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 控制搜索引擎爬行和索引的行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow,noodp&quot;</span>&gt;</span><span class="comment">&lt;!-- 所有搜索引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;googlebot&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>&gt;</span><span class="comment">&lt;!-- 谷歌 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 告诉谷歌搜索框不显示链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google&quot;</span> <span class="attr">content</span>=<span class="string">&quot;nositelinkssearchbox&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 告诉谷歌不要翻译这个页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google&quot;</span> <span class="attr">content</span>=<span class="string">&quot;notranslate&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- Google网站管理员工具的特定元标记，核实对谷歌搜索控制台所有权 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;verification_token&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 说明用什么软件构建生成的网站，(例如,WordPress,Dreamweaver) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;program&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简短描述你的网站的主题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your website&#x27;s subject&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 很短(10个词以内)描述。主要学术论文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;abstract&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 完整的域名或网址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://example.com/&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;directory&quot;</span> <span class="attr">content</span>=<span class="string">&quot;submission&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 对当前页面一个等级衡量，告诉蜘蛛当前页面在整个网站中的权重到底是多少。General是一般页面，Mature是比较成熟的页面，Restricted代表受限制的。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;rating&quot;</span> <span class="attr">content</span>=<span class="string">&quot;General&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 隐藏发送请求时请求头表示来源的referrer字段。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 禁用自动检测和格式的电话号码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过设置“off”,完全退出DNS队列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-dns-prefetch-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 在客户端存储 cookie，web 浏览器的客户端识别--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;set-cookie&quot;</span> <span class="attr">content</span>=<span class="string">&quot;name=value; expires=date; path=url&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 指定要显示在一个特定框架中的页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Window-Target&quot;</span> <span class="attr">content</span>=<span class="string">&quot;_value&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 地理标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;ICBM&quot;</span> <span class="attr">content</span>=<span class="string">&quot;latitude, longitude&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;geo.position&quot;</span> <span class="attr">content</span>=<span class="string">&quot;latitude;longitude&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;geo.region&quot;</span> <span class="attr">content</span>=<span class="string">&quot;country[-state]&quot;</span>&gt;</span><span class="comment">&lt;!-- 国家代码 (ISO 3166-1): 强制性, 州代码 (ISO 3166-2): 可选; 如 content=&quot;US&quot; / content=&quot;US-NY&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;geo.placename&quot;</span> <span class="attr">content</span>=<span class="string">&quot;city/town&quot;</span>&gt;</span><span class="comment">&lt;!-- 如 content=&quot;New York City&quot; --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基于html2canvas实现HTML页面生成为图片并下载的功能及清晰度优化</title>
      <link href="/archives/558885cd.html"/>
      <url>/archives/558885cd.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到这样一个需求：<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201112203423.png" alt="需求"></p><p>点击下载海报的时候，生成一张海报，并且可以下载。经过一番摸索和踩坑，终于实现了这个功能。再这里记录一下！</p><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  id=&quot;poster-pic&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;div class=&quot;poster-pic-title&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;img</span><br><span class="line">    class=&quot;goods-img&quot;</span><br><span class="line">    :src=&quot;picUrl&quot;</span><br><span class="line">    alt=&quot;加载失败&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;div class=&quot;poster-pic-subtitle&quot;&gt;</span><br><span class="line">    活动名字</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;poster-pic-footer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;top&quot;&gt;</span><br><span class="line">        &lt;span&gt;$999&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;$999&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;buttom&quot;&gt;</span><br><span class="line">        &lt;div&gt;活动时间&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;2020.11.11-2020.11.11&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;img</span><br><span class="line">        class=&quot;code-img&quot;</span><br><span class="line">        :src=&quot;qrcodeUrl&quot;</span><br><span class="line">        alt=&quot;加载失败&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;span</span><br><span class="line">  slot=&quot;footer&quot;</span><br><span class="line">  class=&quot;dialog-footer&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-button @click=&quot;download&quot;&gt;下载二维码&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button</span><br><span class="line">    type=&quot;primary&quot;</span><br><span class="line">    @click=&quot;downloadPosters&quot;</span><br><span class="line">  &gt;下载海报&lt;/el-button&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>页面大致就这样，其实页面怎么样并不重要，主要是在JS实现。</p><h2 id="实现HTML页面保存为图片"><a href="#实现HTML页面保存为图片" class="headerlink" title="实现HTML页面保存为图片"></a>实现HTML页面保存为图片</h2><h3 id="html2canvas的用法"><a href="#html2canvas的用法" class="headerlink" title="html2canvas的用法"></a>html2canvas的用法</h3><p><a href="https://github.com/niklasvh/html2canvas">GitHub-Html2Canvas</a></p><h4 id="实现保存为图片的第一步：HTML转换为Canvas"><a href="#实现保存为图片的第一步：HTML转换为Canvas" class="headerlink" title="实现保存为图片的第一步：HTML转换为Canvas"></a>实现保存为图片的第一步：HTML转换为Canvas</h4><p>基于 <code>html2canvas</code> 可将一个元素渲染为 Canvas, 只需要简单的调用 <code>html2canvas(element[, options])</code> 即可，然后返回一个含有 <code>&lt;canvas&gt;</code> 元素的 <code>promise</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">html2canvas</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">then</span>((canvas)=&#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(canvas)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="实现保存为图片的第二步：Canvas转Image"><a href="#实现保存为图片的第二步：Canvas转Image" class="headerlink" title="实现保存为图片的第二步：Canvas转Image"></a>实现保存为图片的第二步：Canvas转Image</h3><p>上一步生成的 <code>Canvas</code> 即为包含目标元素的 <code>&lt;canvas&gt;</code> 元素对象，实现保存图片的目标只需要将 <code>canvas</code> 转 <code>image</code> 即可。我们选择使用 <code>Canvas2Image.js</code> 进行转换，但它实际上也只是 <code>canvas.toDataUrl</code> 的一个封装。</p><p><a href="https://github.com/hongru/canvas2image">GitHub-Canvas2Image</a></p><p><strong>注意事项！！重点：</strong></p><ul><li>这个包请不要使用 <code>npm</code> 的方式引入，npm包没有更新，存在很多bug，包括模块未导出，下载图片没有后缀和名字的问题！</li><li>请直接下载压缩包，把源代码文件放入项目中，导入使用！</li></ul><h2 id="生成图片清晰度优化"><a href="#生成图片清晰度优化" class="headerlink" title="生成图片清晰度优化"></a>生成图片清晰度优化</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>最终图片的清晰度 取决于 上面第一步中 <code>html</code> 转换 <code>Canvas</code> 的清晰度。</p><p>这里提高清晰度的基本原理是将 <code>canvas</code> 的属性 <code>width</code> 和 <code>height</code> 属性放大，最后将 <code>canvas</code> 的 CSS样式 <code>width</code> 和 <code>height</code> 设置为原来的1倍大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">downloadImg (params) &#123;</span><br><span class="line">  <span class="keyword">let</span> cntElem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(params)</span><br><span class="line">  <span class="keyword">let</span> shareContent = cntElem</span><br><span class="line">  <span class="keyword">let</span> width = shareContent.<span class="property">offsetWidth</span></span><br><span class="line">  <span class="keyword">let</span> height = shareContent.<span class="property">offsetHeight</span></span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> scale = <span class="number">2</span></span><br><span class="line">  canvas.<span class="property">width</span> = width * scale</span><br><span class="line">  canvas.<span class="property">height</span> = height * scale</span><br><span class="line">  canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>).<span class="title function_">scale</span>(scale, scale)</span><br><span class="line">  <span class="keyword">const</span> ops = &#123;</span><br><span class="line">    <span class="attr">scale</span>: scale,</span><br><span class="line">    <span class="attr">width</span>: width,</span><br><span class="line">    <span class="attr">height</span>: height,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">html2canvas</span>(shareContent, ops).<span class="title function_">then</span>(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> img <span class="title class_">Canvas2Image</span>.<span class="title function_">converToImage</span>(canvas, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imgs)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在第一步我们就可以解决通常情况下图片不清晰的问题，但是在我们的实际项目中，可能仍然存在一些十分尴尬的问题，比如大果粒一般的渲染效果。</p><p>这里我们采用一些优化策略：</p><ul><li>更改 <code>百分比布局</code> 为 <code>px</code> 布局</li><li>关闭 Canvas 默认的 抗锯齿 设置</li><li>设置模糊元素的 <code>width</code> 和 <code>height</code> 为素材的原有宽高，通过 <code>scale</code> 缩放。</li></ul><p>基本原理：</p><ul><li>设置 <code>px</code> 为单位，避免样式二次计算导致的模糊</li><li>默认情况下，Canvas 的抗锯齿是开启的，需要手动关闭来实现图像的锐化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">downloadImg (params) &#123;</span><br><span class="line">  <span class="keyword">let</span> cntElem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(params)</span><br><span class="line">  <span class="keyword">let</span> shareContent = cntElem</span><br><span class="line">  <span class="keyword">let</span> width = shareContent.<span class="property">offsetWidth</span></span><br><span class="line">  <span class="keyword">let</span> height = shareContent.<span class="property">offsetHeight</span></span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> scale = <span class="number">2</span></span><br><span class="line">  canvas.<span class="property">width</span> = width * scale</span><br><span class="line">  canvas.<span class="property">height</span> = height * scale</span><br><span class="line">  canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>).<span class="title function_">scale</span>(scale, scale)</span><br><span class="line">  <span class="keyword">const</span> opts = &#123;</span><br><span class="line">    <span class="attr">scale</span>: scale,</span><br><span class="line">    <span class="attr">width</span>: width,</span><br><span class="line">    <span class="attr">height</span>: height,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">html2canvas</span>(shareContent, opts).<span class="title function_">then</span>(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="comment">// 重点：关闭抗锯齿</span></span><br><span class="line">    context.<span class="property">mozImageSmoothingEnabled</span> = <span class="literal">false</span></span><br><span class="line">    context.<span class="property">webkitImageSmoothingEnabled</span> = <span class="literal">false</span></span><br><span class="line">    context.<span class="property">msImageSmoothingEnabled</span> = <span class="literal">false</span></span><br><span class="line">    context.<span class="property">ImgSmoothingEnabled</span> = <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="含有跨域图片的配置（部分图片丢失的问题解决）"><a href="#含有跨域图片的配置（部分图片丢失的问题解决）" class="headerlink" title="含有跨域图片的配置（部分图片丢失的问题解决）"></a>含有跨域图片的配置（部分图片丢失的问题解决）</h2><p>由于Canvas对于图片资源的同源限制，如果画布中包含跨域的图片资源会污染画布，造成生成图片样式混乱或者 <code>html2canvas</code> 方法不执行等问题。</p><p>我们需要在 配置中 开启跨域和禁止污染即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const opts = &#123;</span><br><span class="line">  scale: scale,</span><br><span class="line">  width: width,</span><br><span class="line">  height: height,</span><br><span class="line">  useCORS: true, // 使用跨域</span><br><span class="line">  allowTaint: true, // 允许使用跨域资源</span><br><span class="line">  tainTest: false,</span><br><span class="line">&#125;</span><br><span class="line">html2canvs(element,opts)</span><br></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="文本丢失"><a href="#文本丢失" class="headerlink" title="文本丢失"></a>文本丢失</h3><p>可能使用了 <code>html2canvas</code>  不支持的CSS样式, 例如：<code>display: -webkit-box</code></p><h2 id="完整代码-流程演示"><a href="#完整代码-流程演示" class="headerlink" title="完整代码/流程演示"></a>完整代码/流程演示</h2><ul><li>安装 <code>html2canvas</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add html2canvas</span><br></pre></td></tr></table></figure><p>也可以直接下载 源文件 再进行导入。</p><ul><li>下载 <code>canvas2image.js</code></li></ul><p>在git仓库下载源文件后，进行导入，我这边是挂载到了全局方法</p><p><code>utils/index</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Canvas2Image</span> <span class="keyword">from</span> <span class="string">&#x27;./canvas2image.js&#x27;</span></span><br><span class="line"><span class="comment">// ………………</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// …………………………</span></span><br><span class="line">  <span class="title class_">Canvas2Image</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mani.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">&#x27;@/utils/index.js&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">util</span> = util</span><br></pre></td></tr></table></figure><ul><li>JS代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm 安装直接导入</span></span><br><span class="line"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> <span class="string">&#x27;html2canvas&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@params: dom节点-class/id</span></span><br><span class="line"><span class="comment">@name：下载之后的名字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">downloadImg (params, name) &#123;</span><br><span class="line">  <span class="keyword">let</span> cntElem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(params)</span><br><span class="line">  <span class="keyword">let</span> shareContent = cntElem</span><br><span class="line">  <span class="keyword">let</span> width = shareContent.<span class="property">offsetWidth</span></span><br><span class="line">  <span class="keyword">let</span> height = shareContent.<span class="property">offsetHeight</span></span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> scale = <span class="number">2</span></span><br><span class="line">  canvas.<span class="property">width</span> = width * scale</span><br><span class="line">  canvas.<span class="property">height</span> = height * scale</span><br><span class="line">  canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>).<span class="title function_">scale</span>(scale, scale)</span><br><span class="line">  <span class="keyword">const</span> ops = &#123;</span><br><span class="line">    <span class="attr">scale</span>: scale,</span><br><span class="line">    <span class="attr">width</span>: width,</span><br><span class="line">    <span class="attr">height</span>: height,</span><br><span class="line">    <span class="comment">// 跨域配置</span></span><br><span class="line">    <span class="attr">useCORS</span>: <span class="literal">true</span>, <span class="comment">// 使用跨域</span></span><br><span class="line">    <span class="attr">allowTaint</span>: <span class="literal">true</span>, <span class="comment">// 允许使用跨域资源</span></span><br><span class="line">    <span class="attr">tainTest</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">html2canvas</span>(shareContent, ops).<span class="title function_">then</span>(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    context.<span class="property">mozImageSmoothingEnabled</span> = <span class="literal">false</span></span><br><span class="line">    context.<span class="property">webkitImageSmoothingEnabled</span> = <span class="literal">false</span></span><br><span class="line">    context.<span class="property">msImageSmoothingEnabled</span> = <span class="literal">false</span></span><br><span class="line">    context.<span class="property">ImgSmoothingEnabled</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 保存图片，可以保存PNG，JPEG等，调用对应api即可</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">util</span>.<span class="property">Canvas2Image</span>.<span class="title function_">saveAsPNG</span>(canvas, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>, name)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">downloadCode () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">downloadImg</span>(<span class="string">&#x27;.code-img&#x27;</span>, <span class="string">&#x27;二维码&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">downloadPost () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">downloadImg</span>(<span class="string">&#x27;#poster-pic&#x27;</span>, <span class="string">&#x27;海报&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些你总是要用却又死活记不住的css属性</title>
      <link href="/archives/59df034f.html"/>
      <url>/archives/59df034f.html</url>
      
        <content type="html"><![CDATA[<p>收集了一些我平时经常要用到的但又总是记不住的样式。有错漏的地方欢迎与我交流。</p><h2 id="一、设置input-的placeholder的字体样式"><a href="#一、设置input-的placeholder的字体样式" class="headerlink" title="一、设置input 的placeholder的字体样式"></a>一、设置input 的placeholder的字体样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder &#123;    <span class="comment">/* Chrome/Opera/Safari */</span></span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>::-moz-placeholder &#123; <span class="comment">/* Firefox 19+ */</span></span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>:-ms-input-placeholder &#123; <span class="comment">/* IE 10+ */</span></span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>:-moz-placeholder &#123; <span class="comment">/* Firefox 18- */</span></span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置input聚焦时的样式"><a href="#设置input聚焦时的样式" class="headerlink" title="设置input聚焦时的样式"></a>设置input聚焦时的样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取消input的边框"><a href="#取消input的边框" class="headerlink" title="取消input的边框"></a>取消input的边框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: none;</span><br><span class="line"><span class="attribute">outline</span>: none;</span><br></pre></td></tr></table></figure><h2 id="二、隐藏滚动条或更改滚动条样式"><a href="#二、隐藏滚动条或更改滚动条样式" class="headerlink" title="二、隐藏滚动条或更改滚动条样式"></a>二、隐藏滚动条或更改滚动条样式</h2><blockquote><p>注意这几个名词，你就可以自由设置滚动条样式了：</p></blockquote><ul><li>scroll-track——滚动条轨道</li><li>scrollbar-thumb——滚动条滑块</li><li>scrollbar-button——滚动条按钮</li><li>scrollbar-corner——滚动角</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*css主要部分的样式*/</span><span class="comment">/*定义滚动条宽高及背景，宽高分别对应横竖滚动条的尺寸*/</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>; <span class="comment">/*对垂直流动条有效*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>; <span class="comment">/*对水平流动条有效*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滚动条的轨道颜色、内阴影及圆角*/</span></span><br><span class="line">::-webkit-scrollbar-track&#123;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: rosybrown;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滑块颜色、内阴影及圆角*/</span></span><br><span class="line">::-webkit-scrollbar-thumb&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#E8E8E8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义两端按钮的样式*/</span></span><br><span class="line">::-webkit-scrollbar-button &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:cyan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义右下角汇合处的样式*/</span></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    <span class="attribute">background</span>:khaki;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、文字超出隐藏并显示省略号"><a href="#三、文字超出隐藏并显示省略号" class="headerlink" title="三、文字超出隐藏并显示省略号"></a>三、文字超出隐藏并显示省略号</h2><p>大家要注意这几个属性：</p><ul><li>white-space————处理元素空白，常用值有：nowrap不换行，其他还有pre-line、pre-wrap等，大家可以自己尝试。</li><li>word-break——在合适的点断行。常用值有break-all可以在单词内换行，keep-all只能在半角空格或连字符处换行。我们需要超出盒子部分就换行，所以用break-all。</li><li>box-orient——子元素如何排列。值有vertical和horizontal，分别是垂直排列和水平排列。</li><li>line-clamp——控制文本行数。</li></ul><h3 id="单行（一定要有宽度）"><a href="#单行（一定要有宽度）" class="headerlink" title="单行（一定要有宽度）"></a>单行（一定要有宽度）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>:<span class="number">200</span>rpx;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">word-break</span>: break-all;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;  // 自适应布局</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; // 文本行数最多<span class="number">2</span>行</span><br><span class="line">-webkit-box-orient: vertical;  // 子元素垂直排列</span><br><span class="line"><span class="attribute">overflow</span>: hidden; // 超出部分隐藏</span><br></pre></td></tr></table></figure><h2 id="四、控制div内的元素自动换行"><a href="#四、控制div内的元素自动换行" class="headerlink" title="四、控制div内的元素自动换行"></a>四、控制div内的元素自动换行</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">word-wrap</span>: break-word; // 允许长单词换行到下一行</span><br><span class="line"><span class="attribute">word-break</span>：break-<span class="attribute">all</span>; // 在哪儿换行都行，在单词内换行都行</span><br></pre></td></tr></table></figure><h2 id="五、-纯css画三角形"><a href="#五、-纯css画三角形" class="headerlink" title="五、 纯css画三角形"></a>五、 纯css画三角形</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#demo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、-绝对定位元素居中（水平和垂直方向）"><a href="#六、-绝对定位元素居中（水平和垂直方向）" class="headerlink" title="六、 绝对定位元素居中（水平和垂直方向）"></a>六、 绝对定位元素居中（水平和垂直方向）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#demo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、表格边框合并"><a href="#七、表格边框合并" class="headerlink" title="七、表格边框合并"></a>七、表格边框合并</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">tr</span>,<span class="selector-tag">td</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化 | 使用 commitizen 规范你的 commit message！</title>
      <link href="/archives/5aa66889.html"/>
      <url>/archives/5aa66889.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Commit-规范"><a href="#什么是-Commit-规范" class="headerlink" title="什么是 Commit 规范"></a>什么是 Commit 规范</h2><h3 id="Commit-Message-格式"><a href="#Commit-Message-格式" class="headerlink" title="Commit Message 格式"></a>Commit Message 格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;空行&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;空行&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>上面是一次 <code>Commit</code> 后 <code>Message</code> 格式规范，分成标题，内容详情，结尾三个部分，各有各的用处，没有多余项。</p><p>头部即首行，是可以直接在页面中预览的部分，入上面图中所示，一共有三个部分 <code>&lt;type&gt;</code>，<code>&lt;scope&gt;</code>，<code>&lt;subject&gt;</code>，含义分别如下:</p><h4 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h4><ul><li><p>feat：新功能（feature）</p></li><li><p>fix：修补 bug</p></li><li><p>docs：文档（documentation）</p></li><li><p>style： 格式（不影响代码运行的变动）</p></li><li><p>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</p></li><li><p>test：增加测试</p></li><li><p>chore：构建过程或辅助工具的变动</p></li></ul><h4 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h4><p>用来说明本次 <code>Commit</code> 影响的范围，即简要说明修改会涉及的部分。这个本来是选填项，但从 <code>AngularJS</code> 实际项目中可以看出基本上也成了必填项了。</p><h4 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h4><p>用来简要描述本次改动，概述就好了，因为后面还会在 <code>Body</code> 里给出具体信息。并且最好遵循下面三条:</p><p>以动词开头，使用第一人称现在时，比如 <code>change</code>，而不是 <code>changed</code> 或 <code>changes</code></p><p>首字母不要大写</p><p>结尾不用句号(.)</p><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p><code>body</code> 里的内容是对上面<code>subject</code>里内容的展开，在此做更加详尽的描述，内容里应该包含修改动机和修改前后的对比。</p><h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p><code>footer</code> 里的主要放置不兼容变更和 <code>Issue</code> 关闭的信息</p><h4 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h4><p>此外如果需要撤销之前的 <code>Commit</code>，那么本次 <code>Commit Message</code> 中必须以 <code>revert</code>开头，后面紧跟前面描述的 <code>Header</code> 部分，格式不变。并且，<code>Body</code> 部分的格式也是固定的，必须要记录撤销前<code> Commit</code> 的值。</p><h2 id="Commitizen-是什么？"><a href="#Commitizen-是什么？" class="headerlink" title="Commitizen 是什么？"></a>Commitizen 是什么？</h2><p>是一个格式化 <code>commit message</code> 的工具.</p><h3 id="Commitizen-安装"><a href="#Commitizen-安装" class="headerlink" title="Commitizen 安装"></a>Commitizen 安装</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>全局安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201109142622.png"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>全局安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cz-conventional-changelog</span><br><span class="line">npm install -g conventional-changelog</span><br><span class="line">npm install -g conventional-changelog-cli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201109142711.png"></p><p>然后，运行下面命令，使其支持 <code>Angular</code> 的 <code>Commit message</code> 格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201109142748.png"></p><p>此时，你的<code>package.json</code> 会多出以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;cz-conventional-changelog&quot;: &quot;^3.3.0&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">  &quot;commitizen&quot;: &#123;</span><br><span class="line">    &quot;path&quot;: &quot;./node_modules/cz-conventional-changelog&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在需要 <code>git commit</code> 的地方使用 <code>git cz</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201109142904.png"></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>项目内安装 <code>commitlint</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure><p>之后你的 <code>package.json</code> 又会多出一部分的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;@commitlint/cli&quot;: &quot;^8.3.5&quot;,</span><br><span class="line">  &quot;@commitlint/config-conventional&quot;: &quot;^8.3.4&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在<code>package.json</code> 统计目录新建 <code>commitlint.config.js</code> 文件 然后写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123; extends: [&quot;@commitlint/config-conventional&quot;] &#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201109143027.png"></p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>项目中安装<code>husky</code>，用于校验 <code>commit message</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install husky</span><br></pre></td></tr></table></figure><p>接着配置 <code>husky</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@commitlint/cli&quot;: &quot;^8.3.5&quot;,</span><br><span class="line">    &quot;@commitlint/config-conventional&quot;: &quot;^8.3.4&quot;,</span><br><span class="line">    &quot;husky&quot;: &quot;^4.2.5&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;husky&quot;: &#123;</span><br><span class="line">    &quot;hooks&quot;: &#123;</span><br><span class="line">      &quot;commit-msg&quot;: &quot;commitlint -e $GIT_PARAMS&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当我们去以不合法的提交信息进行提交代码时，会进行检查。</p><h2 id="Commitizen-完整使用流程-简述"><a href="#Commitizen-完整使用流程-简述" class="headerlink" title="Commitizen 完整使用流程(简述)"></a>Commitizen 完整使用流程(简述)</h2><p>全局安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen</span><br><span class="line">npm install -g cz-conventional-changelog</span><br><span class="line">npm install -g conventional-changelog</span><br><span class="line">npm install -g conventional-changelog-cli</span><br></pre></td></tr></table></figure><p>新建项目文件夹，快速初始化 <code>package.json</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --y</span><br></pre></td></tr></table></figure><p>初始化 <code>git</code> 仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>项目内执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save --save-exact</span><br><span class="line">npm install @commitlint/config-conventional @commitlint/cli</span><br><span class="line">npm install husky</span><br></pre></td></tr></table></figure><p>新建 <code>commitlint.config.js</code> 并写入以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123; extends: [&quot;@commitlint/config-conventional&quot;] &#125;;</span><br></pre></td></tr></table></figure><p>暂存文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>提交<code>commit message</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cz</span><br></pre></td></tr></table></figure><p>控制台会显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git cz</span><br><span class="line">cz-cli@4.2.2, cz-conventional-changelog@3.3.0</span><br><span class="line"> // 选择type</span><br><span class="line">? Select the type of change that you&#x27;re committing: (Use arrow keys)</span><br><span class="line">&gt; feat:     A new feature</span><br><span class="line">  fix:      A bug fix</span><br><span class="line">  docs:     Documentation only changes</span><br><span class="line">  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class="line">  refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class="line">  perf:     A code change that improves performance</span><br><span class="line">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">? Select the type of change that you&#x27;re committing: feat:     A new feature</span><br><span class="line">// scope范围</span><br><span class="line">? What is the scope of this change (e.g. component or file name): (press enter to skip) add config</span><br><span class="line">//简述</span><br><span class="line">? Write a short, imperative tense description of the change (max 82 chars):</span><br><span class="line"> (5) 添加了配置</span><br><span class="line"> // 详细描述</span><br><span class="line">? Provide a longer description of the change: (press enter to skip)</span><br><span class="line"> 添加了commit message格式化工具的配置</span><br><span class="line">? Are there any breaking changes? No</span><br><span class="line">? Does this change affect any open issues? No</span><br><span class="line">[master (root-commit) c830fad] feat(add config): 添加了配置</span><br><span class="line"> 4 files changed, 1977 insertions(+)</span><br><span class="line"> create mode 100644 .gitignore</span><br><span class="line"> create mode 100644 CHANGELOG.md</span><br><span class="line"> create mode 100644 package-lock.json</span><br><span class="line"> create mode 100644 package.json</span><br></pre></td></tr></table></figure><p>输出 <code>log</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conventional-changelog -p angular -i CHANGELOG.md -s</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如有错漏，欢迎与我交流。</p><p>参考文章： <a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">阮一峰的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> commitizen </tag>
            
            <tag> 前端工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router路由重复点击时报错Uncaught (in promise) NavigationDuplicated:Avoided redundant navigation to current location 的解决方法</title>
      <link href="/archives/721f45a5.html"/>
      <url>/archives/721f45a5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总结一下，在项目中遇到的一个小问题，使用 Vue 构件的项目里，有时候会存在 <strong>重复点击路由</strong> 报错的问题，<code>Uncaught (in promise) NavigationDuplicated:Avoided redundant navigation to current location</code></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201031091900.png" alt="报错信息"></p><p>虽然这个报错并不影响程序的正常运行，但是依然让人感到很不爽，这段代码也差不多是我在构建项目时用的挺多的一段代码。</p><p>而且，应该也有很多萌新遇到过这个问题，但是不知道如何解决，所以在这边记录一下。</p><p>造成这个报错的原因，大多是说 因为 Vue-Router 版本的原因，但是我尝试更换了不同版本，但是依然没有得到缓解，还是这段代码好使！</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在 <code>router/index.js</code> 文件中添加一段代码即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决重复点击路由报错的BUG</span></span><br><span class="line"><span class="keyword">const</span> originalPush = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">location</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以加在 <code>mian.js</code> 中,我更加习惯于添加在 <code>router/index.js</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201031092314.png" alt="index.js"></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue-Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在uni-app中开启触感反馈</title>
      <link href="/archives/a402cd10.html"/>
      <url>/archives/a402cd10.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在用 uni-app 开发一款 app，需求中有一项是点击 <code>触感反馈</code>，查阅了 uni-app 相关文档，发现并没有对应的 API，最开始尝试用 <code>震动</code> 的方式来模拟 <code>触感反馈</code> , 但是感觉效果并不好，因为 iPhone 并不支持 <code>短震动(15ms)</code>,只支持 <code>长震动(400ms)</code>。</p><p>在这里记录一下最后的处理方式。</p><h2 id="IOS-开启触感反馈"><a href="#IOS-开启触感反馈" class="headerlink" title="IOS 开启触感反馈"></a>IOS 开启触感反馈</h2><p>iPhone 使用触感反馈需要手机支持并且在设置中打开，否则并不能触发。核心代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">UIImpactFeedbackGenerator</span> = plus.<span class="property">ios</span>.importClass(</span><br><span class="line">  <span class="string">&#x27;UIImpactFeedbackGenerator&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> impact = <span class="keyword">new</span> <span class="title class_">UIImpactFeedbackGenerator</span>()</span><br><span class="line">impact.<span class="title function_">prepare</span>()</span><br><span class="line">impact.<span class="title function_">init</span>(<span class="number">1</span>)</span><br><span class="line">impact.<span class="title function_">impactOccurred</span>()</span><br></pre></td></tr></table></figure><p>只需要在需要触感反馈的地方，把这段代码复制进去就好！</p><h2 id="Android-触感反馈"><a href="#Android-触感反馈" class="headerlink" title="Android 触感反馈"></a>Android 触感反馈</h2><p>安卓的触感反馈，我目前使用 <code>短震动</code> 进行了模拟，具体可以查看 uni-app 官方文档。 当然插件市场也有人提供了原生的触感反馈的插件：<a href="https://ext.dcloud.net.cn/plugin?id=1759">触感反馈</a></p><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><p>在点击底部 Tabbar 的时候，触发触感反馈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onTabItemTap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// #ifdef APP-PLUS</span></span><br><span class="line">  <span class="keyword">if</span> (uni.<span class="title function_">getSystemInfoSync</span>().<span class="property">platform</span> == <span class="string">&quot;ios&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">UIImpactFeedbackGenerator</span> = plus.<span class="property">ios</span>.importClass(<span class="string">&#x27;UIImpactFeedbackGenerator&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> impact = <span class="keyword">new</span> <span class="title class_">UIImpactFeedbackGenerator</span>();</span><br><span class="line">  impact.<span class="title function_">prepare</span>();</span><br><span class="line">  impact.<span class="title function_">init</span>(<span class="number">1</span>);</span><br><span class="line">  impact.<span class="title function_">impactOccurred</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (uni.<span class="title function_">getSystemInfoSync</span>().<span class="property">platform</span> == <span class="string">&quot;android&quot;</span>) &#123;</span><br><span class="line">  uni.<span class="title function_">vibrateShort</span>(&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击震动&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #endif</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm使用奇淫技巧</title>
      <link href="/archives/aef974df.html"/>
      <url>/archives/aef974df.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么我推荐使用-npm？"><a href="#为什么我推荐使用-npm？" class="headerlink" title="为什么我推荐使用 npm？"></a>为什么我推荐使用 npm？</h2><p><code>npm</code> 是前端开发里最常用的包管理工具了，通常情况下我都会推荐使用 <code>npm</code> 作为包管理工具，而不推荐 <code>cnpm</code> 呢？其实理由很简单，只要你去看一看 <code>npm</code> 和 <code>cnpm</code> 管理的 <code>node_modules</code> 文件夹下的内容，就会明白我为什么更加推荐 <code>npm</code> 而不是 <code>cnpm</code> 了。</p><h2 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h2><p>传送门 👉： <a href="/archives/4f1f2f20.html">Node.js 与 npm 安装</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>传送门 👉： <a href="/archives/41e021ef.html">npm 常见命令</a></p><h2 id="管理-npm-的版本：nvm"><a href="#管理-npm-的版本：nvm" class="headerlink" title="管理 npm 的版本：nvm"></a>管理 npm 的版本：nvm</h2><p>一般来说都推荐使用最新的稳定版即可。但总有些特殊时候我们需要切换我们的 <code>node</code> 版本！<br>这里我们可以选择 👉 <code>NVM (Node Version Manager)</code>: Nodejs 的版本管理工具</p><h3 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h3><p>推荐使用 <code>nvm-setup.zip</code>👉： <a href="https://github.com/coreybutler/nvm-windows/releases">地址</a></p><p>没错，就这么简单！</p><p>当然这里建议在安装之前，先检查一下是否已经安装过 <code>node</code> 版本，如果有的话，建议卸载掉(控制面板》卸载程序)，否则可能导致意外错误：<code>NVM</code> 可能在项目的文件夹下无法使用。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g --depth=<span class="number">0</span>   // 查看全局安装中是否有早前安装的node</span><br></pre></td></tr></table></figure><h3 id="nvm-的常用命令"><a href="#nvm-的常用命令" class="headerlink" title="nvm 的常用命令"></a>nvm 的常用命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm                  // 会提示nvw下的相关命令</span><br><span class="line">nvm ls               // 查看已安装node版本</span><br><span class="line">nvm install vXX      // 安装对应vXX版本的node</span><br><span class="line">nvm uninstall vXX    // 卸载对应vXX版本的node</span><br><span class="line">nvm use xxx          // 选择使用XXX版本</span><br></pre></td></tr></table></figure><p>到这里我们就可以快速的切换我们的 <code>node</code> 版本了！</p><h3 id="管理-npm-源：nrm"><a href="#管理-npm-源：nrm" class="headerlink" title="管理 npm 源：nrm"></a>管理 npm 源：nrm</h3><p>因为 <code>npm</code> 的下载速度有时候实在令人着急，所以很多时候我们都会选择淘宝的源，来看看我们以前是怎么换源的：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>好长一串是吧，而且我还想使用其他源呢？比如公司的自有源，这么长一串实在是太烦了啊，所以我推荐使用 <code>nrm</code></p><h3 id="安装-nrm"><a href="#安装-nrm" class="headerlink" title="安装 nrm"></a>安装 nrm</h3><p>在命令行执行命令，全局安装 <code>nrm</code>。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><p>更加简单了……</p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nrm ls                             //查看可选的源。</span><br><span class="line">nrm use xxx                        //对应的名字</span><br><span class="line">nrm add registry http://xxxxxx/    //增加私有源</span><br><span class="line">nrm <span class="built_in">del</span> &lt;registry&gt;                 //删除源</span><br><span class="line">nrm test npm                       //速度测试</span><br></pre></td></tr></table></figure><p>随时随地，想怎么换就怎么换！</p><h2 id="更新你的依赖版本：-npm-check-updates"><a href="#更新你的依赖版本：-npm-check-updates" class="headerlink" title="更新你的依赖版本： npm-check-updates"></a>更新你的依赖版本： npm-check-updates</h2><p>有时候在写<code>nmp</code> 工程的时候，想要更新模块到最新的版本，还是比较麻烦的，所以这里推荐 <code>npm</code> 的模块更新：<code>npm-check-updates</code></p><h3 id="安装-npm-check-updates"><a href="#安装-npm-check-updates" class="headerlink" title="安装 npm-check-updates"></a>安装 npm-check-updates</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm outdated   //查看依赖的当前版本、最新版本</span><br><span class="line">ncu            //查看可以更新的模块</span><br><span class="line">ncu -u         //更新package.json中版本</span><br><span class="line">npm install    //更新模块版本</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里基本就结束了，快去试一试吧！</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> 前端 </category>
          
          <category> 工具 </category>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT 鉴权在 ThinkJS 中的实践</title>
      <link href="/archives/4faef664.html"/>
      <url>/archives/4faef664.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-JWT"><a href="#什么是-JWT" class="headerlink" title="什么是 JWT"></a>什么是 JWT</h2><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（(RFC 7519).该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。它提供基于 JSON 格式的 Token 来做安全认证。</p><h2 id="JWT-鉴权在-ThinkJS-中的实践"><a href="#JWT-鉴权在-ThinkJS-中的实践" class="headerlink" title="JWT 鉴权在 ThinkJS 中的实践"></a>JWT 鉴权在 ThinkJS 中的实践</h2><h3 id="公共配置"><a href="#公共配置" class="headerlink" title="公共配置"></a>公共配置</h3><p><code>/src/config/config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">jwt</span>: &#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;ConstOwn&#x27;</span>,</span><br><span class="line">    <span class="attr">cookie</span>: <span class="string">&#x27;jwt-token&#x27;</span>,</span><br><span class="line">    <span class="attr">expire</span>: <span class="number">30</span>, <span class="comment">// 秒</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这三个参数在不同的位置会用到，为了统一管理我们提取到了公共的 config 中。</p><h3 id="中间件配置"><a href="#中间件配置" class="headerlink" title="中间件配置"></a>中间件配置</h3><p><code>/src/config/middleware.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;koa-jwt&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isDev = think.<span class="property">env</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">handle</span>: jwt,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">cookie</span>: think.<span class="title function_">config</span>(<span class="string">&#x27;jwt&#x27;</span>)[<span class="string">&#x27;cookie&#x27;</span>],</span><br><span class="line">      <span class="attr">secret</span>: think.<span class="title function_">config</span>(<span class="string">&#x27;jwt&#x27;</span>)[<span class="string">&#x27;secret&#x27;</span>],</span><br><span class="line">      <span class="attr">passthrough</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="在-think-Controller-上使用"><a href="#在-think-Controller-上使用" class="headerlink" title="在 think.Controller 上使用"></a>在 think.Controller 上使用</h3><h4 id="封装-base-js"><a href="#封装-base-js" class="headerlink" title="封装 base.js"></a>封装 <code>base.js</code></h4><p>通常情况下，Controller 中都继承于 <code>base.js</code>，我们可以把鉴权相关的方法封装在 <code>base.js</code> 中</p><p><code>src/controller/base.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonwebtoken = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> think.<span class="property">Controller</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">__before</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 跨域处理</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;x-requested-with&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Request-Method&#x27;</span>, <span class="string">&#x27;GET,POST,PUT,DELETE&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 校验失败</span></span><br><span class="line">  <span class="title function_">authFail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">state</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;身份校验失败,请重新登录&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 校验</span></span><br><span class="line">  <span class="title function_">checkAuth</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">headers</span>[<span class="string">&#x27;x-token&#x27;</span>]</span><br><span class="line">    <span class="keyword">const</span> &#123; secret &#125; = <span class="variable language_">this</span>.<span class="title function_">config</span>(<span class="string">&#x27;jwt&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> tokenObj = token ? jsonwebtoken.<span class="title function_">verify</span>(token, secret) : &#123;&#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">state</span>.<span class="property">username</span> = tokenObj.<span class="property">name</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">authFail</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!tokenObj.<span class="property">name</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">authFail</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateAuth</span>(token.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新信息</span></span><br><span class="line">  <span class="title function_">updateAuth</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">      <span class="attr">name</span>: userName,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取JWT的配置信息</span></span><br><span class="line">    <span class="keyword">const</span> &#123; secret, cookie, expire &#125; = <span class="variable language_">this</span>.<span class="title function_">config</span>(<span class="string">&#x27;jwt&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> token = jsonwebtoken.<span class="title function_">sign</span>(userInfo, secret, &#123; <span class="attr">expiresIn</span>: expire &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">cookie</span>(cookie, token)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;authorization&#x27;</span>, token)</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在业务逻辑中使用"><a href="#在业务逻辑中使用" class="headerlink" title="在业务逻辑中使用"></a>在业务逻辑中使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Base</span> = <span class="built_in">require</span>(<span class="string">&#x27;../base.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="title function_">__before</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">indexAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;login page&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loginAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//   获取post提交用户名和密码</span></span><br><span class="line">      <span class="keyword">const</span> username = <span class="variable language_">this</span>.<span class="title function_">post</span>(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> password = <span class="variable language_">this</span>.<span class="title function_">post</span>(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">      <span class="comment">// 查寻数据库member表,根据用户名查询用户信息</span></span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">model</span>(<span class="string">&#x27;member&#x27;</span>)</span><br><span class="line">        .<span class="title function_">where</span>(&#123; <span class="attr">username</span>: username &#125;)</span><br><span class="line">        .<span class="title function_">find</span>()</span><br><span class="line">      <span class="comment">// 判断提交的密码是否与查询到的密码一致</span></span><br><span class="line">      <span class="keyword">if</span> (user.<span class="property">password</span> === <span class="variable language_">this</span>.<span class="title function_">verifyPassword</span>(password)) &#123;</span><br><span class="line">        <span class="comment">// 完成登陆-更新token</span></span><br><span class="line">        <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="title function_">updateAuth</span>(username)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">json</span>(&#123; <span class="attr">state</span>: <span class="string">&#x27;登陆成功&#x27;</span>, <span class="attr">token</span>: token &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">json</span>(&#123; <span class="attr">state</span>: <span class="string">&#x27;登陆失败&#x27;</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">logoutAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateAuth</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">success</span>(<span class="string">&#x27;退出登录成功&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加密验证</span></span><br><span class="line">  <span class="title function_">verifyPassword</span>(<span class="params">password</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> think.<span class="title function_">md5</span>(</span><br><span class="line">      think.<span class="title function_">md5</span>(<span class="string">&#x27;ConstOwn&#x27;</span>) + think.<span class="title function_">md5</span>(password) + think.<span class="title function_">md5</span>(<span class="string">&#x27;nwOtsnoC&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由验证"><a href="#路由验证" class="headerlink" title="路由验证"></a>路由验证</h4><p>如果进入路由需要验证权限的话，直接在 __before 中调用 <code>checkAuth</code> 方法即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="title function_">__before</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">checkAuth</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Logic-权限验证"><a href="#Logic-权限验证" class="headerlink" title="Logic 权限验证"></a>Logic 权限验证</h4><p><code>/src/logic/jwt1.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; checkAuth &#125; = think.<span class="property">Controller</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> think.<span class="property">Logic</span> &#123;</span><br><span class="line">  @checkAuth</span><br><span class="line">  <span class="title function_">userAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 正常的参数验证逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个验证就完成了！ 如果该 Logic 中的所有 action 都需要进行验证，只需要给 __before 加 decorator 就可以了，其他的 action 就不用加了！</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> ThinkJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> ThinkJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkJS允许跨域处理</title>
      <link href="/archives/482180fa.html"/>
      <url>/archives/482180fa.html</url>
      
        <content type="html"><![CDATA[<p>在 <code>src/controller/base.js</code> 中的 <code>__before</code> 中添加以下代码，即可允许全局跨域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;origin&#x27;</span>) || <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;x-requested-with&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Request-Method&#x27;</span>, <span class="string">&#x27;GET,POST,PUT,DELETE&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> ThinkJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> ThinkJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 svg-captcha 插件在 ThinkJS 中实现随机验证码功能</title>
      <link href="/archives/155e47b.html"/>
      <url>/archives/155e47b.html</url>
      
        <content type="html"><![CDATA[<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200831144245.png" alt="验证码"></p><h2 id="安装-svg-captcha"><a href="#安装-svg-captcha" class="headerlink" title="安装 svg-captcha"></a>安装 svg-captcha</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save svg-captcha</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="svgCaptcha-create-options"><a href="#svgCaptcha-create-options" class="headerlink" title="svgCaptcha.create(options)"></a>svgCaptcha.create(options)</h3><p>如果没有任何参数，则生成的 svg 图片有 4 个字符。</p><p><code>size</code>: 4 // 验证码长度<br><code>ignoreChars</code>: ‘0o1i’ // 验证码字符中排除 0o1i<br><code>noise</code>: 1 // 干扰线条的数量<br><code>color</code>: true // 验证码的字符是否有颜色，默认没有，如果设定了背景，则默认有<br><code>background</code>: ‘#cc9966’ // 验证码图片背景颜色</p><p>该函数返回的对象拥有以下属性:<br><code>data</code>: string // svg 路径<br><code>text</code>: string // 验证码文字</p><h3 id="svgCaptcha-createMathExpr-options"><a href="#svgCaptcha-createMathExpr-options" class="headerlink" title="svgCaptcha.createMathExpr(options)"></a>svgCaptcha.createMathExpr(options)</h3><p>和前面的 api 的参数和返回值都一样。不同的是这个 api 生成的 svg 是一个算数式，而 text 属性上是算数式的结果。不过用法和之前是完全一样的。</p><h3 id="svgCaptcha-loadFont-url"><a href="#svgCaptcha-loadFont-url" class="headerlink" title="svgCaptcha.loadFont(url)"></a>svgCaptcha.loadFont(url)</h3><p>加载字体，覆盖内置的字体。</p><p><code>url</code>: string // 字体文件存放路径 该接口会调用 opentype.js 同名的接口。 你可能需要更改一些配置才能让你得字体好看。<br>详见下面的这个接口：</p><h3 id="svgCaptcha-options"><a href="#svgCaptcha-options" class="headerlink" title="svgCaptcha.options"></a>svgCaptcha.options</h3><p>这是全局配置对象。 create 和 createMathExpr 接口的默认配置就是使用的这个对象。</p><p>除了 size, noise, color, 和 background 之外，你还可以修改以下属性：</p><p><code>width</code>: number // width of captcha<br><code>height</code>: number // height of captcha<br><code>fontSize</code>: number // captcha text size<br><code>charPreset</code>: string // random character preset</p><h3 id="svgCaptcha-randomText-size-options"><a href="#svgCaptcha-randomText-size-options" class="headerlink" title="svgCaptcha.randomText([size|options])"></a>svgCaptcha.randomText([size|options])</h3><p>返回随机字符串</p><h3 id="svgCaptcha-text-options"><a href="#svgCaptcha-text-options" class="headerlink" title="svgCaptcha(text, options)"></a>svgCaptcha(text, options)</h3><p>返回基于 text 参数生成得 svg 路径<br>在 1.1.0 版本之前你需要调用上面的两个接口，但是现在只需要调用 create()</p><h2 id="在-ThinkJS-中的实践"><a href="#在-ThinkJS-中的实践" class="headerlink" title="在 ThinkJS 中的实践"></a>在 ThinkJS 中的实践</h2><h3 id="简单代码"><a href="#简单代码" class="headerlink" title="简单代码"></a>简单代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Base</span> = <span class="built_in">require</span>(<span class="string">&#x27;../base.js&#x27;</span>)</span><br><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">&#x27;svg-captcha&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="title function_">__before</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">indexAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">postDataAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> reward = <span class="variable language_">this</span>.<span class="title function_">post</span>()</span><br><span class="line">      reward.<span class="property">checked</span> = -<span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">session</span>.<span class="property">captcha</span> === reward.<span class="property">code</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">model</span>(<span class="string">&#x27;reward&#x27;</span>).<span class="title function_">add</span>(reward)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">session</span>.<span class="property">captcha</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">state</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;提交成功&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">state</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;验证码错误或已失效&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">codeAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> captcha = svgCaptcha.<span class="title function_">createMathExpr</span>(&#123;</span><br><span class="line">      <span class="attr">size</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">ignoreChars</span>: <span class="string">&#x27;0o1i&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">session</span>.<span class="property">captcha</span> = captcha.<span class="property">text</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">json</span>(captcha.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>首先我们需要导入模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">&#x27;svg-captcha&#x27;</span>)</span><br></pre></td></tr></table></figure><p>创建方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">codeAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> captcha = svgCaptcha.<span class="title function_">createMathExpr</span>(&#123;</span><br><span class="line">    <span class="attr">size</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">ignoreChars</span>: <span class="string">&#x27;0o1i&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">session</span>.<span class="property">captcha</span> = captcha.<span class="property">text</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">json</span>(captcha.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我选择的是生成一个算数式的验证码，然后将得到的 <code>captcha.text</code> 即算术式的结果，存入到 <code>session</code> 中。</p><p>当前端提交表单的时候，我们将表单中提交过来的结果与后端的结果进行比对是否一致：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">session</span>.<span class="property">captcha</span> === reward.<span class="property">code</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO Something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个简单的随机验证码的功能就实现完成了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/produck/svg-captcha">svg-captcha</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> ThinkJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> ThinkJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode个人常用插件合集</title>
      <link href="/archives/fccd987.html"/>
      <url>/archives/fccd987.html</url>
      
        <content type="html"><![CDATA[<h3 id="自动闭合-HTML-标签"><a href="#自动闭合-HTML-标签" class="headerlink" title="自动闭合 HTML 标签"></a>自动闭合 HTML 标签</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830171002.png" alt="image-20200830170541187"></p><p>最基础的插件之一，用途就像它的名字一样，妈妈再也不用担心我因为缺少一个关闭标记，而花大量时间查找错误啦！</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830212542.gif" alt="st3"></p><h3 id="自动重命名-HTML-标签"><a href="#自动重命名-HTML-标签" class="headerlink" title="自动重命名 HTML 标签"></a>自动重命名 HTML 标签</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830170205.png"></p><p>自动重命名你的 HTML 标签，当你更改某一个标签的时候，对应的闭合或开始标签也会自动重命名！</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830213146.gif" alt="2"></p><h3 id="成对括号匹配"><a href="#成对括号匹配" class="headerlink" title="成对括号匹配"></a>成对括号匹配</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830170954.png" alt="image-20200830170952310"></p><p>对于大多数人来说，处理括号都是非常头痛的一件事情，特别是在较多嵌套的时候，更是让人焦头烂额，这款插件可以最大程度的缓解你的头痛症状，它会让成对的括号显示同一个颜色，让你快速的找到开始和结束。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830213219.png" alt="example"></p><h3 id="ESLint-TSLint"><a href="#ESLint-TSLint" class="headerlink" title="ESLint | TSLint"></a>ESLint | TSLint</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830174448.png" alt="image-20200830174058091"></p><p>这个扩展的主要功能就是格式化你的代码，以便在整个团队中保持一致的格式，如果你的代码不符合规范，那你将会收到大量的错误提示。长期使用这个插件，有利于帮助你养成良好的代码风格！</p><h3 id="代码拼写检查器"><a href="#代码拼写检查器" class="headerlink" title="代码拼写检查器"></a>代码拼写检查器</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830174454.png" alt="image-20200830173400052"></p><p>作为一个英语渣，这个代码拼写检查器可以保持免受打字错误而带来的 bug，data/date 分不清？每个人都不是完美的，我们可能有时候无意识的拼写错误，这款插件可以快速提示你！</p><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830213447.gif" alt="suggestions"></p><h3 id="同步-VSCode-设置"><a href="#同步-VSCode-设置" class="headerlink" title="同步 VSCode 设置"></a>同步 VSCode 设置</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180546.png" alt="image-20200830180546035"></p><p>可以在多台机器上同步你的 VSCode 的设置，随时随地，都可以把你最习惯的设置同步到另一台电脑上！</p><h3 id="REST-Client"><a href="#REST-Client" class="headerlink" title="REST Client"></a>REST Client</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180607.png" alt="image-20200830180606569"></p><p>REST Client 是一个 VS Code 的 REST 客户端扩展，它允许您直接发送 HTTP 请求并在 Visual Studio Code 中查看响应，你可以使用这个选项，而不必在浏览器或 Postman 那里来回地切换请求</p><h3 id="Prettier-代码格式化工具"><a href="#Prettier-代码格式化工具" class="headerlink" title="Prettier 代码格式化工具"></a>Prettier 代码格式化工具</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180648.png" alt="image-20200830180647826"></p><p>前面的 ESLint，它可以帮助您自动格式化一致的代码，并显示一些警告和错误。</p><p>作为一个 React / Native 开发人员，保持我的代码干净和适当对齐是必须的ーー这是不可协商的。为了更好地阅读代码，将其适当缩进和分隔是一个优先考虑的问题，尤其是在处理长时间编写的代码时ーー样式、函数和处理程序的分隔非常关键，不仅对你而言如此，对你的同事而言也是如此。</p><p>只需要点击右键，格式化文档，即可快速格式化你的代码！</p><h3 id="Beautify-代码格式化工具"><a href="#Beautify-代码格式化工具" class="headerlink" title="Beautify 代码格式化工具"></a>Beautify 代码格式化工具</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830174507.png" alt="image-20200830173029420"></p><p>Beautify 是另一个很好的代码格式化扩展，几乎和上面提到的 Prettier 一样。它可以对用 Javascript、 JSON、 Sass、 CSS 和 HTML 编写的代码进行格式化。</p><h3 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a>Material Icon Theme</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175734.png" alt="image-20200830175733841"></p><p>这个扩展为你的文件列表提供了漂亮可爱的图标。让你的编辑器更加个性化！</p><h3 id="路径自动补全"><a href="#路径自动补全" class="headerlink" title="路径自动补全"></a>路径自动补全</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175938.png" alt="image-20200830175937963"></p><p>在你使用路径的时候，会自动补全，在一个拥有大量组件，扩展，包的时候，将会节省你大量的时间，让你快速选择到你的文件路径。</p><h3 id="MInify"><a href="#MInify" class="headerlink" title="MInify"></a>MInify</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175755.png" alt="image-20200830175754828"></p><p>这是一款用于压缩合并 JavaScript 和 CSS 文件的应用程序。它提供了大量自定义的设置，以及自动压缩保存并导出为.min 文件的选项。它能够分别通过 uglify-js、clean-css 和 html-minifier，与 JavaScript、CSS 和 HTML 协同工作。</p><p>使用<strong>F1</strong> 运行文件缩小器<code>Minify</code></p><h3 id="Mithril-Emmet"><a href="#Mithril-Emmet" class="headerlink" title="Mithril Emmet"></a>Mithril Emmet</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175822.png" alt="image-20200830175821670"></p><p>Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的一个工具. 在前端开发的过程中，一大部分的工作是写 HTML、CSS 代码。特别是手动编写 HTML 代码的时候，效率会特别低下，因为需要敲打很多尖括号，而且很多标签都需要闭合标签等。于是，就有了 Emmet，它可以极大的提高代码编写的效率，它提供了一种非常简练的语法规则，然后立刻生成对应的 HTML 结构或者 CSS 代码，同时还有多种实用的功能帮助进行前端开发。<br>VsCode 内置了 Emmet 语法,在后缀为.html/.css 中输入缩写后按 Tab 键即会自动生成相应代码。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830213722.gif" alt="screenshot"></p><h3 id="泼辣截图"><a href="#泼辣截图" class="headerlink" title="泼辣截图"></a>泼辣截图</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175958.png" alt="image-20200830175956601"></p><p>vs code 的一款代码截图美化插件，能够轻松创造出漂亮的代码截图。F1 输入 pola 即可使用！</p><h3 id="快速-log-Turbo-Console-log"><a href="#快速-log-Turbo-Console-log" class="headerlink" title="快速 log - Turbo Console log"></a>快速 log - Turbo Console log</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180341.png" alt="image-20200830180336509"></p><p>是否每次调试程序的时候，手动写 console.log 让你感觉厌倦？来来来，这里有一款 vscode 插件适合你，他就是：Turbo Console Log。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">`ctrl + alt + l` 选中变量之后，使用这个快捷键生成 console.log</span><br><span class="line">`alt + shift + c` 注释所有 console.log</span><br><span class="line">`alt + shift + u` 启用所有 console.log</span><br><span class="line">`alt + shift + d` 删除所有 console.log</span><br></pre></td></tr></table></figure><h3 id="TRailing-Spaces-高亮多余的空格"><a href="#TRailing-Spaces-高亮多余的空格" class="headerlink" title="TRailing Spaces 高亮多余的空格"></a>TRailing Spaces 高亮多余的空格</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180405.png" alt="image-20200830180404680"></p><p>高亮显示多余的空格</p><h3 id="TODO-Highlight-TODO-高亮"><a href="#TODO-Highlight-TODO-高亮" class="headerlink" title="TODO Highlight TODO 高亮"></a>TODO Highlight TODO 高亮</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180429.png" alt="image-20200830180428796"></p><p>写代码过程中，突然发现一个 Bug，但是又不想停下来手中的活，以免打断思路，怎么办？按代码编写会规范，都是建议在代码中加个 TODO 注释。比如这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>这里有个bug，但是空间太小了，我的算法写不下。</span></span><br><span class="line"><span class="comment">// FIX：</span></span><br><span class="line"><span class="comment">// TAG：</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">FIXME:</span>哪个混蛋写的垃圾代码，会崩溃的。</span></span><br></pre></td></tr></table></figure><p>这些 TODO 标签散布在项目的每一个角落，用着不清不楚的词汇描绘着 Bug，功能缺失，性能问题等等。时间久了，很难找到具体在哪一个文件的哪一行。现代的 IDE 都有办法来收集这些 TODO 信息，让它们集中显示出来，以便检查待处理的问题所在。VS Code 也不例外，如果在应用扩展商店里搜索下 TODO，可以找出不少类似功能的插件。这个插件会分析代码中的 TODO 标签，并加亮之后，可以集中显示。这样很符合开发过程中，随手记录偶尔迸发的思维火花的情况。</p><h3 id="TabNine-代码补全"><a href="#TabNine-代码补全" class="headerlink" title="TabNine 代码补全"></a>TabNine 代码补全</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180448.png" alt="image-20200830180447646"></p><p>TabNine 是一种基于 OpenAI 的语言模型（GPT-2）来实现的智能代码补全技术。它支持 23 种编程语言、5 种编辑器，使用简单，效果惊艳。不少使用过的网友说：TabNine 是他们用过的最好的代码补全工具，这是属于程序员的杀手级应用。</p><h3 id="sytlelint-样式代码检测"><a href="#sytlelint-样式代码检测" class="headerlink" title="sytlelint 样式代码检测"></a>sytlelint 样式代码检测</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180513.png" alt="image-20200830180511998"></p><p>CSS / SCSS / Less 语法检查</p><h3 id="npm-检测你的-Package-json"><a href="#npm-检测你的-Package-json" class="headerlink" title="npm 检测你的 Package.json"></a>npm 检测你的 Package.json</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175844.png" alt="image-20200830175843774"></p><p>每个现代开发人员都已经知道 NPM 是什么以及为什么它很重要。Node Package Manager 是一个扩展，可以帮助您管理 Package.json 文件。如果有依赖项需要但尚未安装，它会给出警告，还有 NPM 包的版本控制。</p><h3 id="CSScomb"><a href="#CSScomb" class="headerlink" title="CSScomb"></a>CSScomb</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830213846.png" alt="image-20200830213845485"></p><p>看名字应该可以联想到它的功能了吧？没错，正如其名，一把梳理 CSS 属性顺序的 “梳子”。CSS 属性书写顺序非常重要，一个合格的前端 er 一定会有他遵循的 CSS 书写顺序规则。至于 CSS 属性书写顺序，这里我推荐腾讯 AollyTeam 团队的规范：<a href="http://alloyteam.github.io/CodeGuide/#css-declaration-order">http://alloyteam.github.io/CodeGuide/#css-declaration-order</a></p><p>在项目的根目录下创建一个名为：<code>.csscomb.json</code> / <code>csscomb.json</code> / <code>.csscomb.js</code> / <code>csscomb.js</code> 的文件，然后添加一些配置项。也可以将配置项写入项目的 <code>package.json</code> 文件中的 <code>csscombConfig</code> 字段。</p><p>至于添加的配置项，CSScomb 提供了示例配置文件：<a href="https://github.com/csscomb/csscomb.js/blob/master/config/csscomb.json">https://github.com/csscomb/csscomb.js/blob/master/config/csscomb.json</a></p><p>这个配置文件里面各个字段的作用可以戳这里查看：<a href="https://github.com/csscomb/csscomb.js/blob/master/doc/options.md">https://github.com/csscomb/csscomb.js/blob/master/doc/options.md</a></p><h3 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open in browser"></a>open in browser</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175916.png" alt="image-20200830175915759"></p><p>安装完这个插件就可以在编辑器菜单右键 html，在默认浏览器打开了</p><h3 id="CSS-Peek"><a href="#CSS-Peek" class="headerlink" title="CSS Peek"></a>CSS Peek</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830174518.png" alt="image-20200830173630990"></p><p>使用此插件，你可以追踪至样式表中 CSS 类和 ids 定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</p><h3 id="CSS-auto-prefix"><a href="#CSS-auto-prefix" class="headerlink" title="CSS-auto-prefix"></a>CSS-auto-prefix</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830174526.png" alt="image-20200830173747185"></p><p>自动添加 CSS 私有前缀。</p><h3 id="编辑器内置浏览器"><a href="#编辑器内置浏览器" class="headerlink" title="编辑器内置浏览器"></a>编辑器内置浏览器</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830174542.png" alt="image-20200830173107773"></p><p>下载这个浏览器预览插件，这样你就可以在你的 VSCode 中完成所有的工作，而不是打开另一个窗口让你的 Chrome 浏览器看到你在代码中所做的改变。这会显示你的代码的浏览器预览，所以不必再切换到你的浏览器去查看哪怕是很小的变化。它帮助你节省时间和空间。</p><h3 id="Chrome-调试器"><a href="#Chrome-调试器" class="headerlink" title="Chrome 调试器"></a>Chrome 调试器</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175043.png" alt="image-20200830173808146"></p><p>作为一个前端 web 和移动开发者，Debugger for Chrome 帮助了我很多。特别是对于 JavaScript 开发人员来说，这样可以节省大量的时间来做一些小的改变。它对调试非常有帮助ーー它可以帮助你很快地解决和捕捉错误。</p><p>从发现错误所在的行和函数开始，直到看到其数据处理，该控制台都很强大。</p><h3 id="change-case-改变你的命名格式"><a href="#change-case-改变你的命名格式" class="headerlink" title="change-case 改变你的命名格式"></a>change-case 改变你的命名格式</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175051.png" alt="image-20200830173219927"></p><p>使用方法：F1 》Change case ， 然后就会有提示了！</p><h3 id="Javascript-ES6-代码片段"><a href="#Javascript-ES6-代码片段" class="headerlink" title="Javascript (ES6)代码片段"></a>Javascript (ES6)代码片段</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175437.png" alt="image-20200830175436555"></p><p>这个方便的代码片段是一个轻量级的库扩展，它可以绑定任何标准的 JavaScript 调用，因此只需键入快捷代码，就可以看到自动打印到编辑器的整个通用代码。这个扩展不仅支持 Javascript ES6，还支持 Typescript、 Reactjs、 Vue 和 HTML。</p><h3 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175706.png" alt="image-20200830175705384"></p><p>你安装它之后，他会出现在你编辑器右下角。</p><p>在使用 Live Server 时，这个 VSCode 扩展将帮助您打开当前项目的活动 Web 服务器。通常，当使用像 Webpack 这样的构建器时，它通常会完成这项工作，但是这个扩展已经证明自己更加有用。您只需右键单击并运行打开与活动服务器，它会做其它的。</p><h3 id="Quokka"><a href="#Quokka" class="headerlink" title="Quokka"></a>Quokka</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830180622.png" alt="image-20200830180621882"></p><p>对于 JavaScript 开发者来说，Quokka 被称为现代的暂存器。它的构建是为了帮助每个开发人员进行代码检查。这是一个完美的解决方案。</p><p>与其他 VSCode 扩展相比，它非常轻量级、高效和强大。它将提高你的工作流程，它是实时的，并将立即给你反馈。</p><p>它所做的是为每个结果使用固定的颜色类型，这样开发人员就可以轻松地理解流的执行。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830214054.gif" alt="main-video"></p><h3 id="Codeif-变量命名神器"><a href="#Codeif-变量命名神器" class="headerlink" title="Codeif 变量命名神器"></a>Codeif 变量命名神器</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175057.png" alt="image-20200830173446320"></p><p><code>CodeIf</code> 是一个用来给变量命名的网站，你只要输入你想起的中文名，它就会给你提供很多建议的命名：</p><h3 id="Color-Picker-颜色选择器"><a href="#Color-Picker-颜色选择器" class="headerlink" title="Color Picker 颜色选择器"></a>Color Picker 颜色选择器</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175101.png" alt="image-20200830173553670"></p><p>颜色选择器扩展可以帮助您轻松地在 CSS 文件中选择颜色。它将立即反映或应用于您当前正在处理的属性。如果你喜欢使用 RGBA 颜色，它也是可用的。</p><h3 id="快速选择-emoji-表情"><a href="#快速选择-emoji-表情" class="headerlink" title="快速选择 emoji 表情"></a>快速选择 emoji 表情</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830171012.png" alt="image-20200830170741963"></p><p>在你的 VSCode 中快速添加 emoji 表情，使用方法：</p><ul><li>Mac: <code>cmd + i</code></li><li>Linux: <code>ctrl + alt + i</code></li><li>Windows: <code>ctrl + i</code></li></ul><h3 id="Dracula-Official"><a href="#Dracula-Official" class="headerlink" title="Dracula Official"></a>Dracula Official</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175107.png" alt="image-20200830173846652"></p><p>一款好看的 VSCode 主题！</p><h3 id="ES7-React-Redux-React-Native-JS-snippets"><a href="#ES7-React-Redux-React-Native-JS-snippets" class="headerlink" title="ES7 React/Redux/React-Native/JS snippets"></a>ES7 React/Redux/React-Native/JS snippets</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175112.png" alt="image-20200830173956004"></p><p>这是为那些正在使用诸如 React 这样的 JavaScript 框架的高级开发人员准备的，同时还有其他与其产品和复杂应用程序兼容的技术。</p><p>一遍又一遍地输入标准代码是低效的。有了这个代码片段的帮助，你可以通过输入快捷代码轻松创建基于类的组件、函数组件、导入、生命周期方法等等，这是我使用 Reactjs 和 React Native 以来最常用的扩展之一。</p><h3 id="filesize"><a href="#filesize" class="headerlink" title="filesize"></a>filesize</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175114.png" alt="image-20200830174123382"></p><p>在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间</p><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830200115.png" alt="image-20200830200105066"></p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175117.png" alt="image-20200830174142962"></p><p>如果你的团队正在使用 Github，或者你正在使用 Github 作为你的项目存储库，或者你想使用其他开发者的源代码存储库，那么这个扩展就是为你准备的。</p><p>顺便说一下，Github 现在由微软拥有并管理，为那些不知道的人服务，所以 Github 和 VSCode 现在是微软产品的一部分。</p><p>通过使用 Github Extension，您现在可以轻松地连接其他开发人员的存储库、您喜欢的开发人员的存储库，甚至您自己的存储库。如果你经常使用 Github 的话，你可以很容易的做到这一点。</p><h3 id="Gitlens-GIt-supercharged"><a href="#Gitlens-GIt-supercharged" class="headerlink" title="Gitlens - GIt supercharged"></a>Gitlens - GIt supercharged</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175120.png" alt="image-20200830174211542"></p><p>Gitlens 是另一个伟大的扩展。它增加了当前的 VSCode Git 功能，能够从以前的提交和更改中并行执行代码比较，还有其他很酷的功能。</p><p><strong>详细的 Git 提交日志</strong>。<br>Git 重度使用者必备，尤其是多人协作时：哪一行代码，何时、何人提交都有记录。</p><p><strong>妈妈再也不用担心我背锅了！</strong></p><h3 id="Highlight-Matching-Tag-标签成对高亮"><a href="#Highlight-Matching-Tag-标签成对高亮" class="headerlink" title="Highlight Matching Tag 标签成对高亮"></a>Highlight Matching Tag 标签成对高亮</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175123.png" alt="image-20200830174220950"></p><p>让成对的标签标签高亮！</p><h3 id="HTML-Boilerplate"><a href="#HTML-Boilerplate" class="headerlink" title="HTML Boilerplate"></a>HTML Boilerplate</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175126.png" alt="image-20200830174320258"></p><p>通过使用 HTML 模版插件，你就摆脱了为 HTML 新文件重新编写头部和正文标签的苦恼。你只需在空文件中输入 html，并按 Tab 键，即可生成干净的文档结构。</p><h3 id="indent-raibow"><a href="#indent-raibow" class="headerlink" title="indent raibow"></a>indent raibow</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175129.png" alt="image-20200830174352775"></p><p>彩虹缩进，让你的缩进更加直观好看！</p><h3 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175133.png" alt="image-20200830174421539"></p><p>VUE 推荐插件！包含语法高亮，代码提示，代码格式化等！</p><h3 id="Markdown-Preview-Enhanced-格式化工具"><a href="#Markdown-Preview-Enhanced-格式化工具" class="headerlink" title="Markdown Preview Enhanced 格式化工具"></a>Markdown Preview Enhanced 格式化工具</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175314.png" alt="image-20200830175313755"></p><p>格式化你的 markdown 文档</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200830214310.png" alt="28495106-30b3b15e-6f09-11e7-8eb6-ca4ca001ab15"></p><h3 id="头部注释生成"><a href="#头部注释生成" class="headerlink" title="头部注释生成"></a>头部注释生成</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175456.png" alt="image-20200830175454928"></p><p><strong>文件头部添加注释</strong>:</p><ul><li>在文件开头添加注释，记录文件信息/文件的传参/出参等</li><li>支持用户高度自定义注释选项, 适配各种需求和注释。</li><li>保存文件的时候，自动更新最后的编辑时间和编辑人</li><li>快捷键：<code>window</code>：<code>ctrl+alt+i</code>,<code>mac</code>：<code>ctrl+cmd+i</code>, <code>linux</code>: <code>ctrl+meta+i</code></li></ul><h3 id="language-Stylus"><a href="#language-Stylus" class="headerlink" title="language-Stylus"></a>language-Stylus</h3><p><img src="https://gitee.com/constown/picgo/raw/master/img/20200830175650.png" alt="image-20200830175648797"></p><p>添加 stylus 语言的支持！</p><h3 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h3><p>Git History 可以帮你迅速查看 Git 历史记录，图形化的界面，使 Git 历史一目了然！</p><h3 id="Git-Graph"><a href="#Git-Graph" class="headerlink" title="Git Graph"></a>Git Graph</h3><p>更好的帮助你分析分支之间的关系！</p><h3 id="Git-emoji"><a href="#Git-emoji" class="headerlink" title="Git emoji"></a>Git emoji</h3><p>让你的提交更加可爱！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决jsdelivr缓存问题的几个办法</title>
      <link href="/archives/cbcd1946.html"/>
      <url>/archives/cbcd1946.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hexo 博客目前最常用的加速方案应该就是使用 <code>jsdelivr</code> + <code>github</code> 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。</p><p>关于如何使用 <code>jsdelivr</code> 来加速 <code>hexo</code> 博客我已经不想再赘述了。</p><p>如果你对此不太了解，你可以参考：<a href="https://www.antmoe.com/posts/e33d1c55/index.html">优雅使用 jsdeliver 加速文件</a></p><h2 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h2><p>因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@latest/dist/jquery.min.js</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</span><br></pre></td></tr></table></figure><p>我在尝试使用 <code>jsdelivr</code> 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：</p><ul><li>第一次上传可以正常引入文件</li><li>随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）</li><li>此后，通过 <code>jsdelivr</code> 加速的文件，一直没有刷新成为我的最新版本。</li><li>这让我的博客无法立即更新线上环境的样式。</li></ul><p>在使用这种方法的时候，我们使用的 <code>latest</code> 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="本地引入"><a href="#本地引入" class="headerlink" title="本地引入"></a>本地引入</h3><div class="note danger flat"><p>以下教程只针对 <code>butterfly</code> 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。</p></div><p>在 <code>source</code> 文件夹下新建 <code>style</code> 文件夹用于存放我们的样式(不推荐使用 <code>CSS</code> 作为文件名 )，然后在配置文件中使用本地引入的方式即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/style/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>当然这种方法与我们的初衷似乎有些违背。</p><h3 id="启用又拍云或者其他云储存服务"><a href="#启用又拍云或者其他云储存服务" class="headerlink" title="启用又拍云或者其他云储存服务"></a>启用又拍云或者其他云储存服务</h3><p>我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。</p><p>关于如何使用 云储存 服务，这里暂时先不赘述。</p><h3 id="jsdelivr-缓存"><a href="#jsdelivr-缓存" class="headerlink" title="jsdelivr 缓存"></a>jsdelivr 缓存</h3><p><code>jsdelive</code> 的缓存机制，我目前仍然不清楚，<code>jsdelivr</code> 官网是这么叙述的：</p><blockquote><p>We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.</p><p>大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。</p></blockquote><blockquote><p>If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We’ll continue to serve the file from older release instead of failing with a 404 error.</p><p>大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。</p></blockquote><p>我想这大概率就是在 <code>push</code> 了代码后，但是 <code>jsdelivr</code> 加速的文件没有更新的原因。</p><p>当然 <strong>第一种解决办法</strong> 就是，你每改动一次代码，就 <code>releases</code> 一次，用更换版本号的形式来解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</span><br></pre></td></tr></table></figure><p>但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。</p><p>我想，既然 <code>jsdelivr</code> 提供了一个 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的引入方式，那应该就是支持 <code>实时刷新</code> 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。</p><p>如何清理 <code>jsdelivr</code> 缓存？</p><p>把链接地址中的 <code>cdn</code> 换成 <code>purge</code> 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://purge.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</span><br></pre></td></tr></table></figure><p>但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：</p><blockquote><p>jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。</p><p>为避免滥用，在发出电子邮件请求后（现在为<a href="mailto:dak@prospectone.io">-dak@prospectone.io</a>）可以访问清除功能。</p></blockquote><h2 id="jsDelivr-API"><a href="#jsDelivr-API" class="headerlink" title="jsDelivr API"></a>jsDelivr API</h2><p>查看 CDN 上的 tags 和 versisons 列表。</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/package/npm/:name</span><br><span class="line"> - name: npm package name</span><br><span class="line"></span><br><span class="line">/package/gh/:user/:repo</span><br><span class="line"> - user: GitHub username</span><br><span class="line"> - repo: GitHub repository name</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://data.jsdelivr.com/v1/package/npm/jquery</span><br><span class="line"></span><br><span class="line">//=&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;tags&quot;: &#123;</span><br><span class="line">        &quot;beta&quot;: &quot;3.2.1&quot;,</span><br><span class="line">        &quot;latest&quot;: &quot;3.2.1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;versions&quot;: [</span><br><span class="line">        &quot;3.2.1&quot;,</span><br><span class="line">        &quot;3.2.0&quot;,</span><br><span class="line">        &quot;3.1.1&quot;,</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的接口请直接访问：<a href="https://github.com/jsdelivr/data.jsdelivr.com">jsDelivr API</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上，就是目前我能想到的应对 <code>jsdelivr</code> 缓存问题的所有方法了，总结如下：</p><ul><li>直接使用本地引入（简单粗暴）</li><li>使用其他 云储存服务 来加速（可能会收费）</li><li>使用版本号的方式来引入（直接好用）</li><li><code>purge</code> 刷新缓存（似乎也不太稳定）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> CDN </tag>
            
            <tag> jsdelivr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一分钟搭建一个简单express服务器</title>
      <link href="/archives/b3aa6458.html"/>
      <url>/archives/b3aa6458.html</url>
      
        <content type="html"><![CDATA[<p>在做前端开发的时候，有时候需要简单模拟后台接口，处理数据，这时候我们就可以自己搭建一个简单的 express 服务器，只需要一分钟就可以迅速完成。</p><p>这里记录一下代码，留作备忘。</p><ul><li>新建文件夹 <code>serve</code></li><li>新建文件 <code>index.js</code></li><li>编辑代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">//设置允许跨域的域名，*代表允许任意域名跨域</span></span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  <span class="comment">//允许的header类型</span></span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;content-type&#x27;</span>)</span><br><span class="line">  <span class="comment">//跨域允许的请求方式</span></span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;DELETE,PUT,POST,GET,OPTIONS&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;options&#x27;</span>) res.<span class="title function_">send</span>(<span class="number">200</span>)</span><br><span class="line">  <span class="comment">//让options尝试请求快速结束</span></span><br><span class="line">  <span class="keyword">else</span> <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;THIS IS INDEX&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;THIS IS ABOUT&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>安装 express <code>npm install express --save </code></p></li><li><p>启动项目 <code>node index.js</code></p></li></ul><p>好了 ，我们搭建的一个 express 服务器就完成了，我们可以做一些简单的接口数据测试！</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给你的博客添加一个收藏页</title>
      <link href="/archives/353666f0.html"/>
      <url>/archives/353666f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时我也会用到很多网站，但是零零散散的很不方便，每次都要到处找，虽然也有很多导航类的网站，比如小康导航，但是感觉部署麻烦，而且通常需要跳转到博客的站外，就想着直接在博客内置一个收藏页呗，用来收藏一些平时经常用到的网站。</p><p>你可以直接点击 <a class="btn-beautify button--animated blue" href="/stars/"   title="我的收藏"><i class="far fa-hand-point-right"></i><span>我的收藏</span></a> 前往我的收藏页查看效果。</p><h2 id="新建收藏页"><a href="#新建收藏页" class="headerlink" title="新建收藏页"></a>新建收藏页</h2><p>1.前往你的 Hexo 博客的根目录</p><p>2.输入<code>hexo new page stars</code></p><p>3.你会找到 <code>source/stars/index.md</code> 这个文件</p><p>4.修改这个文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的收藏</span><br><span class="line"><span class="section">date: 2020-07-05 00:00:00</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>然后你需要在 <code>_data/butterfly.yml</code> 或者对应的主题配置文件中 修改 <code>menu</code> 或对应 <code>菜单/页面/导航</code> 的相关设置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">收藏网址:</span> <span class="string">/stars/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-star</span></span><br></pre></td></tr></table></figure><h2 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h2><p>你可以单独写一份 CSS 样式，然后在页面中使用<code>link</code> 标签引入，也可以和我一样直接把样式写在这个 <code>index.md</code> 文件中。以下是我所使用的样式参考：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.links-content</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>:<span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.link-navigation</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">clear</span>:both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>:.<span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>:<span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">12</span>);</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.card</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.card</span><span class="selector-pseudo">:active</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#fdcbf1</span> <span class="number">0%</span>, <span class="number">#fdcbf1</span> <span class="number">1%</span>, <span class="number">#e6dee9</span> <span class="number">100%</span>);</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">  -webkit-<span class="attribute">transition-property</span>: transform;</span><br><span class="line">  <span class="attribute">transition-property</span>: transform;</span><br><span class="line">  -webkit-<span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: all <span class="number">0.15s</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-class">.card-header</span> <span class="selector-tag">a</span>,<span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-class">.card-content</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span>(max-width:567px) &#123;</span><br><span class="line">  <span class="selector-class">.card</span>&#123;</span><br><span class="line">      <span class="attribute">margin-left</span>:<span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">width</span>:<span class="built_in">calc</span>((<span class="number">100%</span> - <span class="number">16px</span>)/<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="attribute">margin-left</span>:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.card</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="attribute">margin-left</span>:<span class="number">16px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span>(min-width:567px) &#123;</span><br><span class="line">  <span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="built_in">calc</span>((<span class="number">100%</span> - <span class="number">32px</span>)/<span class="number">3</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.card</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">16px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span>(min-width:768px) &#123;</span><br><span class="line">  <span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="built_in">calc</span>((<span class="number">100%</span> - <span class="number">48px</span>)/<span class="number">4</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n+<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.card</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n+<span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">16px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.card-header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">padding</span>:.<span class="number">25rem</span> .<span class="number">25rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:<span class="number">500</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#222222</span>;</span><br><span class="line">  <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>:normal;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#222222</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:<span class="number">700</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#222222</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.card-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> .<span class="number">25rem</span> .<span class="number">25rem</span> .<span class="number">25rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:<span class="number">500</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: smaller;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#222222</span>;</span><br><span class="line">  <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.card-content</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.card-content</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>:normal;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#222222</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:<span class="number">500</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h2><p>当然我们不需要自己手动去一个一个的写每一个 <code>Card</code> 那样太麻烦了，我们选用 JSON 文件，使用 JS 进行渲染。首先我们需要添加一下页面的正文部分，你可以像我这样写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 我的常用</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation mine&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 官方文档</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation docs&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 代码托管</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation code&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 技能训练</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation skill&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 学习平台</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation school&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 开发者社区</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation community&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 云服务</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation serve&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 站长工具</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation sitetool&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 设计素材</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation design&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 实用工具</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation tools&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="处理-JSON-文件"><a href="#处理-JSON-文件" class="headerlink" title="处理 JSON 文件"></a>处理 JSON 文件</h2><p>JSON 文件可以是 JSON 数组和 JSON 对象的形式，这里我提供了两份代码，你们可以自由选择。记得把 JSON 文件和 JS 文件都放在 <code>stars</code> 文件夹中，当然我个人还是推荐第二种。</p><h3 id="多个-JSON-数组文件"><a href="#多个-JSON-数组文件" class="headerlink" title="多个 JSON 数组文件"></a>多个 JSON 数组文件</h3><ul><li>可以引入单个文件，分类多个文件，方便查找添加数据</li><li>文件多，可能影响网页加载速度</li></ul><h4 id="JSON-文件示例"><a href="#JSON-文件示例" class="headerlink" title="JSON 文件示例"></a>JSON 文件示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Github&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;全球最大的面向开源及私有软件项目的托管平台&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gitlab&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitlab.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;支持无限的公有项目和私有项目的代码托管平台&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Coding&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://coding.net/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国内首个一站式云端软件服务平台&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gitee&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国内最大的开源社区 OSChina 的代码托管平台&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="JS-代码"><a href="#JS-代码" class="headerlink" title="JS 代码"></a>JS 代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个JSON数组文件多次调用</span></span><br><span class="line">star = &#123;</span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params">url, className</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">    $.<span class="title function_">getJSON</span>(url, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      that.<span class="title function_">render</span>(data, className)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span> (<span class="params">data, name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nickname,</span><br><span class="line">      site,</span><br><span class="line">      li = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      nickname = data[i].<span class="property">nickname</span></span><br><span class="line">      site = data[i].<span class="property">site</span></span><br><span class="line">      content = data[i].<span class="property">content</span></span><br><span class="line">      li +=</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;card&quot; onclick=&quot;window.open(\&#x27;&#x27;</span> +</span><br><span class="line">        site +</span><br><span class="line">        <span class="string">&#x27;\&#x27;)&quot; &gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;card-header&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div&gt;&#x27;</span> +</span><br><span class="line">        nickname +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;card-content&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div&gt;&#x27;</span> +</span><br><span class="line">        content +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    $(name).<span class="title function_">append</span>(li)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传入文件和对应的className</span></span><br><span class="line">link.<span class="title function_">init</span>(<span class="string">&#x27;./mine.json&#x27;</span>, <span class="string">&#x27;.mine&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="单个-JSON-多对象文件"><a href="#单个-JSON-多对象文件" class="headerlink" title="单个 JSON 多对象文件"></a>单个 JSON 多对象文件</h2><ul><li>所有的网址都合并在一个 JSON 文件中</li><li>当收藏的网址多了之后，不太好查找</li></ul><h4 id="JSON-文件示例-1"><a href="#JSON-文件示例-1" class="headerlink" title="JSON 文件示例"></a>JSON 文件示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;.mine&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LeanCloud控制台&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://leancloud.cn/dashboard/applist.html#/apps&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;应用管理，数据控制&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;百度统计&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://tongji.baidu.com/web/10000188477/overview&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查看网站的百度统计信息&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NexT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://theme-next.org/docs/&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NexT主题官方文档&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;.docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JavaScript&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JavaScript API 文档&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HTML&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HTML API 文档&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CSS&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Reference&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CSS API 文档&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>值得注意的是：对象的 <code>key</code> 必须填写 <code>className</code> , 比如上面的 <code>.code</code></p></div><h4 id="JS-代码-1"><a href="#JS-代码-1" class="headerlink" title="JS 代码"></a>JS 代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 采用一个多对象JSON文件存储所有数据的方式</span></span><br><span class="line">stars = &#123;</span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">    $.<span class="title function_">getJSON</span>(url, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> className <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="keyword">var</span> classData = data[className]</span><br><span class="line">        that.<span class="title function_">render</span>(classData, className)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span> (<span class="params">data, name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nickname,</span><br><span class="line">      site,</span><br><span class="line">      li = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      nickname = data[i].<span class="property">nickname</span></span><br><span class="line">      site = data[i].<span class="property">site</span></span><br><span class="line">      content = data[i].<span class="property">content</span></span><br><span class="line">      li +=</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;card&quot; onclick=&quot;window.open(\&#x27;&#x27;</span> +</span><br><span class="line">        site +</span><br><span class="line">        <span class="string">&#x27;\&#x27;)&quot; &gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;card-header&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div&gt;&#x27;</span> +</span><br><span class="line">        nickname +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;card-content&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div&gt;&#x27;</span> +</span><br><span class="line">        content +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    $(name).<span class="title function_">append</span>(li)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传入json文件的路径</span></span><br><span class="line">stars.<span class="title function_">init</span>(<span class="string">&#x27;./allStars.json&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="引入-JS-文件"><a href="#引入-JS-文件" class="headerlink" title="引入 JS 文件"></a>引入 JS 文件</h2><p>当然最后要记得在 <code>index.md</code> 中引入我们的 JS 文件，建议放在文首引入。</p><p>为了方便我直接使用了 <code>JQuery</code> ，所以我们还要引入一个<code>JQuery</code> 。</p><p>以下是我收藏页的完整代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的收藏</span><br><span class="line">comments: false</span><br><span class="line"><span class="section">type: stars</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./stars.js&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line">.links-content &#123;</span><br><span class="line">  margin-top:1rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.link-navigation::after &#123;</span><br><span class="line">  content:&quot; &quot;;</span><br><span class="line">  display:block;</span><br><span class="line">  clear:both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &#123;</span><br><span class="line">  position:relative;</span><br><span class="line">  width:25%;</span><br><span class="line">  padding:0;</span><br><span class="line">  border-radius:10px;</span><br><span class="line">  transition-duration:.3s;</span><br><span class="line">  margin-bottom:1rem;</span><br><span class="line">  margin-left:16px;</span><br><span class="line">  display:block;</span><br><span class="line">  float:left;</span><br><span class="line">  box-shadow:0 2px 6px 0 rgba(0,0,0,.12);</span><br><span class="line">  background: transparent;</span><br><span class="line">  overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card:hover:before, .card:focus:before, .card:active:before &#123;</span><br><span class="line">  -webkit-transform: scale(1);</span><br><span class="line">  transform: scale(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card:before &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  z-index: -1;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background-image: linear-gradient(to right, #fdcbf1 0%, #fdcbf1 1%, #e6dee9 100%);</span><br><span class="line">  -webkit-transform: scale(0);</span><br><span class="line">  transform: scale(0);</span><br><span class="line">  -webkit-transition-property: transform;</span><br><span class="line">  transition-property: transform;</span><br><span class="line">  -webkit-transition-duration: 0.15s;</span><br><span class="line">  transition-duration: all 0.15s;</span><br><span class="line">  -webkit-transition-timing-function: ease-out;</span><br><span class="line">  transition-timing-function: ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card:hover,.card:hover &gt; .card-header a,.card:hover &gt; .card-content a&#123;</span><br><span class="line"><span class="code">    transform:scale(1);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">@media(max-width:567px) &#123;</span><br><span class="line">  .card&#123;</span><br><span class="line"><span class="code">      margin-left:16px;</span></span><br><span class="line"><span class="code">      width:calc((100% - 16px)/2)</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  .card:nth-child(2n+1) &#123;</span></span><br><span class="line"><span class="code">      margin-left:0</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  .card:not(:nth-child(2n+1)) &#123;</span></span><br><span class="line"><span class="code">      margin-left:16px</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">@media(min-width:567px) &#123;</span><br><span class="line">  .card &#123;</span><br><span class="line"><span class="code">    margin-left:16px;</span></span><br><span class="line"><span class="code">    width:calc((100% - 32px)/3)</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  .card:nth-child(3n+1) &#123;</span></span><br><span class="line"><span class="code">    margin-left:0</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  .card:not(:nth-child(3n+1)) &#123;</span></span><br><span class="line"><span class="code">    margin-left:16px</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">@media(min-width:768px) &#123;</span><br><span class="line">  .card &#123;</span><br><span class="line"><span class="code">    margin-left:16px;</span></span><br><span class="line"><span class="code">    width:calc((100% - 48px)/4)</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  .card:nth-child(4n+1) &#123;</span></span><br><span class="line"><span class="code">    margin-left:0</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  .card:not(:nth-child(4n+1)) &#123;</span></span><br><span class="line"><span class="code">    margin-left:16px</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">.posts-expand .post-body img &#123;</span><br><span class="line">  margin:0;</span><br><span class="line">  padding:0;</span><br><span class="line">  border:0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card .card-header &#123;</span><br><span class="line">  display:block;</span><br><span class="line">  text-align:center;</span><br><span class="line">  padding:.25rem .25rem;</span><br><span class="line">  font-weight:500;</span><br><span class="line">  color:#222222;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">.card .card-header a &#123;</span><br><span class="line">  font-style:normal;</span><br><span class="line">  color:#222222;</span><br><span class="line">  font-weight:700;</span><br><span class="line">  text-decoration:none;</span><br><span class="line">  border:0;</span><br><span class="line">  overflow:hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card .card-header a:hover &#123;</span><br><span class="line">  color:#222222;</span><br><span class="line">  text-decoration:none;</span><br><span class="line">  border:0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card .card-content &#123;</span><br><span class="line">  display:block;</span><br><span class="line">  text-align:center;</span><br><span class="line">  padding: 0 .25rem .25rem .25rem;</span><br><span class="line">  font-weight:500;</span><br><span class="line">  font-size: smaller;</span><br><span class="line">  color:#222222;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">&#125;</span><br><span class="line">.card .card-content div &#123;</span><br><span class="line">  overflow:hidden</span><br><span class="line">&#125;</span><br><span class="line">.card .card-content a &#123;</span><br><span class="line">  font-style:normal;</span><br><span class="line">  color:#222222;</span><br><span class="line">  font-weight:500;</span><br><span class="line">  text-decoration:none;</span><br><span class="line">  border:0;</span><br><span class="line">  overflow:hidden</span><br><span class="line">&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 我的常用</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation mine&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 官方文档</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation docs&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 代码托管</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation code&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 技能训练</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation skill&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 学习平台</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation school&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 开发者社区</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation community&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 云服务</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation serve&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 站长工具</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation sitetool&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 设计素材</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation design&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 实用工具</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation tools&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>相关代码我已经上传到 <a href="https://github.com/constown">Github</a> 。代码位置存放于 <code>HexoCustomFile/stars</code> 文件夹中。你只需要下载这三个文件即可快速部署：</p><ul><li><p><a href="https://github.com/constown/HexoCustomFile/blob/master/stars/index.md">index.md</a></p></li><li><p><a href="https://github.com/constown/HexoCustomFile/blob/master/stars/stars.js">stars.js</a></p></li><li><p><a href="https://github.com/constown/HexoCustomFile/blob/master/stars/allStars.json">allStars.json</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据结构和算法：单向链表</title>
      <link href="/archives/292a04a3.html"/>
      <url>/archives/292a04a3.html</url>
      
        <content type="html"><![CDATA[<h2 id="单向链表简介"><a href="#单向链表简介" class="headerlink" title="单向链表简介"></a>单向链表简介</h2><p>链表和数组一样，可以用于<strong>存储一系列的元素</strong>，但是链表和数组的<strong>实现机制完全不同</strong>。链表的每个元素由一个存储<strong>元素本身的节点</strong>和一个<strong>指向下一个元素的引用</strong>（有的语言称为指针或连接）组成。类似于火车头，一节车厢载着乘客（数据），通过节点连接另一节车厢。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211621.png" alt="image-20200707211620661"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211630.png" alt="image-20200707211629678"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211642.png" alt="image-20200707211641966"></p><ul><li>head 属性指向链表的第一个节点；</li><li>链表中的最后一个节点指向 null；</li><li>当链表中一个节点也没有的时候，head 直接指向 null；</li></ul><h3 id="数组存在的缺点"><a href="#数组存在的缺点" class="headerlink" title="数组存在的缺点"></a>数组存在的缺点</h3><ul><li>数组的创建通常需要申请一段<strong>连续的内存空间</strong>（一整块内存），并且大小是固定的。所以当原数组<strong>不能满足容量需求</strong>时，需要<strong>扩容</strong>（一般情况下是申请一个更大的数组，比如 2 倍，然后将原数组中的元素复制过去）。</li><li>在数组的开头或中间位置插入数据的成本很高，需要进行大量元素的位移。</li></ul><h3 id="链表的优势"><a href="#链表的优势" class="headerlink" title="链表的优势"></a>链表的优势</h3><ul><li>链表中的元素在内存中<strong>不必是连续的空间</strong>，可以充分利用计算机的内存，实现灵活的<strong>内存动态管理</strong>。</li><li>链表不必在创建时就<strong>确定大小</strong>，并且大小可以<strong>无限地延伸</strong>下去。</li><li>链表在<strong>插入和删除</strong>数据时，<strong>时间复杂度</strong>可以达到 O(1)，相对数组效率高很多。</li></ul><p><strong>链表的缺点：</strong></p><ul><li>链表访问任何一个位置的元素时，都需要<strong>从头开始访问</strong>（无法跳过第一个元素访问任何一个元素）。</li><li>无法通过下标值直接访问元素，需要从头开始一个个访问，直到找到对应的元素。</li><li>虽然可以轻松地到达<strong>下一个节点</strong>，但是回到<strong>前一个节点</strong>是很难的。</li></ul><h3 id="链表中的常见操作"><a href="#链表中的常见操作" class="headerlink" title="链表中的常见操作"></a>链表中的常见操作</h3><ul><li>append（element）：向链表尾部添加一个新的项；</li><li>insert（position，element）：向链表的特定位置插入一个新的项；</li><li>get（position）：获取对应位置的元素；</li><li>indexOf（element）：返回元素在链表中的索引。如果链表中没有该元素就返回-1；</li><li>update（position，element）：修改某个位置的元素；</li><li>removeAt（position）：从链表的特定位置移除一项；</li><li>remove（element）：从链表中移除一项；</li><li>isEmpty（）：如果链表中不包含任何元素，返回 trun，如果链表长度大于 0 则返回 false；</li><li>size（）：返回链表包含的元素个数，与数组的 length 属性类似；</li><li>toString（）：由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值；</li></ul><p>首先需要弄清楚：下文中的 position 指的是两个节点之间，并且与 index 的关系如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211659.png" alt="image-20200707211658363"></p><p>position 的值一般表示 position 所指位置的下一个节点。当 position 的值与 index 的值相等时，比如 position = index = 1，那么它们都表示 Node2。</p><h2 id="封装单向链表类"><a href="#封装单向链表类" class="headerlink" title="封装单向链表类"></a>封装单向链表类</h2><h3 id="创建单向链表类"><a href="#创建单向链表类" class="headerlink" title="创建单向链表类"></a>创建单向链表类</h3><p>先创建单向链表类 Linklist，并添加基本属性，再实现单向链表的常用方法：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200718124029.png"></p><p>代码解析:</p><ul><li>封装 LinkedList 的类, 用于表示我们的链表结构. (和 Java 中的链表同名, 不同 Java 中的这个类是一个双向链表, 后面我们会讲解双向链表)</li><li>在 LinkedList 类中有一个 Node 类, 用于封装每一个节点上的信息.(和优先级队列的封装一样)</li><li>链表中我们保存两个属性, 一个是链表的长度, 一个是链表中第一个节点.</li></ul><h3 id="append-element"><a href="#append-element" class="headerlink" title="append(element)"></a>append(element)</h3><p>向链表尾部追加数据可能有两种情况:</p><ul><li>链表本身为空, 新添加的数据时唯一的节点.</li><li>链表不为空, 需要向其他节点后面追加节点.</li></ul><p><strong>代码实现：</strong></p><p><img src="https://img.juanertu.com/img/20200718124458.png"></p><p><strong>过程详解：</strong></p><ul><li><p>首先需要做的是将 element 传入方法, 并根据 element 创建一个 Node 节点.</p></li><li><p>场景一: 链表本身是空的，我们只需要让 head 指向新建的 node 节点即可</p></li><li><p>场景二: 链表中已经有元素了, 需要向最后的节点的 next 中添加节点.首先让 current 指向第一个节点：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211827.png" alt="image-20200707211826281"></p><ul><li>通过 while 循环使 current 指向最后一个节点，最后通过 current.next = newNode，让最后一个节点指向新节点 newNode：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211844.png" alt="image-20200707211843432"></p><p><strong>测试代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试append方法</span></span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211859.png" alt="image-20200707211858675"></p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p><strong>代码实现：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现toString方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1.定义变量</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">  <span class="keyword">let</span> listString = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.循环获取一个个的节点</span></span><br><span class="line">  <span class="keyword">while</span> (current) &#123;</span><br><span class="line">    listString += current.<span class="property">data</span> + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    current = current.<span class="property">next</span> <span class="comment">//千万不要忘了拼接完一个节点数据之后，让current指向下一个节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> listString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法解读:</p><ul><li>该方法比较简单, 主要是获取每一个元素</li><li>还是从 head 开头, 因为获取链表的任何元素都必须从第一个节点开头.</li><li>循环遍历每一个节点, 并且取出其中的 element, 拼接成字符串.</li><li>将最终字符串返回.</li></ul><p><strong>测试代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试toString方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211946.png" alt="image-20200707211945460"></p><h3 id="insert-position-element"><a href="#insert-position-element" class="headerlink" title="insert(position,element)"></a>insert(position,element)</h3><p><strong>代码实现：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现insert方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">insert</span> = <span class="function">(<span class="params">position, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//理解positon的含义：position=0表示新界点插入后要成为第1个节点，position=2表示新界点插入后要成为第3个节点</span></span><br><span class="line">  <span class="comment">//1.对position进行越界判断:要求传入的position不能是负数且不能超过LinkList的length</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.根据data创建newNode</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.插入新节点</span></span><br><span class="line">  <span class="comment">//情况1：插入位置position=0</span></span><br><span class="line">  <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 让新节点指向第一个节点</span></span><br><span class="line">    newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="comment">// 让head指向新节点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = newNode</span><br><span class="line">    <span class="comment">//情况2：插入位置position&gt;0(该情况包含position=length)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="comment">//步骤1：通过while循环使变量current指向position位置的后一个节点(注意while循环的写法)</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      <span class="comment">//步骤2：在current指向下一个节点之前，让previous指向current当前指向的节点</span></span><br><span class="line">      previous = current</span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 步骤3：通过变量current(此时current已经指向position位置的后一个节点)，使newNode指向position位置的后一个节点</span></span><br><span class="line">    newNode.<span class="property">next</span> = current</span><br><span class="line">    <span class="comment">//步骤4：通过变量previous，使position位置的前一个节点指向newNode</span></span><br><span class="line">    previous.<span class="property">next</span> = newNode</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            启示：</span></span><br><span class="line"><span class="comment">            1.我们无法直接操作链表中的节点，但是可以通过变量指向这些节点，以此间接地操作节点(替身使者)；</span></span><br><span class="line"><span class="comment">            比如current指向节点3，想要节点3指向节点4只需要：current.next = 4即可。</span></span><br><span class="line"><span class="comment">            2.两个节点间是双向的，想要节点2的前一个节点为节点1，可以通过：1.next=2，来实现；</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4.新节点插入后要length+1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">length</span> += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>过程详解：</strong></p><p>inset 方法实现的过程：根据插入节点位置的不同可分为多种情况：</p><ul><li><strong>情况 1：position = 0</strong>：</li></ul><p>通过： newNode.next = this.head，建立连接 1；</p><p>通过： this.head = newNode，建立连接 2；（不能先建立连接 2，否则 this.head 不再指向 Node1）</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212004.png" alt="image-20200707212003041"></p><ul><li><strong>情况 2：position &gt; 0</strong>：</li></ul><p>首先定义两个变量 previous 和 curent 分别指向需要插入位置 pos = X 的前一个节点和后一个节点；</p><p>然后，通过：newNode.next = current，改变指向 3；</p><p>最后，通过：previous.next = newNode，改变指向 4；</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212022.png" alt="image-20200707212021082"></p><ul><li><strong>情况 2 的特殊情形：position = length</strong>：</li></ul><p>情况 2 也包含了 pos = length 的情况，该情况下 current 和 newNode.next 都指向 null；建立连接 3 和连接 4 的方式与情况 2 相同。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212047.png" alt="image-20200707212045666"></p><p>添加到其他位置:</p><ul><li>如果是添加到其他位置, 就需要先找到这个节点位置了.</li><li>我们通过 while 循环, 一点点向下找. 并且在这个过程中保存上一个节点和下一个节点.</li><li>找到正确的位置后, 将新节点的 next 指向下一个节点, 将上一个节点的 next 指向新的节点.</li></ul><p><strong>测试代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试insert方法</span></span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">0</span>, <span class="string">&#x27;在链表最前面插入节点&#x27;</span>)</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">2</span>, <span class="string">&#x27;在链表中第二个节点后插入节点&#x27;</span>)</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">5</span>, <span class="string">&#x27;在链表最后插入节点&#x27;</span>)</span><br><span class="line"><span class="title function_">alert</span>(list)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212113.png" alt="image-20200707212112493"></p><h3 id="get-position"><a href="#get-position" class="headerlink" title="get(position)"></a>get(position)</h3><p><strong>代码实现：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现get方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">  <span class="comment">// 当position = length时，取到的是null所以0 =&lt; position &lt; length</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.获取指定的positon位置的后一个节点的data</span></span><br><span class="line">  <span class="comment">//同样使用一个变量间接操作节点</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    current = current.<span class="property">next</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current.<span class="property">data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>过程详解：</strong></p><p>get 方法的实现过程：以获取 position = 2 为例，如下图所示：</p><ul><li>首先使 current 指向第一个节点，此时 index=0；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212134.png" alt="image-20200707212133575"></p><ul><li>通过 while 循环使 current 循环指向下一个节点，注意循环终止的条件 index++ &lt; position，即当 index=position 时停止循环，此时循环了 1 次，current 指向第二个节点(Node2)，最后通过 current.data 返回 Node2 节点的数据；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212151.png" alt="image-20200707212150175"></p><p><strong>测试代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试get方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">get</span>(<span class="number">0</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">get</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212205.png" alt="image-20200707212204745"></p><h3 id="indexOf-element"><a href="#indexOf-element" class="headerlink" title="indexOf(element)"></a>indexOf(element)</h3><p><strong>代码实现：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现indexOf方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.定义变量</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.开始查找:只要current不指向null就一直循环</span></span><br><span class="line">  <span class="keyword">while</span> (current) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current.<span class="property">data</span> == data) &#123;</span><br><span class="line">      <span class="keyword">return</span> index</span><br><span class="line">    &#125;</span><br><span class="line">    current = current.<span class="property">next</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.遍历完链表没有找到，返回-1</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析:</p><ul><li>代码 1 的位置还是定义需要的变量.</li><li>代码 2 的位置, 通过 while 循环获取节点</li><li>通过节点获取元素和 element 进行对比, 如果和传入 element 相同, 表示找到, 直接返回 index 即可.</li><li>如果没有找到, index++, 并且指向下一个节点.</li><li>到最后都没有找到, 说明链表中没有对应的元素, 那么返回-1 即可.</li></ul><p><strong>过程详解：</strong></p><p>indexOf 方法的实现过程：</p><ul><li>使用变量 current 记录当前指向的节点，使用变量 index 记录当前节点的索引值（注意 index = node 数-1）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212225.png" alt="image-20200707212224834"></p><p><strong>测试代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试indexOf方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">indexOf</span>(<span class="string">&#x27;aaa&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">indexOf</span>(<span class="string">&#x27;ccc&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212237.png" alt="image-20200707212236303"></p><h3 id="update-position-element"><a href="#update-position-element" class="headerlink" title="update(position,element)"></a>update(position,element)</h3><p><strong>代码实现：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现update方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">  <span class="comment">//因为被修改的节点不能为null，所以position不能等于length</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.查找正确的节点</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    current = current.<span class="property">next</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.将position位置的后一个节点的data修改成newData</span></span><br><span class="line">  current.<span class="property">data</span> = newData</span><br><span class="line">  <span class="comment">//返回true表示修改成功</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试update方法</span></span><br><span class="line">list.<span class="title function_">update</span>(<span class="number">0</span>, <span class="string">&#x27;修改第一个节点&#x27;</span>)</span><br><span class="line">list.<span class="title function_">update</span>(<span class="number">1</span>, <span class="string">&#x27;修改第二个节点&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">update</span>(<span class="number">3</span>, <span class="string">&#x27;能修改么&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212248.png" alt="image-20200707212247902"></p><h3 id="removeAt-position"><a href="#removeAt-position" class="headerlink" title="removeAt(position)"></a>removeAt(position)</h3><p><strong>代码实现：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现removeAt方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeAt</span> = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">//position不能为length</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.删除元素</span></span><br><span class="line">  <span class="comment">//情况1：position = 0时(删除第一个节点)</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">  <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//情况2：position &gt; 0时</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      previous = current</span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环结束后，current指向position后一个节点，previous指向current前一个节点</span></span><br><span class="line">    <span class="comment">//再使前一个节点的next指向current的next即可</span></span><br><span class="line">    previous.<span class="property">next</span> = current.<span class="property">next</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3，length-1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">length</span> -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回被删除节点的data，为此current定义在最上面</span></span><br><span class="line">  <span class="keyword">return</span> current.<span class="property">data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>过程详解：</strong></p><p>removeAt 方法的实现过程：删除节点时存在多种情况：</p><ul><li><strong>情况 1：position = 0</strong>，即移除第一个节点（Node1）。</li></ul><p>通过：this.head = this.head.next，改变指向 1 即可；</p><p>虽然 Node1 的 next 仍指向 Node2，但是没有引用指向 Node1，则 Node1 会被垃圾回收器自动回收，所以不用处理 Node1 指向 Node2 的引用 next。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212301.png" alt="image-20200707212300727"></p><ul><li><strong>情况 2：positon &gt; 0</strong>，比如 pos = 2 即移除第三个节点（Node3）。</li></ul><p><strong>注意：</strong>position = length 时 position 后一个节点为 null 不能删除，因此 position != length；</p><p>首先，定义两个变量 previous 和 curent 分别指向需要删除位置 pos = x 的前一个节点和后一个节点；</p><p>然后，通过：previous.next = current.next，改变指向 1 即可；</p><p>随后，没有引用指向 Node3，Node3 就会被自动回收，至此成功删除 Node3 。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212316.png" alt="image-20200707212314952"></p><p><strong>测试代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试removeAt方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">removeAt</span>(<span class="number">0</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">removeAt</span>(<span class="number">0</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212328.png" alt="image-20200707212327149"></p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>其他方法包括：<strong>remove(element)、isEmpty()、size()</strong></p><p><strong>代码实现：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-------------其他方法的实现--------------*/</span></span><br><span class="line"><span class="comment">//一.实现remove方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">remove</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.获取data在列表中的位置</span></span><br><span class="line">  <span class="keyword">let</span> position = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(data)</span><br><span class="line">  <span class="comment">//2.根据位置信息，删除结点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(position)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二.实现isEmpty方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三.实现size方法</span></span><br><span class="line"><span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------其他方法测试----------------*/</span></span><br><span class="line"><span class="comment">//remove方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">remove</span>(<span class="string">&#x27;aaa&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br><span class="line"><span class="comment">//isEmpty方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">isEmpty</span>())</span><br><span class="line"><span class="comment">//size方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">size</span>())</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707212340.png" alt="image-20200707212339289"></p><h3 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h3><h4 id="使用-ES5-实现"><a href="#使用-ES5-实现" class="headerlink" title="使用 ES5 实现"></a>使用 ES5 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装链表类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LinkList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 封装一个内部类：节点类</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Node</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="comment">// 属性head指向链表的第一个节点</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一.实现append方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">append</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建新节点</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.添加新节点</span></span><br><span class="line">    <span class="comment">//情况1：只有一个节点时候</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = newNode</span><br><span class="line">      <span class="comment">//情况2：节点数大于1，在链表的最后添加新节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//让变量current指向第一个节点</span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">      <span class="comment">//当current.next(下一个节点不为空)不为空时，一直循环，直到current指向最后一个节点</span></span><br><span class="line">      <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">        current = current.<span class="property">next</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 最后节点的next指向新的节点</span></span><br><span class="line">      current.<span class="property">next</span> = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.添加完新结点之后length+1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 二.实现toString方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.定义变量</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> listString = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.循环获取一个个的节点</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      listString += current.<span class="property">data</span> + <span class="string">&#x27; &#x27;</span></span><br><span class="line">      current = current.<span class="property">next</span> <span class="comment">//千万不要忘了拼接完一个节点数据之后，让current指向下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> listString</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三.实现insert方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">insert</span> = <span class="function">(<span class="params">position, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//理解positon的含义：position=0表示新界点插入后要成为第1个节点，position=2表示新界点插入后要成为第3个节点</span></span><br><span class="line">    <span class="comment">//1.对position进行越界判断:要求传入的position不能是负数且不能超过LinkList的length</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.根据data创建newNode</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.插入新节点</span></span><br><span class="line">    <span class="comment">//情况1：插入位置position=0</span></span><br><span class="line">    <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 让新节点指向第一个节点</span></span><br><span class="line">      newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">      <span class="comment">// 让head指向新节点</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = newNode</span><br><span class="line">      <span class="comment">//情况2：插入位置position&gt;0(该情况包含position=length)</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">      <span class="comment">//步骤1：通过while循环使变量current指向position位置的后一个节点(注意while循环的写法)</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        <span class="comment">//步骤2：在current指向下一个节点之前，让previous指向current当前指向的节点</span></span><br><span class="line">        previous = current</span><br><span class="line">        current = current.<span class="property">next</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 步骤3：通过变量current(此时current已经指向position位置的后一个节点)，使newNode指向position位置的后一个节点</span></span><br><span class="line">      newNode.<span class="property">next</span> = current</span><br><span class="line">      <span class="comment">//步骤4：通过变量previous，使position位置的前一个节点指向newNode</span></span><br><span class="line">      previous.<span class="property">next</span> = newNode</span><br><span class="line"></span><br><span class="line">      <span class="comment">//我们无法直接操作链表中的节点，但是可以通过变量指向这些节点，以此间接地操作节点；</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.新节点插入后要length+1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//四.实现get方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.越界判断</span></span><br><span class="line">    <span class="comment">// 当position = length时，取到的是null所以0 =&lt; position &lt; length</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.获取指定的positon位置的后一个节点的data</span></span><br><span class="line">    <span class="comment">//同样使用一个变量间接操作节点</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//五.实现indexOf方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.定义变量</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.开始查找:只要current不指向null就一直循环</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.<span class="property">data</span> == data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">      index += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.遍历完链表没有找到，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//六.实现update方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.越界判断</span></span><br><span class="line">    <span class="comment">//因为被修改的节点不能为null，所以position不能等于length</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查找正确的节点</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.将position位置的后一个节点的data修改成newData</span></span><br><span class="line">    current.<span class="property">data</span> = newData</span><br><span class="line">    <span class="comment">//返回true表示修改成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//七.实现removeAt方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeAt</span> = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.删除元素</span></span><br><span class="line">    <span class="comment">//情况1：position = 0时(删除第一个节点)</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//情况2：position &gt; 0时</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previous = current</span><br><span class="line">        current = current.<span class="property">next</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//循环结束后，current指向position后一个节点，previous指向current前一个节点</span></span><br><span class="line">      <span class="comment">//再使前一个节点的next指向current的next即可</span></span><br><span class="line">      previous.<span class="property">next</span> = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3，length-1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回被删除节点的data，为此current定义在最上面</span></span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*-------------其他方法的实现--------------*/</span></span><br><span class="line">  <span class="comment">//八.实现remove方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">remove</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取data在列表中的位置</span></span><br><span class="line">    <span class="keyword">let</span> position = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(data)</span><br><span class="line">    <span class="comment">//2.根据位置信息，删除结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(position)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//九.实现isEmpty方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span> == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//十.实现size方法</span></span><br><span class="line">  <span class="title class_">LinkList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-ES6-实现"><a href="#使用-ES6-实现" class="headerlink" title="使用 ES6 实现"></a>使用 ES6 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单向链表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="comment">// 保存元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = element</span><br><span class="line">    <span class="comment">// 指向下一个节点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">append</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">      <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">        current = current.<span class="property">next</span></span><br><span class="line">      &#125;</span><br><span class="line">      current.<span class="property">next</span> = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">position, element</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previous = current</span><br><span class="line">        current = current.<span class="property">next</span></span><br><span class="line">      &#125;</span><br><span class="line">      previous.<span class="property">next</span> = newNode</span><br><span class="line">      newNode.<span class="property">next</span> = current</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span>++</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">position</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">element</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">indexOf</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.<span class="property">element</span> === element) &#123;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">      &#125;</span><br><span class="line">      index++</span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeAt</span>(<span class="params">position</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = current.<span class="property">next</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previous = current</span><br><span class="line">        current = current.<span class="property">next</span></span><br><span class="line">      &#125;</span><br><span class="line">      previous.<span class="property">next</span> = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span>--</span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">element</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update (position, element) &#123;</span></span><br><span class="line">  <span class="comment">//   if (position &lt; 0 || position &gt;= this.length) return false</span></span><br><span class="line">  <span class="comment">//   let current = this.head</span></span><br><span class="line">  <span class="comment">//   let index = 0</span></span><br><span class="line">  <span class="comment">//   while (index++ &lt; position) &#123;</span></span><br><span class="line">  <span class="comment">//     current = current.next</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   current.element = element</span></span><br><span class="line">  <span class="comment">//   return true</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">position, element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(position)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">insert</span>(position, element)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(element)</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(index)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 单向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据结构和算法：队列</title>
      <link href="/archives/14862ea.html"/>
      <url>/archives/14862ea.html</url>
      
        <content type="html"><![CDATA[<h2 id="队列简介"><a href="#队列简介" class="headerlink" title="队列简介"></a>队列简介</h2><p>队列是是一种受限的线性表，特点为<strong>先进先出</strong>（<strong>FIFO</strong>：first in first out）。</p><ul><li>受限之处在于它只允许在表的<strong>前端</strong>（front）进行删除操作；</li><li>在表的<strong>后端</strong>（rear）进行插入操作；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707202846.png" alt="image-20200707202837579"></p><p>相当于排队买票，先来的先买票，后来的后买票。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707202851.png" alt="image-20200707202850483"></p><p><strong>队列的应用：</strong></p><ul><li>打印队列：计算机打印多个文件的时候，需要排队打印；</li><li>线程队列：当开启多线程时，当新开启的线程所需的资源不足时就先放入线程队列，等待 CPU 处理；</li></ul><p><strong>队列类的实现：</strong></p><p>队列的实现和栈一样，有两种方案：</p><ul><li>基于数组实现；</li><li>基于链表实现；</li></ul><p><strong>队列的常见操作：</strong></p><ul><li><p><code>enqueue(element)</code>：向队列尾部添加一个（或多个）新的项。</p><p><code>dequeue()</code>：移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。</p><p><code>front()</code>：返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息——与<code>Stack</code>类的<code>peek</code>方法非常类似）。</p><p><code>isEmpty()</code>：如果队列中不包含任何元素，返回<code>true</code>，否则返回<code>false</code>。</p><p><code>size()</code>：返回队列包含的元素个数，与数组的<code>length</code>属性类似。</p></li></ul><h2 id="封装队列类"><a href="#封装队列类" class="headerlink" title="封装队列类"></a>封装队列类</h2><h3 id="使用-ES5-实现"><a href="#使用-ES5-实现" class="headerlink" title="使用 ES5 实现"></a>使用 ES5 实现</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200718123451.png"></p><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建队列</span></span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将元素加入到队列中</span></span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue)</span><br><span class="line"><span class="comment">// 从队列中删除元素</span></span><br><span class="line">queue.<span class="title function_">dequeue</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue)</span><br><span class="line">queue.<span class="title function_">dequeue</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue)</span><br><span class="line"></span><br><span class="line"><span class="comment">//front</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">front</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证其他方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">isEmpty</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">size</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707203039.png" alt="image-20200707203038195"></p><h3 id="使用-ES6-实现"><a href="#使用-ES6-实现" class="headerlink" title="使用 ES6 实现"></a>使用 ES6 实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">front</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><h3 id="优先级队列的特点"><a href="#优先级队列的特点" class="headerlink" title="优先级队列的特点"></a><strong>优先级队列的特点</strong></h3><ul><li>我们知道, 普通的队列插入一个元素, 数据会被放在后端. 并且需要前面所有的元素都处理完成后才会处理前面的数据.</li><li>但是优先级队列, 在插入一个元素的时候会考虑该数据的优先级.(和其他数据优先级进行比较)</li><li>比较完成后, 可以得出这个元素正确的队列中的位置. 其他处理方式, 和队列的处理方式一样.</li><li>也就是说, 如果我们要实现优先级队列, 最主要是要修改添加方法. (当然, 还需要以某种方式来保存元素的优先级)</li></ul><h3 id="优先级队列应用"><a href="#优先级队列应用" class="headerlink" title="优先级队列应用"></a><strong>优先级队列应用</strong></h3><ul><li>一个现实的例子就是机场登机的顺序<ul><li>头等舱和商务舱乘客的优先级要高于经济舱乘客。</li><li>在有些国家，老年人和孕妇（或带小孩的妇女）登机时也享有高于其他乘客的优先级。</li></ul></li><li>另一个现实中的例子是医院的（急诊科）候诊室。<ul><li>医生会优先处理病情比较严重的患者。</li><li>通常，护士会鉴别分类，根据患者病情的严重程度放号。</li></ul></li><li>计算机中, 我们也可以通过优先级队列来重新排序队列中任务的顺序<ul><li>比如每个线程处理的任务重要性不同, 我们可以通过优先级的大小, 来决定该线程在队列中被处理的次序.</li></ul></li></ul><h3 id="实现优先级队列主要考虑的问题"><a href="#实现优先级队列主要考虑的问题" class="headerlink" title="实现优先级队列主要考虑的问题"></a><strong>实现优先级队列主要考虑的问题</strong></h3><ul><li><ol><li>封装元素和优先级放在一起(可以封装一个新的构造函数)</li></ol></li><li><ol start="2"><li>添加元素时, 将当前的优先级和队列中已经存在的元素优先级进行比较, 以获得自己正确的位置.</li></ol></li></ul><h3 id="使用-ES5-实现-1"><a href="#使用-ES5-实现-1" class="headerlink" title="使用 ES5 实现"></a>使用 ES5 实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装优先级队列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PriorityQueue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//内部类：在类里面再封装一个类;表示带优先级的数据</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">QueueElement</span>(<span class="params">element, priority</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = element</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">priority</span> = priority</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 封装属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.实现按照优先级插入方法</span></span><br><span class="line">  <span class="title class_">PriorityQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">enqueue</span> = <span class="function">(<span class="params">element, priority</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.1.创建QueueElement对象</span></span><br><span class="line">    <span class="keyword">let</span> queueElement = <span class="keyword">new</span> <span class="title class_">QueueElement</span>(element, priority)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2.判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(queueElement)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 定义一个变量记录是否成功添加了新元素</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">items</span>) &#123;</span><br><span class="line">        <span class="comment">// 让新插入的元素与原有元素进行优先级比较(priority越小，优先级越大)</span></span><br><span class="line">        <span class="keyword">if</span> (queueElement.<span class="property">priority</span> &lt; i.<span class="property">priority</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(i, <span class="number">0</span>, queueElement)</span><br><span class="line">          added = <span class="literal">true</span></span><br><span class="line">          <span class="comment">// 新元素已经找到插入位置了可以使用break停止循环</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 新元素没有成功插入，就把它放在队列的最前面</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(queueElement)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.dequeue():从队列中删除前端元素</span></span><br><span class="line">  <span class="title class_">PriorityQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dequeue</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.front():查看前端的元素</span></span><br><span class="line">  <span class="title class_">PriorityQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">front</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.isEmpty():查看队列是否为空</span></span><br><span class="line">  <span class="title class_">PriorityQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.size():查看队列中元素的个数</span></span><br><span class="line">  <span class="title class_">PriorityQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6.toString():以字符串形式输出队列中的元素</span></span><br><span class="line">  <span class="title class_">PriorityQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">items</span>) &#123;</span><br><span class="line">      resultString += i.<span class="property">element</span> + <span class="string">&#x27;-&#x27;</span> + i.<span class="property">priority</span> + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>()</span><br><span class="line">pq.<span class="title function_">enqueue</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">111</span>)</span><br><span class="line">pq.<span class="title function_">enqueue</span>(<span class="string">&#x27;Hellen&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">pq.<span class="title function_">enqueue</span>(<span class="string">&#x27;Mary&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">pq.<span class="title function_">enqueue</span>(<span class="string">&#x27;Gogo&#x27;</span>, <span class="number">27</span>)</span><br><span class="line"><span class="comment">// 打印修改过后的优先队列对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pq)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707203321.png" alt="image-20200707203321036"></p><h3 id="使用-ES6-实现-1"><a href="#使用-ES6-实现-1" class="headerlink" title="使用 ES6 实现"></a>使用 ES6 实现</h3><p>继承自上面的队列即可，部分方法重新封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueueElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">element, priority</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = element</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">priority</span> = priority</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">element, priority</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> queueElement = <span class="keyword">new</span> <span class="title class_">QueueElement</span>(element, priority)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(queueElement)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="variable language_">this</span>.<span class="property">items</span>[i]</span><br><span class="line">        <span class="keyword">if</span> (element.<span class="property">priority</span> &gt; queueElement.<span class="property">priority</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(i, <span class="number">0</span>, queueElement)</span><br><span class="line">          added = <span class="literal">false</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(queueElement)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><ul><li>封装了一个 QueueElement, 将 element 和 priority 封装在一起.</li><li>在插入新的元素时, 有如下情况下考虑:<ul><li>根据新的元素先创建一个新的 QueueElement 对象.</li><li>如果元素是第一个被加进来的, 那么不需要考虑太多, 直接加入数组中即可.</li><li>如果是后面加进来的元素, 需要和前面加进来的元素依次对比优先级.</li><li>一旦优先级, 大于某个元素, 就将该元素插入到元素这个元素的位置. 其他元素会依次向后移动.</li><li>如果遍历了所有的元素, 没有找到某个元素被这个新元素的优先级低, 直接放在最后即可.</li></ul></li></ul><h2 id="队列的应用-击鼓传花"><a href="#队列的应用-击鼓传花" class="headerlink" title="队列的应用(击鼓传花)"></a>队列的应用(击鼓传花)</h2><p>使用队列实现小游戏：击鼓传花，传入一组数据和设定的数字 num，循环遍历数组内元素，遍历到的元素为指定数字 num 时将该元素删除，直至数组剩下一个元素。</p><h3 id="击鼓传花的规则"><a href="#击鼓传花的规则" class="headerlink" title="击鼓传花的规则"></a>击鼓传花的规则</h3><ul><li>原游戏规则:<ul><li>班级中玩一个游戏, 所有学生围成一圈, 从某位同学手里开始向旁边的同学传一束花.</li><li>这个时候某个人(比如班长), 在击鼓, 鼓声停下的一颗, 花落在谁手里, 谁就出来表演节目.</li></ul></li><li>修改游戏规则:<ul><li>我们来修改一下这个游戏规则.</li><li>几个朋友一起玩一个游戏, 围成一圈, 开始数数, 数到某个数字的人自动淘汰.</li><li>最后剩下的这个人会获得胜利, 请问最后剩下的是原来在哪一个位置上的人?</li></ul></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">passGame</span>(<span class="params">nameList, num</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nameList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = nameList[i]</span><br><span class="line">    queue.<span class="title function_">enqueue</span>(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      queue.<span class="title function_">enqueue</span>(queue.<span class="title function_">dequeue</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    queue.<span class="title function_">dequeue</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queue.<span class="title function_">front</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 队列应用：面试题：击鼓传花</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">passGame</span> = (<span class="params">nameList, num</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//1.创建队列结构</span></span><br><span class="line">  <span class="keyword">let</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  <span class="comment">//2.将所有人依次加入队列</span></span><br><span class="line">  <span class="comment">// 这是ES6的for循环写法，i相当于nameList[i]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> nameList) &#123;</span><br><span class="line">    queue.<span class="title function_">enqueue</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.开始数数</span></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//队列中只剩1个人就停止数数</span></span><br><span class="line">    <span class="comment">// 不是num的时候，重新加入队列末尾</span></span><br><span class="line">    <span class="comment">// 是num的时候，将其从队列中删除</span></span><br><span class="line">    <span class="comment">// 3.1.num数字之前的人重新放入队列的末尾(把队列前面删除的加到队列最后)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      queue.<span class="title function_">enqueue</span>(queue.<span class="title function_">dequeue</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.2.num对应这个人，直接从队列中删除</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        思路是这样的，由于队列没有像数组一样的下标值不能直接取到某一元素，所以采用，把num前面的num-1个元素先删除后添加到队列末尾，这样第num个元素就排到了队列的最前面，可以直接使用dequeue方法进行删除</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    queue.<span class="title function_">dequeue</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//4.获取剩下的那个人</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">size</span>())</span><br><span class="line">  <span class="keyword">let</span> endName = queue.<span class="title function_">front</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最终剩下的人：&#x27;</span> + endName)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nameList.<span class="title function_">indexOf</span>(endName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.测试击鼓传花</span></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lilei&#x27;</span>, <span class="string">&#x27;Tony&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">passGame</span>(names, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><strong>图解</strong></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707204153.png" alt="image-20200707204152363"></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><strong>关于数组方法 splice 用法</strong>：</p><ul><li>splice（1，0，’Tom’）：表示在索引为 1 的元素前面插入元素’Tom‘（也可以理解为从索引为 1 的元素开始删除，删除 0 个元素，再在索引为 1 的元素前面添加元素’Tom’）；</li><li>splice（1，1，’Tom’）：表示从索引为 1 的元素开始删除（包括索引为 1 的元素），共删除 1 个元素，并添加元素’Tom’。即把索引为 1 的元素替换为元素’Tom’。</li></ul><p><strong>数组的 push 方法在数组、栈和队列中的形式：</strong></p><ul><li><strong>数组</strong>：在数组[0，1，2]中，pop(3)，结果为[0，1，2，3]；</li><li><strong>栈</strong>：执行 pop(0)，pop(1)，pop(2)，pop(3)，从栈底到栈顶的元素分别为：0，1，2，3；如果看成数组，可写为[0，1，2，3]，但是索引为 3 的元素 3 其实是栈顶元素；所以说栈的 push 方法是向栈顶添加元素（但在数组的视角下为向数组尾部添加元素）；</li><li><strong>队列</strong>：enqueue 方法可以由数组的 push 方法实现，与数组相同，相当于在数组尾部添加元素。</li></ul><p>可以这样想：栈结构是头朝下（索引值由下往上增大）的数组结构。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707203729.png" alt="image-20200707203728995"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据结构和算法：栈结构</title>
      <link href="/archives/d343d10e.html"/>
      <url>/archives/d343d10e.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>我们知道数组是一种线性结构, 并且可以在数组的任意位置插入和删除数据.</li><li>但是有时候, 我们为了实现某些功能, 必须对这种任意性加以限制.</li><li>而栈和队列就是比较常见的受限的线性结构.</li></ul><h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h2><ul><li>它是一种运算受限的线性表,<strong>后进先出(LIFO)</strong></li><li>LIFO(Last In First Out)表示就是后进入的元素, 第一个弹出栈空间. 类似于自动餐托盘, 最后放上的托盘, 往往先把拿出去使用.</li><li>其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。</li><li>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；</li><li>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200630103203.png" alt="栈结构"></li></ul><h3 id="生活中的栈结构："><a href="#生活中的栈结构：" class="headerlink" title="生活中的栈结构："></a>生活中的栈结构：</h3><ul><li>自助餐的托盘, 最新放上去的, 最先被客人拿走使用.</li><li>装羽毛球，乒乓球的球筒</li></ul><h3 id="程序中的栈结构"><a href="#程序中的栈结构" class="headerlink" title="程序中的栈结构"></a>程序中的栈结构</h3><ul><li><strong>函数调用栈</strong>：A（B（C（D（））））：即 A 函数中调用 B，B 调用 C，C 调用 D；在 A 执行的过程中会将 A 压入栈，随后 B 执行时 B 也被压入栈，函数 C 和 D 执行时也会被压入栈。所以当前栈的顺序为：A-&gt;B-&gt;C-&gt;D（栈顶）；函数 D 执行完之后，会弹出栈被释放，弹出栈的顺序为 D-&gt;C-&gt;B-&gt;A;</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200630103905.png" alt="函数调用栈图解"></p><ul><li><strong>递归</strong>：为什么没有停止条件的递归会造成栈溢出？比如函数 A 为递归函数，不断地调用自己（因为函数还没有执行完，不会把函数弹出栈），不停地把相同的函数 A 压入栈，最后造成<strong>栈溢出</strong>（Stack Overfloat）</li></ul><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><div class="note flat"><p>有 6 个元素 6，5，4，3，2，1 按顺序进栈，问下列哪一个不是合法的出栈顺序？</p><ul><li><input disabled="" type="checkbox"> A: 5 4 3 6 1 2</li><li><input checked="" disabled="" type="checkbox"> B: 4 5 3 2 1 6</li><li><input disabled="" type="checkbox"> C: 3 4 6 5 2 1</li><li><input disabled="" type="checkbox"> D: 2 3 4 1 5 6</li></ul><p>题目所说的按顺序进栈指的不是一次性全部进栈，而是有进有出，进栈顺序为 6 -&gt; 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1。</p></div><div class="note success flat"><p>解析：</p><ul><li>A 答案：65 进栈，5 出栈，4 进栈出栈，3 进栈出栈，6 出栈，21 进栈，1 出栈，2 出栈（整体入栈顺序符合 654321）;</li><li>B 答案：654 进栈，4 出栈，5 出栈，3 进栈出栈，2 进栈出栈，1 进栈出栈，6 出栈（整体的入栈顺序符合 654321）;</li><li>C 答案：6543 进栈，3 出栈，4 出栈，之后应该 5 出栈而不是 6，所以错误；</li><li>D 答案：65432 进栈，2 出栈，3 出栈，4 出栈，1 进栈出栈，5 出栈，6 出栈。符合入栈顺序；</li></ul></div><h3 id="栈常见的操作"><a href="#栈常见的操作" class="headerlink" title="栈常见的操作"></a>栈常见的操作</h3><ul><li>push（element）：添加一个新元素到栈顶位置；</li><li>pop（）：移除栈顶的元素，同时返回被移除的元素；</li><li>peek（）：返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）；</li><li>isEmpty（）：如果栈里没有任何元素就返回 true，否则返回 false；</li><li>size（）：返回栈里的元素个数。这个方法和数组的 length 属性类似；</li><li>toString（）：将栈结构的内容以字符串的形式返回。</li></ul><h2 id="栈结构的实现"><a href="#栈结构的实现" class="headerlink" title="栈结构的实现"></a>栈结构的实现</h2><p>我们先来创建一个栈的类, 用于封装栈相关的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Stack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 栈中的属性</span></span><br><span class="line">  <span class="keyword">var</span> items = []</span><br><span class="line">  <span class="comment">// 栈相关的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析:</p><ul><li>我们创建了一个 Stack 构造函数, 用户创建栈的类.</li><li>在构造函数中, 定义了一个变量, 这个变量可以用于保存当前栈对象中所有的元素.</li><li>这个变量是一个数组类型. 我们之后无论是压栈操作还是出栈操作, 都是从数组中添加和删除元素.</li><li>栈有一些相关的操作方法, 通常无论是什么语言, 操作都是比较类似的.</li></ul><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h4 id="通过-ES5-的实现方式"><a href="#通过-ES5-的实现方式" class="headerlink" title="通过 ES5 的实现方式"></a>通过 ES5 的实现方式</h4><p>我们可以使用原型来封装方法，这样效率会更加高！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装栈类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Stack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 栈中的属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line">  <span class="comment">// 栈的相关操作</span></span><br><span class="line">  <span class="comment">// 1.将元素压入栈</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.从栈中取出元素</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.查看一下栈顶元素</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4.判断栈是否为空</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5.获取栈中元素的个数</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 6.toString方法</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> resultString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      resultString += <span class="variable language_">this</span>.<span class="property">items</span>[i] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过-ES6-的实现方式"><a href="#通过-ES6-的实现方式" class="headerlink" title="通过 ES6 的实现方式"></a>通过 ES6 的实现方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈的使用</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">s.<span class="title function_">push</span>(<span class="number">20</span>)</span><br><span class="line">s.<span class="title function_">push</span>(<span class="number">10</span>)</span><br><span class="line">s.<span class="title function_">push</span>(<span class="number">100</span>)</span><br><span class="line">s.<span class="title function_">push</span>(<span class="number">77</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">pop</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">pop</span>())</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">peek</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">isEmpty</span>())</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">size</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200630104508.png" alt="测试结果"></p><h2 id="栈结构的应用"><a href="#栈结构的应用" class="headerlink" title="栈结构的应用"></a>栈结构的应用</h2><blockquote><p>我们已经学会了如何使用 <code>Stack</code> 类，现在就用它解决一些计算机科学中的问题。</p></blockquote><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><ul><li>为什么需要十进制转二进制?<ul><li>现实生活中，我们主要使用十进制。</li><li>但在计算科学中，二进制非常重要，因为计算机里的所有内容都是用二进制数字表示的（0 和 1）。</li><li>没有十进制和二进制相互转化的能力，与计算机交流就很困难。</li></ul></li><li>如何实现十进制转二进制?<ul><li>要把十进制转化成二进制，我们可以将该十进制数字和 2 整除（二进制是满二进一），直到结果是 0 为止。</li><li>举个例子，把十进制的数字 10 转化成二进制的数字，过程大概是这样：</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200630104646.png" alt="十进制转换二进制图解"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><h4 id="ES5-实现"><a href="#ES5-实现" class="headerlink" title="ES5 实现"></a>ES5 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line"><span class="comment">// 十进制转换二进制函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dec2bin</span>(<span class="params">decNum</span>) &#123;</span><br><span class="line">  <span class="comment">// 1.定义栈对象</span></span><br><span class="line">  <span class="keyword">var</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">  <span class="comment">// 2.循环操作</span></span><br><span class="line">  <span class="keyword">while</span> (decNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.1.获取余数放入栈中</span></span><br><span class="line">    stack.<span class="title function_">push</span>(decNum % <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// 2.2.获取整除后的结果，作为下一次运行的数字</span></span><br><span class="line">    decNum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(decNum / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.从数组中取出0和1</span></span><br><span class="line">  <span class="keyword">var</span> binaryString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">while</span> (!stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    binaryString += stack.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> binaryString</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test code</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dec2bin</span>(<span class="number">10</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dec2bin</span>(<span class="number">100</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dec2bin</span>(<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h4 id="ES6-实现"><a href="#ES6-实现" class="headerlink" title="ES6 实现"></a>ES6 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十进制转换为二进制</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">dec2bin</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">  <span class="comment">// 循环取余数</span></span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> remainder = num % <span class="number">2</span></span><br><span class="line">    num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(num / <span class="number">2</span>)</span><br><span class="line">    stack.<span class="title function_">push</span>(remainder)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 拼接字符串</span></span><br><span class="line">  <span class="keyword">let</span> binString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">while</span> (!stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    binString += stack.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> binString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200630104842.png" alt="测试结果"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>栈结构的特点：后进先出 LIFO (Last In First Out)</p></li><li><p>常见操作</p><ul><li>push（element）：添加一个新元素到栈顶位置；</li><li>pop（）：移除栈顶的元素，同时返回被移除的元素；</li><li>peek（）：返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）；</li><li>isEmpty（）：如果栈里没有任何元素就返回 true，否则返回 false；</li><li>size（）：返回栈里的元素个数。这个方法和数组的 length 属性类似；</li><li>toString（）：将栈结构的内容以字符串的形式返回。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 栈结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据结构和算法：数组</title>
      <link href="/archives/838e5b66.html"/>
      <url>/archives/838e5b66.html</url>
      
        <content type="html"><![CDATA[<h3 id="数组的基本使用"><a href="#数组的基本使用" class="headerlink" title="数组的基本使用"></a>数组的基本使用</h3><h4 id="为什么使用数组"><a href="#为什么使用数组" class="headerlink" title="为什么使用数组?"></a>为什么使用数组?</h4><ul><li><p>假如有这样一个需求：保存自己多个朋友的名字。可以这么做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存班级中所有学生的名字</span></span><br><span class="line"><span class="keyword">var</span> name1 = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">&#x27;Lily&#x27;</span></span><br><span class="line"><span class="keyword">var</span> name3 = <span class="string">&#x27;Lucy&#x27;</span></span><br><span class="line"><span class="keyword">var</span> name4 = <span class="string">&#x27;Lilei&#x27;</span></span><br><span class="line"><span class="keyword">var</span> name5 = <span class="string">&#x27;Coderwhy&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>这不是一个好的解决方案</p><ul><li>因为假如班级有 100 个学生, 那么我们就需要有 100 个变量.</li><li>100 个变量的是非常不方便管理的, 而且当我们需要找到某一个学生时, 从 100 个变量中去搜索也是一个问题.</li></ul></li><li><p>很明显, 这种情况下, 我们通常会使用数组来解决:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组来保存学生名字</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Lucy&#x27;</span>, <span class="string">&#x27;Lilei&#x27;</span>, <span class="string">&#x27;Coderwhy&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建和初始化数组"><a href="#创建和初始化数组" class="headerlink" title="创建和初始化数组"></a>创建和初始化数组</h4><ul><li><p>用 JavaScript 声明、创建和初始化数组很简单，就像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建和初始化数组</span></span><br><span class="line"><span class="keyword">var</span> daysOfWeek = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="keyword">var</span> daysOfWeek = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>)</span><br><span class="line"><span class="keyword">var</span> daysOfWeek = <span class="keyword">new</span> <span class="title class_">Array</span>(</span><br><span class="line">  <span class="string">&#x27;Sunday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Monday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Tuesday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Wednesday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Thursday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Friday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Saturday&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>代码解析:</p><ul><li>使用<code>new</code>关键字，就能简单地声明并初始化一个数组</li><li>用这种方式，还可以创建一个指定长度的数组.</li><li>另外，也可以直接将数组元素作为参数传递给它的构造器</li><li>用<code>new</code>创建数组并不是最好的方式。如果你想在 JavaScript 中创建一个数组，只用中括号（<code>[]</code>）的形式就行了</li></ul></li><li><p>使用中括号（<code>[]</code>）创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> daysOfWeek = [</span><br><span class="line">  <span class="string">&#x27;Sunday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Monday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Tuesday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Wednesday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Thursday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Friday&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Saturday&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组长度和遍历数组"><a href="#数组长度和遍历数组" class="headerlink" title="数组长度和遍历数组"></a>数组长度和遍历数组</h4><ul><li><p>如果我们希望获取数组的长度, 有一个 length 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组的长度</span></span><br><span class="line"><span class="title function_">alert</span>(daysOfWeek.<span class="property">length</span>)</span><br></pre></td></tr></table></figure></li><li><p>也可以通过下标值来遍历数组:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通for方式遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; daysOfWeek.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(daysOfWeek[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过foreach遍历数组</span></span><br><span class="line">daysOfWeek.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>我们来做一个练习:</p><ul><li>求菲波那切数列的前 20 个数字, 并且放在数组中.</li><li>菲波那切数列数列第一个数字是 1, 第二个数字也是 1, 第三项是前两项的和</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求菲波那切数列的前20个数字</span></span><br><span class="line"><span class="keyword">var</span> fibonacci = []</span><br><span class="line">fibonacci[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">fibonacci[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">  fibonacci[i] = fibonacci[i - <span class="number">1</span>] + fibonacci[i - <span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(fibonacci)</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h3><blockquote><p>数组中常见的操作有: 添加元素、删除元素、修改元素、获取元素.</p></blockquote><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul><li><p>JavaScript 中, 进行我们上述的操作都比较简单: 因为语言本身都已经封装好了这些特定.</p></li><li><p>假如我们有一个数组: numbers, 初始化 0~9</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化一个数组</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></li><li><p>添加一个元素到数组的最后位置:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加一个元素到数组的最后位置</span></span><br><span class="line"><span class="comment">// 方式一:</span></span><br><span class="line">numbers[numbers.<span class="property">length</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二:</span></span><br><span class="line">numbers.<span class="title function_">push</span>(<span class="number">11</span>)</span><br><span class="line">numbers.<span class="title function_">push</span>(<span class="number">12</span>, <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(numbers)</span><br></pre></td></tr></table></figure></li><li><p>在数组首位插入一个元素:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在数组首位插入一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = numbers.<span class="property">length</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">  numbers[i] = numbers[i - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">numbers[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line"><span class="title function_">alert</span>(numbers) <span class="comment">// -1,0,1,2,3,4,5,6,7,8,9,10,11,12,13</span></span><br></pre></td></tr></table></figure></li><li><p>上面代码实现的原理是怎样的呢?</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200707211141.png" alt="image-20200707211139946"></p><ul><li><p>考虑上面代码实现的性能怎么呢?</p><ul><li>性能并不算非常高</li><li>这也是数组和链表(后面我们会学习到)相对比的一个劣势: 在中间位置插入元素的效率比链表低.</li></ul></li><li><p>当然, 我们在数组首位插入数据可以直接使用 unshift 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过unshift在首位插入数据</span></span><br><span class="line">numbers.<span class="title function_">unshift</span>(-<span class="number">2</span>)</span><br><span class="line">numbers.<span class="title function_">unshift</span>(-<span class="number">4</span>, -<span class="number">3</span>)</span><br><span class="line"><span class="title function_">alert</span>(numbers) <span class="comment">// -4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul><li><p>如果希望删除数组最后的元素, 可以使用 pop()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除最后的元素</span></span><br><span class="line">numbers.<span class="title function_">pop</span>()</span><br><span class="line"><span class="title function_">alert</span>(numbers) <span class="comment">// -4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12</span></span><br></pre></td></tr></table></figure></li><li><p>如果我们希望移除的首位元素, 自己实现代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除首位的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  numbers[i] = numbers[i + <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">numbers.<span class="title function_">pop</span>()</span><br><span class="line"><span class="title function_">alert</span>(numbers)</span><br></pre></td></tr></table></figure></li><li><p>当然, 我们可以直接使用 shift 方法来实现:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers.<span class="title function_">shift</span>()</span><br><span class="line"><span class="title function_">alert</span>(numbers)</span><br></pre></td></tr></table></figure></li></ul><h4 id="任意位置"><a href="#任意位置" class="headerlink" title="任意位置"></a>任意位置</h4><ul><li><p>任意位置?</p><ul><li>前面我们学习的主要是在数组的开头和结尾处添加和删除数据.</li><li>那如果我们希望在数组的中间位置进行一些操作应该怎么办呢?</li></ul></li><li><p>一方面, 我们可以自己封装这样的函数, 但 JS 已经给我们提供了一个 splice 方法</p></li><li><p>通过 splice 删除数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除指定位置的几个元素</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="title function_">alert</span>(numbers) <span class="comment">// -4,-3,-2,-1,0,4,5,6,7,8,9,10,11,12,13</span></span><br></pre></td></tr></table></figure></li><li><p>代码解析:</p><ul><li>上面的代码会删除索引为 5, 6, 7 位置的元素.</li><li>第一个参数表示索引起始的位置为 5(其实是第 6 个元素, 因为索引从 0 开始的), 删除 3 个元素.</li></ul></li><li><p>如果我们希望使用 splice 来插入数据呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入指定位置元素</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="title function_">alert</span>(numbers) <span class="comment">// -4,-3,-2,-1,0,3,2,1,4,5,6,7,8,9,10,11,12,13</span></span><br></pre></td></tr></table></figure></li><li><p>代码解析:</p><ul><li>上面的代码会从索引为 5 的位置开始插入数据. 其他数据依次向后位移.</li><li>第一个参数依然是索引值为 5(第六个位置)</li><li>第二个参数为 0 时表示不是删除数据, 而是插入数据.</li><li>后面紧跟的是在这个位置要插入的数据, 可以是其他类型, 比如”a”, “b”, “c”.</li></ul></li><li><p>如果我们希望使用 splice 来修改数据呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改指定位置的元素</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">5</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="title function_">alert</span>(numbers) <span class="comment">// -4,-3,-2,-1,0,a,b,c,4,5,6,7,8,9,10,11,12,13</span></span><br></pre></td></tr></table></figure></li><li><p>代码解析:</p><ul><li>上面的代码会从索引 5 的位置开始修改数据, 修改多少个呢? 第二个参数来决定的.</li><li>第一个参数依然是索引的位置为 5(第六个位置)</li><li>第二个参数是要将数组中多少个元素给替换掉, 我们这里是 3 个(也可以使用 3 个元素来替换 2 个, 可以自己尝试一下)</li><li>后面跟着的就是要替换的元素.</li></ul></li></ul><h3 id="数组的其他操作"><a href="#数组的其他操作" class="headerlink" title="数组的其他操作"></a>数组的其他操作</h3><blockquote><p>上面学习的是对数组的一些基本操作.</p><p>JavaScript 中添加了很多方便操作数据的方法, 我们一些来简单回顾一下.</p></blockquote><h4 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h4><ul><li><p>我们先对常见的方法简单来看一下</p><table><thead><tr><th>方法名</th><th>方法描述</th></tr></thead><tbody><tr><td><code>concat</code></td><td>连接 2 个或更多数组，并返回结果</td></tr><tr><td><code>every</code></td><td>对数组中的每一项运行给定函数，如果该函数对每一项都返回 <code>true</code>，则返回<code>true</code>, 否则返回<code>false</code></td></tr><tr><td><code>filter</code></td><td>对数组中的每一项运行给定函数，返回该函数会返回 <code>true</code>的项组成的数组</td></tr><tr><td><code>forEach</code></td><td>对数组中的每一项运行给定函数。这个方法没有返回值</td></tr><tr><td><code>join</code></td><td>将所有的数组元素连接成一个字符串</td></tr><tr><td><code>indexOf</code></td><td>返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1</td></tr><tr><td><code>lastIndexOf</code></td><td>返回在数组中搜索到的与给定参数相等的元素的索引里最大的值</td></tr><tr><td><code>map</code></td><td>对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组</td></tr><tr><td><code>reverse</code></td><td>颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个</td></tr><tr><td><code>slice</code></td><td>传入索引值，将数组里对应索引范围内的元素作为新数组返回</td></tr><tr><td><code>some</code></td><td>对数组中的每一项运行给定函数，如果任一项返回 <code>true</code>，则结果为<code>true</code>, 并且迭代结束</td></tr><tr><td><code>sort</code></td><td>按照字母顺序对数组排序，支持传入指定排序方法的函数作为参数</td></tr><tr><td><code>toString</code></td><td>将数组作为字符串返回</td></tr><tr><td><code>valueOf</code></td><td>和 <code>toString</code>类似，将数组作为字符串返回</td></tr></tbody></table></li></ul><h4 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h4><ul><li><p>数组的合并非常简单, 使用 concat 即可(也可以直接+进行合并)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的合并</span></span><br><span class="line"><span class="keyword">var</span> nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> nums2 = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"><span class="keyword">var</span> newNums = nums1.<span class="title function_">concat</span>(nums2)</span><br><span class="line"><span class="title function_">alert</span>(newNums) <span class="comment">// 1,2,3,100,200,300</span></span><br><span class="line"></span><br><span class="line">newNums = nums1 + nums2</span><br><span class="line"><span class="title function_">alert</span>(newNums) <span class="comment">// 1,2,3,100,200,300</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h4><ul><li><p>为了方便操作数组, JS 提供了很多迭代器方法, 我们来回顾一下</p></li><li><p>every()方法</p><ul><li>every()方法是将数组中每一个元素传入到一个函数中, 该函数返回 true/false.</li><li>如果函数中每一个元素都返回 true, 那么结果为 true, 有一个为 false, 那么结果为 false</li></ul></li><li><p>every()练习:</p><ul><li>判断一组元素中是否都包含某一个字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cb&#x27;</span>, <span class="string">&#x27;mba&#x27;</span>, <span class="string">&#x27;dna&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断数组的元素是否都包含a字符</span></span><br><span class="line"><span class="keyword">var</span> flag = names.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> t.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>) != -<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">alert</span>(flag)</span><br></pre></td></tr></table></figure></li><li><p>some()方法</p><ul><li>some()方法是将数组中每一个元素传入到一个函数中, 该函数返回 true/false</li><li>但是和 every 不同的是, 一旦有一次函数返回了 true, 那么迭代就会结束. 并且结果为 true</li></ul></li><li><p>some()练习</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cb&#x27;</span>, <span class="string">&#x27;mba&#x27;</span>, <span class="string">&#x27;dna&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断数组中是否包含有a字符的字符</span></span><br><span class="line"><span class="keyword">var</span> flag = names.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">t</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(t)</span><br><span class="line">  <span class="keyword">return</span> t.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>) != -<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">alert</span>(flag)</span><br></pre></td></tr></table></figure></li><li><p>forEach()方法</p><ul><li>forEach()方法仅仅是一种快速迭代数组的方式而已.</li><li>该方法不需要返回值</li></ul></li><li><p>forEach 的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cb&#x27;</span>, <span class="string">&#x27;mba&#x27;</span>, <span class="string">&#x27;dna&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach的使用</span></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">t</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(t)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>filter()方法</p><ul><li>filter()方法是一种过滤的函数</li><li>首先会遍历数组中每一个元素传入到函数中</li><li>函数的结果返回 true, 那么这个元素会被添加到最新的数组中, 返回 false, 则忽略该元素.</li><li>最终会形成一个新的数组, 该数组就是 filter()方法的返回值</li></ul></li><li><p>filter()的练习:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cb&#x27;</span>, <span class="string">&#x27;mba&#x27;</span>, <span class="string">&#x27;dna&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取names中所有包含&#x27;a&#x27;字符的元素</span></span><br><span class="line"><span class="keyword">var</span> newNames = names.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> t.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>) != -<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">alert</span>(newNames)</span><br></pre></td></tr></table></figure></li><li><p>map()方法</p><ul><li>map()方法提供的是一种映射函数.</li><li>首先会遍历数组中每一个元素传入到函数中.</li><li>元素会经过函数中的指令进行各种变换, 生成新的元素, 并且将新的元素返回.</li><li>最终会将返回的所有元素形成一个新的数组, 该数组就是 map()方法的返回值</li></ul></li><li><p>map()练习:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cb&#x27;</span>, <span class="string">&#x27;mba&#x27;</span>, <span class="string">&#x27;dna&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在names中所有的元素后面拼接-abc</span></span><br><span class="line"><span class="keyword">var</span> newNames = names.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> t + <span class="string">&#x27;-abc&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">alert</span>(newNames)</span><br></pre></td></tr></table></figure></li></ul><h4 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce 方法"></a>reduce 方法</h4><ul><li><p>我们单独拿出 reduce 方法, 因为这个方法相对来说难理解一点</p></li><li><p>首先, 我们来看这个方法需要的参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(callback[, initialValue])</span><br></pre></td></tr></table></figure></li><li><p>参数</p><ul><li>callback（一个在数组中每一项上调用的函数，接受四个函数：）<ul><li>previousValue（上一次调用回调函数时的返回值，或者初始值）</li><li>currentValue（当前正在处理的数组元素）</li><li>currentIndex（当前正在处理的数组元素下标）</li><li>array（调用 reduce()方法的数组）</li></ul></li><li>initialValue（可选的初始值。作为第一次调用回调函数时传给 previousValue 的值）</li></ul></li><li><p>有些晦涩难懂, 我们直接看例子</p><ul><li>求一个数字中数字的累加和</li></ul></li><li><p>使用 for 实现:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义数组</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.for实现累加</span></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  total += numbers[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(total) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li><li><p>使用 forEach 简化 for 循环</p><ul><li>相对于 for 循环, forEach 更符合我们的思维(遍历数组中的元素)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.使用forEach</span></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">t</span>) &#123;</span><br><span class="line">  total += t</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">alert</span>(total)</span><br></pre></td></tr></table></figure></li><li><p>使用 reduce 方法实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.使用reduce方法</span></span><br><span class="line"><span class="keyword">var</span> total = numbers.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">pre, cur</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> pre + cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">alert</span>(total)</span><br></pre></td></tr></table></figure></li><li><p>代码解析:</p><ul><li>pre 中每次传入的参数是不固定的, 而是上次执行函数时的结果保存在了 pre 中</li><li>第一次执行时, pre 为 0, cur 为 1</li><li>第二次执行时, pre 为 1 (0+1, 上次函数执行的结果), cur 为 2</li><li>第三次执行时, pre 为 3 (1+2, 上次函数执行的结果), cur 为 3</li><li>第四次执行时, pre 为 6 (3+3, 上次函数执行的结果), cur 为 4</li><li>当 cur 为 4 时, 数组中的元素遍历完了, 就直接将第四次的结果, 作为 reduce 函数的返回值进行返回.</li></ul></li><li><p>似乎和 forEach 比较没有太大的优势呢?</p><ul><li>通过这个代码你会发现, 你不需要在调用函数前先定义一个变量, 只需要一个变量来接收方法最终的参数即可.</li><li>但是这就是优势吗? 不是, 优势在于 reduce 方法有返回值, 而 forEach 没有.</li><li>这算什么优势? 如果 reduce 方法有返回值, 那么 reduce 方法本身就可以作为参数直接传递给另外一个需要 reduce 返回值的作为参数的函数. 而 forEach 中你只能先将每次函数的结果保存在一个变量, 最后再将变量传入到参数中.</li><li>没错, 这就是最近非常流行的函数式编程. 也是为了几乎每个可以使用函数式编程的语言都有 reduce 这个方法的原因.</li><li>关于函数式编程, 不再本次课程的讨论之中, 只是看到了这个函数, 给大家延伸了一下而已.(后面有机会和大家分享函数式编程)</li></ul></li><li><p>initialValue 还需要讲吗?</p><ul><li>其实就是第一次执行 reduce 中的函数时, pre 的值.</li><li>因为默认 pre 第一次执行时为 0.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加emoji表情支持</title>
      <link href="/archives/f36eea83.html"/>
      <url>/archives/f36eea83.html</url>
      
        <content type="html"><![CDATA[<p>Hexo 默认的 markdown 渲染引擎不支持将 Github emoji 渲染到静态的 html 页面中，我们换一个支持 emoji 的引擎，再增加一个 emoji 插件即可.</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>命令行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked</span><br><span class="line">npm install hexo-renderer-markdown-it --save</span><br><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure><p>Tips：据说 <a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a> 的速度要比 Hexo 原装插件要快，而且功能更多</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>完成插件安装后还需要修改 Hexo 站点配置文件 <code>_config.yml</code>（不是主题配置哦）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## markdown 渲染引擎配置，默认是hexo-renderer-marked，这个插件渲染速度更快，且有新特性</span><br><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    html: true</span><br><span class="line">    xhtmlOut: false</span><br><span class="line">    breaks: true</span><br><span class="line">    linkify: true</span><br><span class="line">    typographer: true</span><br><span class="line">    quotes: &#x27;“”‘’&#x27;</span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-emoji</span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: &#x27;v&#x27;</span><br><span class="line">    permalink: true  ## 永久连接</span><br><span class="line">    permalinkClass: &#x27;header-anchor&#x27;</span><br><span class="line">    permalinkSymbol: &#x27;¶&#x27;</span><br></pre></td></tr></table></figure><p>这里需要注意 <code>render</code> 下的 <code>html</code> 配置项，它的作用是控制 <code>Markdown</code> 渲染引擎是否转义文档中出现的 <code>html</code> 标签，默认为 <code>false</code> ，这里要设置为 <code>true</code>，否则会导致 `` 渲染失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html: true # 不转义 HTML 内容，即允许 HTML</span><br><span class="line">    ## OR</span><br><span class="line">html: false # 转义 HTML，&lt; &gt; 尖括号会被转义成 &amp;lt; &amp;gt;等</span><br></pre></td></tr></table></figure><p><code>plugins:</code> 中的最后一项 <code>- markdown-it-emoji</code> 是手动添加的，官方 Github Wiki 中给出的配置不包含这一项，其他配置参照的 Github Wiki 中的默认配置，hexo-renderer-markdown-it 提供的其他新特性还没有一一尝试，暂时只想用它的 emoji 功能。✌️</p><div class="note danger flat"><p>上面的方法有个问题就是会导致有些东西解析失败比如：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200520202340.png" alt="image-20200520202332978"></p><p>所以我们可以采用另外一个插件：<a href="https://github.com/next-theme/hexo-filter-emoji">hexo-filter-emoji</a></p></div><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>采用另外一个插件：<a href="https://github.com/next-theme/hexo-filter-emoji">hexo-filter-emoji</a> 。我们只需要安装这一个插件就好了，渲染的话，还是采用默认的渲染引擎。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-emoji</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在站点配置文件 <code>.config.yml</code> 中增加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">emoji:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>输入对应的 emoji 编码就行了，这个是两种方法都通用的<br>例如：输入笑脸对应的 emoji 编码 <code>:smile:</code>就可以得到 😄</p><h3 id="方法二额外的用法："><a href="#方法二额外的用法：" class="headerlink" title="方法二额外的用法："></a>方法二额外的用法：</h3><p>如果你不喜欢 <code>::</code> 这种方法，你还可以这样采用<code>tags</code>的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% emoji sparkles %&#125;</span><br></pre></td></tr></table></figure><p>为了避免有时候 <code>::</code> 带来的解析问题，我们可以在 <code>front-matter</code> 中添加 <code>no-emoji: true</code> 来禁用 <code>::</code> 的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">no-emoji: true</span><br><span class="line">---</span><br><span class="line">:tada: as it is.</span><br><span class="line">&#123;% emoji tada %&#125; still works.</span><br></pre></td></tr></table></figure><p>这样的话 <code>::</code>的方式就不会被解析出来，但是第二种方法（tags）仍然可以工作</p><h2 id="emoji-编码合集"><a href="#emoji-编码合集" class="headerlink" title="emoji 编码合集"></a>emoji 编码合集</h2><p>你也可以点击这里进行查看： <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">EMOJI CHEAT SHEET</a></p><h3 id="People"><a href="#People" class="headerlink" title="People"></a>People</h3><table><thead><tr><th align="left">😐 <code>:neutral_face:</code></th><th align="left">😄 <code>:smile:</code></th><th align="left">😆 <code>:laughing:</code></th></tr></thead><tbody><tr><td align="left">😊 <code>:blush:</code></td><td align="left">😃 <code>:smiley:</code></td><td align="left">☺️ <code>:relaxed:</code></td></tr><tr><td align="left">😏 <code>:smirk:</code></td><td align="left">😍 <code>:heart_eyes:</code></td><td align="left">😘 <code>:kissing_heart:</code></td></tr><tr><td align="left">😚 <code>:kissing_closed_eyes:</code></td><td align="left">😳 <code>:flushed:</code></td><td align="left">😌 <code>:relieved:</code></td></tr><tr><td align="left">😆 <code>:satisfied:</code></td><td align="left">😁 <code>:grin:</code></td><td align="left">😉 <code>:wink:</code></td></tr><tr><td align="left">😜 <code>:stuck_out_tongue_winking_eye:</code></td><td align="left">😝 <code>:stuck_out_tongue_closed_eyes:</code></td><td align="left">😀 <code>:grinning:</code></td></tr><tr><td align="left">😗 <code>:kissing:</code></td><td align="left">😙 <code>:kissing_smiling_eyes:</code></td><td align="left">😛 <code>:stuck_out_tongue:</code></td></tr><tr><td align="left">😴 <code>:sleeping:</code></td><td align="left">😟 <code>:worried:</code></td><td align="left">😦 <code>:frowning:</code></td></tr><tr><td align="left">😧 <code>:anguished:</code></td><td align="left">😮 <code>:open_mouth:</code></td><td align="left">😬 <code>:grimacing:</code></td></tr><tr><td align="left">😕 <code>:confused:</code></td><td align="left">😯 <code>:hushed:</code></td><td align="left">😑 <code>:expressionless:</code></td></tr><tr><td align="left">😒 <code>:unamused:</code></td><td align="left">😅 <code>:sweat_smile:</code></td><td align="left">😓 <code>:sweat:</code></td></tr><tr><td align="left">😥 <code>:disappointed_relieved:</code></td><td align="left">😩 <code>:weary:</code></td><td align="left">😔 <code>:pensive:</code></td></tr><tr><td align="left">😞 <code>:disappointed:</code></td><td align="left">😖 <code>:confounded:</code></td><td align="left">😨 <code>:fearful:</code></td></tr><tr><td align="left">😰 <code>:cold_sweat:</code></td><td align="left">😣 <code>:persevere:</code></td><td align="left">😢 <code>:cry:</code></td></tr><tr><td align="left">😭 <code>:sob:</code></td><td align="left">😂 <code>:joy:</code></td><td align="left">😲 <code>:astonished:</code></td></tr><tr><td align="left">😱 <code>:scream:</code></td><td align="left">💭 <code>:thought_balloon:</code></td><td align="left">😫 <code>:tired_face:</code></td></tr><tr><td align="left">😠 <code>:angry:</code></td><td align="left">😡 <code>:rage:</code></td><td align="left">😤 <code>:triumph:</code></td></tr><tr><td align="left">😪 <code>:sleepy:</code></td><td align="left">😋 <code>:yum:</code></td><td align="left">😷 <code>:mask:</code></td></tr><tr><td align="left">😎 <code>:sunglasses:</code></td><td align="left">😵 <code>:dizzy_face:</code></td><td align="left">👿 <code>:imp:</code></td></tr><tr><td align="left">😈 <code>:smiling_imp:</code></td><td align="left">💬 <code>:speech_balloon:</code></td><td align="left">😶 <code>:no_mouth:</code></td></tr><tr><td align="left">😇 <code>:innocent:</code></td><td align="left">👽 <code>:alien:</code></td><td align="left">💛 <code>:yellow_heart:</code></td></tr><tr><td align="left">💙 <code>:blue_heart:</code></td><td align="left">💜 <code>:purple_heart:</code></td><td align="left">❤️ <code>:heart:</code></td></tr><tr><td align="left">💚 <code>:green_heart:</code></td><td align="left">💔 <code>:broken_heart:</code></td><td align="left">💓 <code>:heartbeat:</code></td></tr><tr><td align="left">💗 <code>:heartpulse:</code></td><td align="left">💕 <code>:two_hearts:</code></td><td align="left">💞 <code>:revolving_hearts:</code></td></tr><tr><td align="left">💘 <code>:cupid:</code></td><td align="left">💖 <code>:sparkling_heart:</code></td><td align="left">✨ <code>:sparkles:</code></td></tr><tr><td align="left">⭐️ <code>:star:</code></td><td align="left">🌟 <code>:star2:</code></td><td align="left">💫 <code>:dizzy:</code></td></tr><tr><td align="left">💥 <code>:boom:</code></td><td align="left">💥 <code>:collision:</code></td><td align="left">💢 <code>:anger:</code></td></tr><tr><td align="left">❗️ <code>:exclamation:</code></td><td align="left">❓ <code>:question:</code></td><td align="left">❕ <code>:grey_exclamation:</code></td></tr><tr><td align="left">❔ <code>:grey_question:</code></td><td align="left">💤 <code>:zzz:</code></td><td align="left">💨 <code>:dash:</code></td></tr><tr><td align="left">💦 <code>:sweat_drops:</code></td><td align="left">🎶 <code>:notes:</code></td><td align="left">🎵 <code>:musical_note:</code></td></tr><tr><td align="left">🔥 <code>:fire:</code></td><td align="left">💩 <code>:hankey:</code></td><td align="left">💩 <code>:poop:</code></td></tr><tr><td align="left">💩 <code>:shit:</code></td><td align="left">👍 <code>:+1:</code></td><td align="left">👍 <code>:thumbsup:</code></td></tr><tr><td align="left">👎 <code>:-1:</code></td><td align="left">👎 <code>:thumbsdown:</code></td><td align="left">👌 <code>:ok_hand:</code></td></tr><tr><td align="left">👊 <code>:punch:</code></td><td align="left">👊 <code>:facepunch:</code></td><td align="left">✊ <code>:fist:</code></td></tr><tr><td align="left">✌️ <code>:v:</code></td><td align="left">👋 <code>:wave:</code></td><td align="left">✋ <code>:hand:</code></td></tr><tr><td align="left">✋ <code>:raised_hand:</code></td><td align="left">👐 <code>:open_hands:</code></td><td align="left">☝️ <code>:point_up:</code></td></tr><tr><td align="left">👇 <code>:point_down:</code></td><td align="left">👈 <code>:point_left:</code></td><td align="left">👉 <code>:point_right:</code></td></tr><tr><td align="left">🙌 <code>:raised_hands:</code></td><td align="left">🙏 <code>:pray:</code></td><td align="left">👆 <code>:point_up_2:</code></td></tr><tr><td align="left">👏 <code>:clap:</code></td><td align="left">💪 <code>:muscle:</code></td><td align="left">🤘 <code>:metal:</code></td></tr><tr><td align="left">🖕 <code>:fu:</code></td><td align="left">🚶 <code>:walking:</code></td><td align="left">🏃 <code>:runner:</code></td></tr><tr><td align="left">🏃 <code>:running:</code></td><td align="left">👫 <code>:couple:</code></td><td align="left">👪 <code>:family:</code></td></tr><tr><td align="left">👬 <code>:two_men_holding_hands:</code></td><td align="left">👭 <code>:two_women_holding_hands:</code></td><td align="left">💃 <code>:dancer:</code></td></tr><tr><td align="left">👯 <code>:dancers:</code></td><td align="left">🙆 <code>:ok_woman:</code></td><td align="left">🙅 <code>:no_good:</code></td></tr><tr><td align="left">💁 <code>:information_desk_person:</code></td><td align="left">🙋 <code>:raising_hand:</code></td><td align="left">👰 <code>:bride_with_veil:</code></td></tr><tr><td align="left">🙎 <code>:person_with_pouting_face:</code></td><td align="left">🙍 <code>:person_frowning:</code></td><td align="left">🙇 <code>:bow:</code></td></tr><tr><td align="left">:couplekiss: <code>:couplekiss:</code></td><td align="left">💑 <code>:couple_with_heart:</code></td><td align="left">💆 <code>:massage:</code></td></tr><tr><td align="left">💇 <code>:haircut:</code></td><td align="left">💅 <code>:nail_care:</code></td><td align="left">👦 <code>:boy:</code></td></tr><tr><td align="left">👧 <code>:girl:</code></td><td align="left">👩 <code>:woman:</code></td><td align="left">👨 <code>:man:</code></td></tr><tr><td align="left">👶 <code>:baby:</code></td><td align="left">👵 <code>:older_woman:</code></td><td align="left">👴 <code>:older_man:</code></td></tr><tr><td align="left">👱 <code>:person_with_blond_hair:</code></td><td align="left">👲 <code>:man_with_gua_pi_mao:</code></td><td align="left">👳 <code>:man_with_turban:</code></td></tr><tr><td align="left">👷 <code>:construction_worker:</code></td><td align="left">👮 <code>:cop:</code></td><td align="left">👼 <code>:angel:</code></td></tr><tr><td align="left">👸 <code>:princess:</code></td><td align="left">😺 <code>:smiley_cat:</code></td><td align="left">😸 <code>:smile_cat:</code></td></tr><tr><td align="left">😻 <code>:heart_eyes_cat:</code></td><td align="left">😽 <code>:kissing_cat:</code></td><td align="left">😼 <code>:smirk_cat:</code></td></tr><tr><td align="left">🙀 <code>:scream_cat:</code></td><td align="left">😿 <code>:crying_cat_face:</code></td><td align="left">😹 <code>:joy_cat:</code></td></tr><tr><td align="left">😾 <code>:pouting_cat:</code></td><td align="left">👹 <code>:japanese_ogre:</code></td><td align="left">👺 <code>:japanese_goblin:</code></td></tr><tr><td align="left">🙈 <code>:see_no_evil:</code></td><td align="left">🙉 <code>:hear_no_evil:</code></td><td align="left">🙊 <code>:speak_no_evil:</code></td></tr><tr><td align="left">💂 <code>:guardsman:</code></td><td align="left">💀 <code>:skull:</code></td><td align="left">🐾 <code>:feet:</code></td></tr><tr><td align="left">👄 <code>:lips:</code></td><td align="left">💋 <code>:kiss:</code></td><td align="left">💧 <code>:droplet:</code></td></tr><tr><td align="left">👂 <code>:ear:</code></td><td align="left">👀 <code>:eyes:</code></td><td align="left">👃 <code>:nose:</code></td></tr><tr><td align="left">👅 <code>:tongue:</code></td><td align="left">💌 <code>:love_letter:</code></td><td align="left">👤 <code>:bust_in_silhouette:</code></td></tr><tr><td align="left">👥 <code>:busts_in_silhouette:</code></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="Nature"><a href="#Nature" class="headerlink" title="Nature"></a>Nature</h3><table><thead><tr><th align="left">☀️ <code>:sunny:</code></th><th align="left">☔️ <code>:umbrella:</code></th><th align="left">☁️ <code>:cloud:</code></th></tr></thead><tbody><tr><td align="left">❄️ <code>:snowflake:</code></td><td align="left">⛄️ <code>:snowman:</code></td><td align="left">⚡️ <code>:zap:</code></td></tr><tr><td align="left">🌀 <code>:cyclone:</code></td><td align="left">🌁 <code>:foggy:</code></td><td align="left">🌊 <code>:ocean:</code></td></tr><tr><td align="left">🐱 <code>:cat:</code></td><td align="left">🐶 <code>:dog:</code></td><td align="left">🐭 <code>:mouse:</code></td></tr><tr><td align="left">🐹 <code>:hamster:</code></td><td align="left">🐰 <code>:rabbit:</code></td><td align="left">🐺 <code>:wolf:</code></td></tr><tr><td align="left">🐸 <code>:frog:</code></td><td align="left">🐯 <code>:tiger:</code></td><td align="left">🐨 <code>:koala:</code></td></tr><tr><td align="left">🐻 <code>:bear:</code></td><td align="left">🐷 <code>:pig:</code></td><td align="left">🐽 <code>:pig_nose:</code></td></tr><tr><td align="left">🐮 <code>:cow:</code></td><td align="left">🐗 <code>:boar:</code></td><td align="left">🐵 <code>:monkey_face:</code></td></tr><tr><td align="left">🐒 <code>:monkey:</code></td><td align="left">🐴 <code>:horse:</code></td><td align="left">🐎 <code>:racehorse:</code></td></tr><tr><td align="left">🐫 <code>:camel:</code></td><td align="left">🐑 <code>:sheep:</code></td><td align="left">🐘 <code>:elephant:</code></td></tr><tr><td align="left">🐼 <code>:panda_face:</code></td><td align="left">🐍 <code>:snake:</code></td><td align="left">🐦 <code>:bird:</code></td></tr><tr><td align="left">🐤 <code>:baby_chick:</code></td><td align="left">🐥 <code>:hatched_chick:</code></td><td align="left">🐣 <code>:hatching_chick:</code></td></tr><tr><td align="left">🐔 <code>:chicken:</code></td><td align="left">🐧 <code>:penguin:</code></td><td align="left">🐢 <code>:turtle:</code></td></tr><tr><td align="left">🐛 <code>:bug:</code></td><td align="left">🐝 <code>:honeybee:</code></td><td align="left">🐜 <code>:ant:</code></td></tr><tr><td align="left">🐞 <code>:beetle:</code></td><td align="left">🐌 <code>:snail:</code></td><td align="left">🐙 <code>:octopus:</code></td></tr><tr><td align="left">🐠 <code>:tropical_fish:</code></td><td align="left">🐟 <code>:fish:</code></td><td align="left">🐳 <code>:whale:</code></td></tr><tr><td align="left">🐋 <code>:whale2:</code></td><td align="left">🐬 <code>:dolphin:</code></td><td align="left">🐄 <code>:cow2:</code></td></tr><tr><td align="left">🐏 <code>:ram:</code></td><td align="left">🐀 <code>:rat:</code></td><td align="left">🐃 <code>:water_buffalo:</code></td></tr><tr><td align="left">🐅 <code>:tiger2:</code></td><td align="left">🐇 <code>:rabbit2:</code></td><td align="left">🐉 <code>:dragon:</code></td></tr><tr><td align="left">🐐 <code>:goat:</code></td><td align="left">🐓 <code>:rooster:</code></td><td align="left">🐕 <code>:dog2:</code></td></tr><tr><td align="left">🐖 <code>:pig2:</code></td><td align="left">🐁 <code>:mouse2:</code></td><td align="left">🐂 <code>:ox:</code></td></tr><tr><td align="left">🐲 <code>:dragon_face:</code></td><td align="left">🐡 <code>:blowfish:</code></td><td align="left">🐊 <code>:crocodile:</code></td></tr><tr><td align="left">🐪 <code>:dromedary_camel:</code></td><td align="left">🐆 <code>:leopard:</code></td><td align="left">🐈 <code>:cat2:</code></td></tr><tr><td align="left">🐩 <code>:poodle:</code></td><td align="left">🐾 <code>:paw_prints:</code></td><td align="left">💐 <code>:bouquet:</code></td></tr><tr><td align="left">🌸 <code>:cherry_blossom:</code></td><td align="left">🌷 <code>:tulip:</code></td><td align="left">🍀 <code>:four_leaf_clover:</code></td></tr><tr><td align="left">🌹 <code>:rose:</code></td><td align="left">🌻 <code>:sunflower:</code></td><td align="left">🌺 <code>:hibiscus:</code></td></tr><tr><td align="left">🍁 <code>:maple_leaf:</code></td><td align="left">🍃 <code>:leaves:</code></td><td align="left">🍂 <code>:fallen_leaf:</code></td></tr><tr><td align="left">🌿 <code>:herb:</code></td><td align="left">🍄 <code>:mushroom:</code></td><td align="left">🌵 <code>:cactus:</code></td></tr><tr><td align="left">🌴 <code>:palm_tree:</code></td><td align="left">🌲 <code>:evergreen_tree:</code></td><td align="left">🌳 <code>:deciduous_tree:</code></td></tr><tr><td align="left">🌰 <code>:chestnut:</code></td><td align="left">🌱 <code>:seedling:</code></td><td align="left">🌼 <code>:blossom:</code></td></tr><tr><td align="left">🌾 <code>:ear_of_rice:</code></td><td align="left">🐚 <code>:shell:</code></td><td align="left">🌐 <code>:globe_with_meridians:</code></td></tr><tr><td align="left">🌞 <code>:sun_with_face:</code></td><td align="left">🌝 <code>:full_moon_with_face:</code></td><td align="left">🌚 <code>:new_moon_with_face:</code></td></tr><tr><td align="left">🌑 <code>:new_moon:</code></td><td align="left">🌒 <code>:waxing_crescent_moon:</code></td><td align="left">🌓 <code>:first_quarter_moon:</code></td></tr><tr><td align="left">🌔 <code>:waxing_gibbous_moon:</code></td><td align="left">🌕 <code>:full_moon:</code></td><td align="left">🌖 <code>:waning_gibbous_moon:</code></td></tr><tr><td align="left">🌗 <code>:last_quarter_moon:</code></td><td align="left">🌘 <code>:waning_crescent_moon:</code></td><td align="left">🌜 <code>:last_quarter_moon_with_face:</code></td></tr><tr><td align="left">🌛 <code>:first_quarter_moon_with_face:</code></td><td align="left">🌔 <code>:moon:</code></td><td align="left">🌍 <code>:earth_africa:</code></td></tr><tr><td align="left">🌎 <code>:earth_americas:</code></td><td align="left">🌏 <code>:earth_asia:</code></td><td align="left">🌋 <code>:volcano:</code></td></tr><tr><td align="left">🌌 <code>:milky_way:</code></td><td align="left">⛅️ <code>:partly_sunny:</code></td><td align="left"></td></tr></tbody></table><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><table><thead><tr><th align="left">🎍 <code>:bamboo:</code></th><th align="left">💝 <code>:gift_heart:</code></th><th align="left">🎎 <code>:dolls:</code></th></tr></thead><tbody><tr><td align="left">🎒 <code>:school_satchel:</code></td><td align="left">🎓 <code>:mortar_board:</code></td><td align="left">🎏 <code>:flags:</code></td></tr><tr><td align="left">🎆 <code>:fireworks:</code></td><td align="left">🎇 <code>:sparkler:</code></td><td align="left">🎐 <code>:wind_chime:</code></td></tr><tr><td align="left">🎑 <code>:rice_scene:</code></td><td align="left">🎃 <code>:jack_o_lantern:</code></td><td align="left">👻 <code>:ghost:</code></td></tr><tr><td align="left">🎅 <code>:santa:</code></td><td align="left">🎄 <code>:christmas_tree:</code></td><td align="left">🎁 <code>:gift:</code></td></tr><tr><td align="left">🔔 <code>:bell:</code></td><td align="left">🔕 <code>:no_bell:</code></td><td align="left">🎋 <code>:tanabata_tree:</code></td></tr><tr><td align="left">🎉 <code>:tada:</code></td><td align="left">🎊 <code>:confetti_ball:</code></td><td align="left">🎈 <code>:balloon:</code></td></tr><tr><td align="left">🔮 <code>:crystal_ball:</code></td><td align="left">💿 <code>:cd:</code></td><td align="left">📀 <code>:dvd:</code></td></tr><tr><td align="left">💾 <code>:floppy_disk:</code></td><td align="left">📷 <code>:camera:</code></td><td align="left">📹 <code>:video_camera:</code></td></tr><tr><td align="left">🎥 <code>:movie_camera:</code></td><td align="left">💻 <code>:computer:</code></td><td align="left">📺 <code>:tv:</code></td></tr><tr><td align="left">📱 <code>:iphone:</code></td><td align="left">☎️ <code>:phone:</code></td><td align="left">☎️ <code>:telephone:</code></td></tr><tr><td align="left">📞 <code>:telephone_receiver:</code></td><td align="left">📟 <code>:pager:</code></td><td align="left">📠 <code>:fax:</code></td></tr><tr><td align="left">💽 <code>:minidisc:</code></td><td align="left">📼 <code>:vhs:</code></td><td align="left">🔉 <code>:sound:</code></td></tr><tr><td align="left">🔈 <code>:speaker:</code></td><td align="left">🔇 <code>:mute:</code></td><td align="left">📢 <code>:loudspeaker:</code></td></tr><tr><td align="left">📣 <code>:mega:</code></td><td align="left">⌛️ <code>:hourglass:</code></td><td align="left">⏳ <code>:hourglass_flowing_sand:</code></td></tr><tr><td align="left">⏰ <code>:alarm_clock:</code></td><td align="left">⌚️ <code>:watch:</code></td><td align="left">📻 <code>:radio:</code></td></tr><tr><td align="left">📡 <code>:satellite:</code></td><td align="left">➿ <code>:loop:</code></td><td align="left">🔍 <code>:mag:</code></td></tr><tr><td align="left">🔎 <code>:mag_right:</code></td><td align="left">🔓 <code>:unlock:</code></td><td align="left">🔒 <code>:lock:</code></td></tr><tr><td align="left">🔏 <code>:lock_with_ink_pen:</code></td><td align="left">🔐 <code>:closed_lock_with_key:</code></td><td align="left">🔑 <code>:key:</code></td></tr><tr><td align="left">💡 <code>:bulb:</code></td><td align="left">🔦 <code>:flashlight:</code></td><td align="left">🔆 <code>:high_brightness:</code></td></tr><tr><td align="left">🔅 <code>:low_brightness:</code></td><td align="left">🔌 <code>:electric_plug:</code></td><td align="left">🔋 <code>:battery:</code></td></tr><tr><td align="left">📲 <code>:calling:</code></td><td align="left">✉️ <code>:email:</code></td><td align="left">📫 <code>:mailbox:</code></td></tr><tr><td align="left">📮 <code>:postbox:</code></td><td align="left">🛀 <code>:bath:</code></td><td align="left">🛁 <code>:bathtub:</code></td></tr><tr><td align="left">🚿 <code>:shower:</code></td><td align="left">🚽 <code>:toilet:</code></td><td align="left">🔧 <code>:wrench:</code></td></tr><tr><td align="left">🔩 <code>:nut_and_bolt:</code></td><td align="left">🔨 <code>:hammer:</code></td><td align="left">💺 <code>:seat:</code></td></tr><tr><td align="left">💰 <code>:moneybag:</code></td><td align="left">💴 <code>:yen:</code></td><td align="left">💵 <code>:dollar:</code></td></tr><tr><td align="left">💷 <code>:pound:</code></td><td align="left">💶 <code>:euro:</code></td><td align="left">💳 <code>:credit_card:</code></td></tr><tr><td align="left">💸 <code>:money_with_wings:</code></td><td align="left">📧 <code>:e-mail:</code></td><td align="left">📥 <code>:inbox_tray:</code></td></tr><tr><td align="left">📤 <code>:outbox_tray:</code></td><td align="left">✉️ <code>:envelope:</code></td><td align="left">📨 <code>:incoming_envelope:</code></td></tr><tr><td align="left">📯 <code>:postal_horn:</code></td><td align="left">📪 <code>:mailbox_closed:</code></td><td align="left">📬 <code>:mailbox_with_mail:</code></td></tr><tr><td align="left">📭 <code>:mailbox_with_no_mail:</code></td><td align="left">🚪 <code>:door:</code></td><td align="left">🚬 <code>:smoking:</code></td></tr><tr><td align="left">💣 <code>:bomb:</code></td><td align="left">🔫 <code>:gun:</code></td><td align="left">🔪 <code>:hocho:</code></td></tr><tr><td align="left">💊 <code>:pill:</code></td><td align="left">💉 <code>:syringe:</code></td><td align="left">📄 <code>:page_facing_up:</code></td></tr><tr><td align="left">📃 <code>:page_with_curl:</code></td><td align="left">📑 <code>:bookmark_tabs:</code></td><td align="left">📊 <code>:bar_chart:</code></td></tr><tr><td align="left">📈 <code>:chart_with_upwards_trend:</code></td><td align="left">📉 <code>:chart_with_downwards_trend:</code></td><td align="left">📜 <code>:scroll:</code></td></tr><tr><td align="left">📋 <code>:clipboard:</code></td><td align="left">📆 <code>:calendar:</code></td><td align="left">📅 <code>:date:</code></td></tr><tr><td align="left">📇 <code>:card_index:</code></td><td align="left">📁 <code>:file_folder:</code></td><td align="left">📂 <code>:open_file_folder:</code></td></tr><tr><td align="left">✂️ <code>:scissors:</code></td><td align="left">📌 <code>:pushpin:</code></td><td align="left">📎 <code>:paperclip:</code></td></tr><tr><td align="left">✒️ <code>:black_nib:</code></td><td align="left">✏️ <code>:pencil2:</code></td><td align="left">📏 <code>:straight_ruler:</code></td></tr><tr><td align="left">📐 <code>:triangular_ruler:</code></td><td align="left">📕 <code>:closed_book:</code></td><td align="left">📗 <code>:green_book:</code></td></tr><tr><td align="left">📘 <code>:blue_book:</code></td><td align="left">📙 <code>:orange_book:</code></td><td align="left">📓 <code>:notebook:</code></td></tr><tr><td align="left">📔 <code>:notebook_with_decorative_cover:</code></td><td align="left">📒 <code>:ledger:</code></td><td align="left">📚 <code>:books:</code></td></tr><tr><td align="left">🔖 <code>:bookmark:</code></td><td align="left">📛 <code>:name_badge:</code></td><td align="left">🔬 <code>:microscope:</code></td></tr><tr><td align="left">🔭 <code>:telescope:</code></td><td align="left">📰 <code>:newspaper:</code></td><td align="left">🏈 <code>:football:</code></td></tr><tr><td align="left">🏀 <code>:basketball:</code></td><td align="left">⚽️ <code>:soccer:</code></td><td align="left">⚾️ <code>:baseball:</code></td></tr><tr><td align="left">🎾 <code>:tennis:</code></td><td align="left">🎱 <code>:8ball:</code></td><td align="left">🏉 <code>:rugby_football:</code></td></tr><tr><td align="left">🎳 <code>:bowling:</code></td><td align="left">⛳️ <code>:golf:</code></td><td align="left">🚵 <code>:mountain_bicyclist:</code></td></tr><tr><td align="left">🚴 <code>:bicyclist:</code></td><td align="left">🏇 <code>:horse_racing:</code></td><td align="left">🏂 <code>:snowboarder:</code></td></tr><tr><td align="left">🏊 <code>:swimmer:</code></td><td align="left">🏄 <code>:surfer:</code></td><td align="left">🎿 <code>:ski:</code></td></tr><tr><td align="left">♠️ <code>:spades:</code></td><td align="left">♥️ <code>:hearts:</code></td><td align="left">♣️ <code>:clubs:</code></td></tr><tr><td align="left">♦️ <code>:diamonds:</code></td><td align="left">💎 <code>:gem:</code></td><td align="left">💍 <code>:ring:</code></td></tr><tr><td align="left">🏆 <code>:trophy:</code></td><td align="left">🎼 <code>:musical_score:</code></td><td align="left">🎹 <code>:musical_keyboard:</code></td></tr><tr><td align="left">🎻 <code>:violin:</code></td><td align="left">👾 <code>:space_invader:</code></td><td align="left">🎮 <code>:video_game:</code></td></tr><tr><td align="left">🃏 <code>:black_joker:</code></td><td align="left">🎴 <code>:flower_playing_cards:</code></td><td align="left">🎲 <code>:game_die:</code></td></tr><tr><td align="left">🎯 <code>:dart:</code></td><td align="left">🀄️ <code>:mahjong:</code></td><td align="left">🎬 <code>:clapper:</code></td></tr><tr><td align="left">📝 <code>:memo:</code></td><td align="left">📝 <code>:pencil:</code></td><td align="left">📖 <code>:book:</code></td></tr><tr><td align="left">🎨 <code>:art:</code></td><td align="left">🎤 <code>:microphone:</code></td><td align="left">🎧 <code>:headphones:</code></td></tr><tr><td align="left">🎺 <code>:trumpet:</code></td><td align="left">🎷 <code>:saxophone:</code></td><td align="left">🎸 <code>:guitar:</code></td></tr><tr><td align="left">👞 <code>:shoe:</code></td><td align="left">👡 <code>:sandal:</code></td><td align="left">👠 <code>:high_heel:</code></td></tr><tr><td align="left">💄 <code>:lipstick:</code></td><td align="left">👢 <code>:boot:</code></td><td align="left">👕 <code>:shirt:</code></td></tr><tr><td align="left">👕 <code>:tshirt:</code></td><td align="left">👔 <code>:necktie:</code></td><td align="left">👚 <code>:womans_clothes:</code></td></tr><tr><td align="left">👗 <code>:dress:</code></td><td align="left">🎽 <code>:running_shirt_with_sash:</code></td><td align="left">👖 <code>:jeans:</code></td></tr><tr><td align="left">👘 <code>:kimono:</code></td><td align="left">👙 <code>:bikini:</code></td><td align="left">🎀 <code>:ribbon:</code></td></tr><tr><td align="left">🎩 <code>:tophat:</code></td><td align="left">👑 <code>:crown:</code></td><td align="left">👒 <code>:womans_hat:</code></td></tr><tr><td align="left">👞 <code>:mans_shoe:</code></td><td align="left">🌂 <code>:closed_umbrella:</code></td><td align="left">💼 <code>:briefcase:</code></td></tr><tr><td align="left">👜 <code>:handbag:</code></td><td align="left">👝 <code>:pouch:</code></td><td align="left">👛 <code>:purse:</code></td></tr><tr><td align="left">👓 <code>:eyeglasses:</code></td><td align="left">🎣 <code>:fishing_pole_and_fish:</code></td><td align="left">☕️ <code>:coffee:</code></td></tr><tr><td align="left">🍵 <code>:tea:</code></td><td align="left">🍶 <code>:sake:</code></td><td align="left">🍼 <code>:baby_bottle:</code></td></tr><tr><td align="left">🍺 <code>:beer:</code></td><td align="left">🍻 <code>:beers:</code></td><td align="left">🍸 <code>:cocktail:</code></td></tr><tr><td align="left">🍹 <code>:tropical_drink:</code></td><td align="left">🍷 <code>:wine_glass:</code></td><td align="left">🍴 <code>:fork_and_knife:</code></td></tr><tr><td align="left">🍕 <code>:pizza:</code></td><td align="left">🍔 <code>:hamburger:</code></td><td align="left">🍟 <code>:fries:</code></td></tr><tr><td align="left">🍗 <code>:poultry_leg:</code></td><td align="left">🍖 <code>:meat_on_bone:</code></td><td align="left">🍝 <code>:spaghetti:</code></td></tr><tr><td align="left">🍛 <code>:curry:</code></td><td align="left">🍤 <code>:fried_shrimp:</code></td><td align="left">🍱 <code>:bento:</code></td></tr><tr><td align="left">🍣 <code>:sushi:</code></td><td align="left">🍥 <code>:fish_cake:</code></td><td align="left">🍙 <code>:rice_ball:</code></td></tr><tr><td align="left">🍘 <code>:rice_cracker:</code></td><td align="left">🍚 <code>:rice:</code></td><td align="left">🍜 <code>:ramen:</code></td></tr><tr><td align="left">🍲 <code>:stew:</code></td><td align="left">🍢 <code>:oden:</code></td><td align="left">🍡 <code>:dango:</code></td></tr><tr><td align="left">🥚 <code>:egg:</code></td><td align="left">🍞 <code>:bread:</code></td><td align="left">🍩 <code>:doughnut:</code></td></tr><tr><td align="left">🍮 <code>:custard:</code></td><td align="left">🍦 <code>:icecream:</code></td><td align="left">🍨 <code>:ice_cream:</code></td></tr><tr><td align="left">🍧 <code>:shaved_ice:</code></td><td align="left">🎂 <code>:birthday:</code></td><td align="left">🍰 <code>:cake:</code></td></tr><tr><td align="left">🍪 <code>:cookie:</code></td><td align="left">🍫 <code>:chocolate_bar:</code></td><td align="left">🍬 <code>:candy:</code></td></tr><tr><td align="left">🍭 <code>:lollipop:</code></td><td align="left">🍯 <code>:honey_pot:</code></td><td align="left">🍎 <code>:apple:</code></td></tr><tr><td align="left">🍏 <code>:green_apple:</code></td><td align="left">🍊 <code>:tangerine:</code></td><td align="left">🍋 <code>:lemon:</code></td></tr><tr><td align="left">🍒 <code>:cherries:</code></td><td align="left">🍇 <code>:grapes:</code></td><td align="left">🍉 <code>:watermelon:</code></td></tr><tr><td align="left">🍓 <code>:strawberry:</code></td><td align="left">🍑 <code>:peach:</code></td><td align="left">🍈 <code>:melon:</code></td></tr><tr><td align="left">🍌 <code>:banana:</code></td><td align="left">🍐 <code>:pear:</code></td><td align="left">🍍 <code>:pineapple:</code></td></tr><tr><td align="left">🍠 <code>:sweet_potato:</code></td><td align="left">🍆 <code>:eggplant:</code></td><td align="left">🍅 <code>:tomato:</code></td></tr><tr><td align="left">🌽 <code>:corn:</code></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="Places"><a href="#Places" class="headerlink" title="Places"></a>Places</h3><table><thead><tr><th align="left">🏠 <code>:house:</code></th><th align="left">🏡 <code>:house_with_garden:</code></th><th align="left">🏫 <code>:school:</code></th></tr></thead><tbody><tr><td align="left">🏢 <code>:office:</code></td><td align="left">🏣 <code>:post_office:</code></td><td align="left">🏥 <code>:hospital:</code></td></tr><tr><td align="left">🏦 <code>:bank:</code></td><td align="left">🏪 <code>:convenience_store:</code></td><td align="left">🏩 <code>:love_hotel:</code></td></tr><tr><td align="left">🏨 <code>:hotel:</code></td><td align="left">💒 <code>:wedding:</code></td><td align="left">⛪️ <code>:church:</code></td></tr><tr><td align="left">🏬 <code>:department_store:</code></td><td align="left">🏤 <code>:european_post_office:</code></td><td align="left">🌇 <code>:city_sunrise:</code></td></tr><tr><td align="left">🌆 <code>:city_sunset:</code></td><td align="left">🏯 <code>:japanese_castle:</code></td><td align="left">🏰 <code>:european_castle:</code></td></tr><tr><td align="left">⛺️ <code>:tent:</code></td><td align="left">🏭 <code>:factory:</code></td><td align="left">🗼 <code>:tokyo_tower:</code></td></tr><tr><td align="left">🗾 <code>:japan:</code></td><td align="left">🗻 <code>:mount_fuji:</code></td><td align="left">🌄 <code>:sunrise_over_mountains:</code></td></tr><tr><td align="left">🌅 <code>:sunrise:</code></td><td align="left">🌠 <code>:stars:</code></td><td align="left">🗽 <code>:statue_of_liberty:</code></td></tr><tr><td align="left">🌉 <code>:bridge_at_night:</code></td><td align="left">🎠 <code>:carousel_horse:</code></td><td align="left">🌈 <code>:rainbow:</code></td></tr><tr><td align="left">🎡 <code>:ferris_wheel:</code></td><td align="left">⛲️ <code>:fountain:</code></td><td align="left">🎢 <code>:roller_coaster:</code></td></tr><tr><td align="left">🚢 <code>:ship:</code></td><td align="left">🚤 <code>:speedboat:</code></td><td align="left">⛵️ <code>:boat:</code></td></tr><tr><td align="left">⛵️ <code>:sailboat:</code></td><td align="left">🚣 <code>:rowboat:</code></td><td align="left">⚓️ <code>:anchor:</code></td></tr><tr><td align="left">🚀 <code>:rocket:</code></td><td align="left">✈️ <code>:airplane:</code></td><td align="left">🚁 <code>:helicopter:</code></td></tr><tr><td align="left">🚂 <code>:steam_locomotive:</code></td><td align="left">🚊 <code>:tram:</code></td><td align="left">🚞 <code>:mountain_railway:</code></td></tr><tr><td align="left">🚲 <code>:bike:</code></td><td align="left">🚡 <code>:aerial_tramway:</code></td><td align="left">🚟 <code>:suspension_railway:</code></td></tr><tr><td align="left">🚠 <code>:mountain_cableway:</code></td><td align="left">🚜 <code>:tractor:</code></td><td align="left">🚙 <code>:blue_car:</code></td></tr><tr><td align="left">🚘 <code>:oncoming_automobile:</code></td><td align="left">🚗 <code>:car:</code></td><td align="left">🚗 <code>:red_car:</code></td></tr><tr><td align="left">🚕 <code>:taxi:</code></td><td align="left">🚖 <code>:oncoming_taxi:</code></td><td align="left">🚛 <code>:articulated_lorry:</code></td></tr><tr><td align="left">🚌 <code>:bus:</code></td><td align="left">🚍 <code>:oncoming_bus:</code></td><td align="left">🚨 <code>:rotating_light:</code></td></tr><tr><td align="left">🚓 <code>:police_car:</code></td><td align="left">🚔 <code>:oncoming_police_car:</code></td><td align="left">🚒 <code>:fire_engine:</code></td></tr><tr><td align="left">🚑 <code>:ambulance:</code></td><td align="left">🚐 <code>:minibus:</code></td><td align="left">🚚 <code>:truck:</code></td></tr><tr><td align="left">🚋 <code>:train:</code></td><td align="left">🚉 <code>:station:</code></td><td align="left">🚆 <code>:train2:</code></td></tr><tr><td align="left">🚅 <code>:bullettrain_front:</code></td><td align="left">🚄 <code>:bullettrain_side:</code></td><td align="left">🚈 <code>:light_rail:</code></td></tr><tr><td align="left">🚝 <code>:monorail:</code></td><td align="left">🚃 <code>:railway_car:</code></td><td align="left">🚎 <code>:trolleybus:</code></td></tr><tr><td align="left">🎫 <code>:ticket:</code></td><td align="left">⛽️ <code>:fuelpump:</code></td><td align="left">🚦 <code>:vertical_traffic_light:</code></td></tr><tr><td align="left">🚥 <code>:traffic_light:</code></td><td align="left">⚠️ <code>:warning:</code></td><td align="left">🚧 <code>:construction:</code></td></tr><tr><td align="left">🔰 <code>:beginner:</code></td><td align="left">🏧 <code>:atm:</code></td><td align="left">🎰 <code>:slot_machine:</code></td></tr><tr><td align="left">🚏 <code>:busstop:</code></td><td align="left">💈 <code>:barber:</code></td><td align="left">♨️ <code>:hotsprings:</code></td></tr><tr><td align="left">🏁 <code>:checkered_flag:</code></td><td align="left">🎌 <code>:crossed_flags:</code></td><td align="left">🏮 <code>:izakaya_lantern:</code></td></tr><tr><td align="left">🗿 <code>:moyai:</code></td><td align="left">🎪 <code>:circus_tent:</code></td><td align="left">🎭 <code>:performing_arts:</code></td></tr><tr><td align="left">📍 <code>:round_pushpin:</code></td><td align="left">🚩 <code>:triangular_flag_on_post:</code></td><td align="left"></td></tr></tbody></table><h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><table><thead><tr><th align="left">1️⃣ <code>:one:</code></th><th align="left">2️⃣ <code>:two:</code></th><th align="left">3️⃣ <code>:three:</code></th></tr></thead><tbody><tr><td align="left">4️⃣ <code>:four:</code></td><td align="left">5️⃣ <code>:five:</code></td><td align="left">6️⃣ <code>:six:</code></td></tr><tr><td align="left">7️⃣ <code>:seven:</code></td><td align="left">8️⃣ <code>:eight:</code></td><td align="left">9️⃣ <code>:nine:</code></td></tr><tr><td align="left">🔟 <code>:keycap_ten:</code></td><td align="left">🔢 <code>:1234:</code></td><td align="left">0️⃣ <code>:zero:</code></td></tr><tr><td align="left">#️⃣ <code>:hash:</code></td><td align="left">🔣 <code>:symbols:</code></td><td align="left">◀️ <code>:arrow_backward:</code></td></tr><tr><td align="left">⬇️ <code>:arrow_down:</code></td><td align="left">▶️ <code>:arrow_forward:</code></td><td align="left">⬅️ <code>:arrow_left:</code></td></tr><tr><td align="left">🔠 <code>:capital_abcd:</code></td><td align="left">🔡 <code>:abcd:</code></td><td align="left">🔤 <code>:abc:</code></td></tr><tr><td align="left">↙️ <code>:arrow_lower_left:</code></td><td align="left">↘️ <code>:arrow_lower_right:</code></td><td align="left">➡️ <code>:arrow_right:</code></td></tr><tr><td align="left">⬆️ <code>:arrow_up:</code></td><td align="left">↖️ <code>:arrow_upper_left:</code></td><td align="left">↗️ <code>:arrow_upper_right:</code></td></tr><tr><td align="left">⏬ <code>:arrow_double_down:</code></td><td align="left">⏫ <code>:arrow_double_up:</code></td><td align="left">🔽 <code>:arrow_down_small:</code></td></tr><tr><td align="left">⤵️ <code>:arrow_heading_down:</code></td><td align="left">⤴️ <code>:arrow_heading_up:</code></td><td align="left">↩️ <code>:leftwards_arrow_with_hook:</code></td></tr><tr><td align="left">↪️ <code>:arrow_right_hook:</code></td><td align="left">↔️ <code>:left_right_arrow:</code></td><td align="left">↕️ <code>:arrow_up_down:</code></td></tr><tr><td align="left">🔼 <code>:arrow_up_small:</code></td><td align="left">🔃 <code>:arrows_clockwise:</code></td><td align="left">🔄 <code>:arrows_counterclockwise:</code></td></tr><tr><td align="left">⏪ <code>:rewind:</code></td><td align="left">⏩ <code>:fast_forward:</code></td><td align="left">ℹ️ <code>:information_source:</code></td></tr><tr><td align="left">🆗 <code>:ok:</code></td><td align="left">🔀 <code>:twisted_rightwards_arrows:</code></td><td align="left">🔁 <code>:repeat:</code></td></tr><tr><td align="left">🔂 <code>:repeat_one:</code></td><td align="left">🆕 <code>:new:</code></td><td align="left">🔝 <code>:top:</code></td></tr><tr><td align="left">🆙 <code>:up:</code></td><td align="left">🆒 <code>:cool:</code></td><td align="left">🆓 <code>:free:</code></td></tr><tr><td align="left">🆖 <code>:ng:</code></td><td align="left">🎦 <code>:cinema:</code></td><td align="left">🈁 <code>:koko:</code></td></tr><tr><td align="left">📶 <code>:signal_strength:</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">🈂️ <code>:sa:</code></td><td align="left">🚻 <code>:restroom:</code></td><td align="left">🚹 <code>:mens:</code></td></tr><tr><td align="left">🚺 <code>:womens:</code></td><td align="left">🚼 <code>:baby_symbol:</code></td><td align="left">🚭 <code>:no_smoking:</code></td></tr><tr><td align="left">🅿️ <code>:parking:</code></td><td align="left">♿️ <code>:wheelchair:</code></td><td align="left">🚇 <code>:metro:</code></td></tr><tr><td align="left">🛄 <code>:baggage_claim:</code></td><td align="left">🉑 <code>:accept:</code></td><td align="left">🚾 <code>:wc:</code></td></tr><tr><td align="left">🚰 <code>:potable_water:</code></td><td align="left">🚮 <code>:put_litter_in_its_place:</code></td><td align="left">㊙️ <code>:secret:</code></td></tr><tr><td align="left">㊗️ <code>:congratulations:</code></td><td align="left">Ⓜ️ <code>:m:</code></td><td align="left">🛂 <code>:passport_control:</code></td></tr><tr><td align="left">🛅 <code>:left_luggage:</code></td><td align="left">🛃 <code>:customs:</code></td><td align="left">🉐 <code>:ideograph_advantage:</code></td></tr><tr><td align="left">🆑 <code>:cl:</code></td><td align="left">🆘 <code>:sos:</code></td><td align="left">🆔 <code>:id:</code></td></tr><tr><td align="left">🚫 <code>:no_entry_sign:</code></td><td align="left">🔞 <code>:underage:</code></td><td align="left">📵 <code>:no_mobile_phones:</code></td></tr><tr><td align="left">🚯 <code>:do_not_litter:</code></td><td align="left">🚱 <code>:non-potable_water:</code></td><td align="left">🚳 <code>:no_bicycles:</code></td></tr><tr><td align="left">🚷 <code>:no_pedestrians:</code></td><td align="left">🚸 <code>:children_crossing:</code></td><td align="left">⛔️ <code>:no_entry:</code></td></tr><tr><td align="left">✳️ <code>:eight_spoked_asterisk:</code></td><td align="left">✴️ <code>:eight_pointed_black_star:</code></td><td align="left">💟 <code>:heart_decoration:</code></td></tr><tr><td align="left">🆚 <code>:vs:</code></td><td align="left">📳 <code>:vibration_mode:</code></td><td align="left">📴 <code>:mobile_phone_off:</code></td></tr><tr><td align="left">💹 <code>:chart:</code></td><td align="left">💱 <code>:currency_exchange:</code></td><td align="left">♈️ <code>:aries:</code></td></tr><tr><td align="left">♉️ <code>:taurus:</code></td><td align="left">♊️ <code>:gemini:</code></td><td align="left">♋️ <code>:cancer:</code></td></tr><tr><td align="left">♌️ <code>:leo:</code></td><td align="left">♍️ <code>:virgo:</code></td><td align="left">♎️ <code>:libra:</code></td></tr><tr><td align="left">♏️ <code>:scorpius:</code></td><td align="left">♐️ <code>:sagittarius:</code></td><td align="left">♑️ <code>:capricorn:</code></td></tr><tr><td align="left">♒️ <code>:aquarius:</code></td><td align="left">♓️ <code>:pisces:</code></td><td align="left">⛎ <code>:ophiuchus:</code></td></tr><tr><td align="left">🔯 <code>:six_pointed_star:</code></td><td align="left">❎ <code>:negative_squared_cross_mark:</code></td><td align="left">🅰️ <code>:a:</code></td></tr><tr><td align="left">🅱️ <code>:b:</code></td><td align="left">🆎 <code>:ab:</code></td><td align="left">🅾️ <code>:o2:</code></td></tr><tr><td align="left">💠 <code>:diamond_shape_with_a_dot_inside:</code></td><td align="left">♻️ <code>:recycle:</code></td><td align="left">🔚 <code>:end:</code></td></tr><tr><td align="left">🔛 <code>:on:</code></td><td align="left">🔜 <code>:soon:</code></td><td align="left">🕐 <code>:clock1:</code></td></tr><tr><td align="left">🕜 <code>:clock130:</code></td><td align="left">🕙 <code>:clock10:</code></td><td align="left">🕥 <code>:clock1030:</code></td></tr><tr><td align="left">🕚 <code>:clock11:</code></td><td align="left">🕦 <code>:clock1130:</code></td><td align="left">🕛 <code>:clock12:</code></td></tr><tr><td align="left">🕧 <code>:clock1230:</code></td><td align="left">🕑 <code>:clock2:</code></td><td align="left">🕝 <code>:clock230:</code></td></tr><tr><td align="left">🕒 <code>:clock3:</code></td><td align="left">🕞 <code>:clock330:</code></td><td align="left">🕓 <code>:clock4:</code></td></tr><tr><td align="left">🕟 <code>:clock430:</code></td><td align="left">🕔 <code>:clock5:</code></td><td align="left">🕠 <code>:clock530:</code></td></tr><tr><td align="left">🕕 <code>:clock6:</code></td><td align="left">🕡 <code>:clock630:</code></td><td align="left">🕖 <code>:clock7:</code></td></tr><tr><td align="left">🕢 <code>:clock730:</code></td><td align="left">🕗 <code>:clock8:</code></td><td align="left">🕣 <code>:clock830:</code></td></tr><tr><td align="left">🕘 <code>:clock9:</code></td><td align="left">🕤 <code>:clock930:</code></td><td align="left">💲 <code>:heavy_dollar_sign:</code></td></tr><tr><td align="left">©️ <code>:copyright:</code></td><td align="left">®️ <code>:registered:</code></td><td align="left">™️ <code>:tm:</code></td></tr><tr><td align="left">❌ <code>:x:</code></td><td align="left">❗️ <code>:heavy_exclamation_mark:</code></td><td align="left">‼️ <code>:bangbang:</code></td></tr><tr><td align="left">⁉️ <code>:interrobang:</code></td><td align="left">⭕️ <code>:o:</code></td><td align="left">✖️ <code>:heavy_multiplication_x:</code></td></tr><tr><td align="left">➕ <code>:heavy_plus_sign:</code></td><td align="left">➖ <code>:heavy_minus_sign:</code></td><td align="left">➗ <code>:heavy_division_sign:</code></td></tr><tr><td align="left">💮 <code>:white_flower:</code></td><td align="left">💯 <code>:100:</code></td><td align="left">✔️ <code>:heavy_check_mark:</code></td></tr><tr><td align="left">☑️ <code>:ballot_box_with_check:</code></td><td align="left">🔘 <code>:radio_button:</code></td><td align="left">🔗 <code>:link:</code></td></tr><tr><td align="left">➰ <code>:curly_loop:</code></td><td align="left">〰️ <code>:wavy_dash:</code></td><td align="left">〽️ <code>:part_alternation_mark:</code></td></tr><tr><td align="left">🔱 <code>:trident:</code></td><td align="left">🔻 <code>:small_red_triangle_down:</code></td><td align="left">🔺 <code>:small_red_triangle:</code></td></tr><tr><td align="left">✅ <code>:white_check_mark:</code></td><td align="left">🔲 <code>:black_square_button:</code></td><td align="left">🔳 <code>:white_square_button:</code></td></tr><tr><td align="left">⚫️ <code>:black_circle:</code></td><td align="left">⚪️ <code>:white_circle:</code></td><td align="left">🔴 <code>:red_circle:</code></td></tr><tr><td align="left">🔵 <code>:large_blue_circle:</code></td><td align="left">🔷 <code>:large_blue_diamond:</code></td><td align="left">🔶 <code>:large_orange_diamond:</code></td></tr><tr><td align="left">🔹 <code>:small_blue_diamond:</code></td><td align="left">🔸 <code>:small_orange_diamond:</code></td><td align="left"></td></tr></tbody></table><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://hasaik.com/posts/9b280ea3.html">Hexo 中使用 emoji 表情</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给文章标题添加一个emoji表情</title>
      <link href="/archives/2798a2b1.html"/>
      <url>/archives/2798a2b1.html</url>
      
        <content type="html"><![CDATA[<p>如果你和我一样使用的数据文件的方式的话，把这段代码放在 <code>source/_data/styles.styl</code> 文件中即可！</p><p>效果就像我的博客其他文章啦，这里贴一下我所使用的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-variant</span>: normal;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-out;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-out;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-out;</span><br><span class="line">  <span class="attribute">text-rendering</span>: auto;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;🍦&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;🌸&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;⛄️&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;🔥&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;🌱&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以自由替换你喜欢的小表情！:heart::heart:</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT版本更新V8.0记录</title>
      <link href="/archives/f06684a1.html"/>
      <url>/archives/f06684a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于博客更新方式的有关内容请阅读：<a href="/archives/5b20fbd0.html">Hexo 框架 (十三)：关于博客主题持续更新的问题和我的新配置方式</a></p><h2 id="V8-0-更新内容"><a href="#V8-0-更新内容" class="headerlink" title="V8.0 更新内容"></a>V8.0 更新内容</h2><h2 id="重要更新"><a href="#重要更新" class="headerlink" title="重要更新"></a>重要更新</h2><ul><li><p>图标库升级为 Font-Awesome 5 (<a href="https://github.com/theme-next/hexo-theme-next/pull/1438">theme-next/hexo-theme-next#1438</a>)</p></li><li><p>模板格式从 <code>swig</code> 更改为 <code>njk</code></p></li><li><p>菜单设置变更 (<a href="https://github.com/next-theme/hexo-theme-next/commit/a527bfdf11d558ffd958cd0a0b05416fb1caaa33">a527bfd</a>)</p></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-override: false</span></span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line"><span class="deletion">-  home: / || fa fa-home</span></span><br><span class="line"><span class="addition">+  #home: / || fa fa-home</span></span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  #tags: /tags/ || fa fa-tags</span><br><span class="line">  #categories: /categories/ || fa fa-th</span><br><span class="line"><span class="deletion">-  archives: /archives/ || fa fa-archive</span></span><br><span class="line"><span class="addition">+  #archives: /archives/ || fa fa-archive</span></span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure><ul><li>Valine 选项更新 (<a href="https://github.com/next-theme/hexo-theme-next/commit/6e6fc74ae98a0ef7aa3aeaba3e330ef735698b7b">6e6fc74</a>)</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line"><span class="deletion">-  appid: # Your leancloud application appid</span></span><br><span class="line"><span class="deletion">-  appkey: # Your leancloud application appkey</span></span><br><span class="line"><span class="addition">+  appId: # Your leancloud application appid</span></span><br><span class="line"><span class="addition">+  appKey: # Your leancloud application appkey</span></span><br><span class="line">  ...</span><br><span class="line"><span class="deletion">-  guest_info: nick,mail,link # Custom comment header</span></span><br><span class="line"><span class="addition">+  meta: # Custom comment header</span></span><br><span class="line"><span class="addition">+    - nick</span></span><br><span class="line"><span class="addition">+    - mail</span></span><br><span class="line"><span class="addition">+    - link</span></span><br></pre></td></tr></table></figure><ul><li>支持 highlight.js (<a href="https://github.com/next-theme/hexo-theme-next/commit/9fdaba295a2c6c707a7d96d331762ab571b89c1a">9fdaba2</a>)</li><li>允许更多的代码高亮格式 (<a href="https://github.com/next-theme/hexo-theme-next/commit/03e50d01ac59d136d8d9ccda187d898c0e424332">03e50d0</a>)</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  ...</span><br><span class="line"><span class="deletion">-  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line"><span class="deletion">-  # See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="deletion">-  highlight_theme: normal</span></span><br><span class="line"><span class="addition">+  # See: https://github.com/highlightjs/highlight.js/tree/master/src/styles</span></span><br><span class="line"><span class="addition">+  theme:</span></span><br><span class="line"><span class="addition">+    light: default</span></span><br><span class="line"><span class="addition">+    dark: dark</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">agate</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><p>你可以在这里预览代码高亮的效果：<a href="https://highlightjs.org/">highlightjs</a> 选择你喜欢的<code>style</code>即可。</p><h3 id="更换模板"><a href="#更换模板" class="headerlink" title="更换模板"></a>更换模板</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="attr">postMeta:</span> <span class="string">source/_data/post-meta.njk</span></span><br><span class="line">  <span class="attr">postBodyEnd:</span> <span class="string">source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.njk</span></span><br><span class="line">  <span class="attr">bodyEnd:</span> <span class="string">source/_data/body-end.njk</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>同时将原 <code>_data</code> 目录下的 <code>swig</code> 文件后缀改为 <code>njk</code> 即可</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API接口开发日记</title>
      <link href="/archives/f09f3fc0.html"/>
      <url>/archives/f09f3fc0.html</url>
      
        <content type="html"><![CDATA[<p>之前做了一个商城的 demo，当时是用的别人接口，用的人比较多，经常就挂了，我就寻思自己开发一下这个接口自用，</p><p>主要技术栈很简单，就是 node+express 就行了，当然你还需要会一点 mysql！</p><h2 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h2><p>爬取原接口数据：<a href="/archives/1567847a.html">Node 爬取数据到数据库练习</a></p><p>代码都在这里了。我之前就爬取下来了。放进数据库。</p><h2 id="编写接口代码"><a href="#编写接口代码" class="headerlink" title="编写接口代码"></a>编写接口代码</h2><p>这个也没什么好说的，就是运用动态路由,示例代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="keyword">let</span> sqlQuery = <span class="built_in">require</span>(<span class="string">&#x27;./mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> iid = req.<span class="property">query</span>.<span class="property">iid</span></span><br><span class="line">  <span class="keyword">let</span> sqlStr = <span class="string">`select data from detail where iid = ?`</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sqlQuery</span>(sqlStr, iid)</span><br><span class="line">  result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result[<span class="number">0</span>].<span class="property">data</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(result)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><p>这里我封装了一下数据库查询语句，封装的 <code>sqlquery</code> 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sqlOptions = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;mall&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">let</span> con = mysql.<span class="title function_">createConnection</span>(sqlOptions)</span><br><span class="line">con.<span class="title function_">connect</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sqlQuery</span>(<span class="params">strSql, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    con.<span class="title function_">query</span>(strSql, arr, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(results)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = sqlQuery</span><br></pre></td></tr></table></figure><h2 id="在云服务器上部署-node-项目"><a href="#在云服务器上部署-node-项目" class="headerlink" title="在云服务器上部署 node 项目"></a>在云服务器上部署 node 项目</h2><p>我使用的是阿里云的 ECS 云服务器+宝塔面板。</p><p>首先将所有文件上传到服务器中：我上传的位置：/www/wwwroot/mallAPI</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200505160150.png" alt="image-20200505160142160"></p><p>然后我们在软件商店安装一个 pm2：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200505160239.png" alt="image-20200505160238425"></p><p>打开它，分别填入根目录和启动文件，添加项目，并启动。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200505160351.png" alt="image-20200505160349822"></p><p>然后点击映射，填入你的域名，添加反向代理：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200505160524.png" alt="image-20200505160523376"></p><p>这样就部署好了。</p><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="从数据库中取出-json-数据"><a href="#从数据库中取出-json-数据" class="headerlink" title="从数据库中取出 json 数据"></a>从数据库中取出 json 数据</h3><p>在爬取数据的时候，我直接把 JSON 数据放进了 data 字段中，在取出的时候，我们实际得到的是这样一个对象：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200505160816.png" alt="47e572d6e2ca9933e1de7ea75d72039"></p><p>所以我们需要对这个数据简单处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sqlStr = <span class="string">&#x27;select data from home_multidata&#x27;</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sqlQuery</span>(sqlStr)</span><br><span class="line">result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result[<span class="number">0</span>].<span class="property">data</span>)</span><br><span class="line">res.<span class="title function_">send</span>(result)</span><br></pre></td></tr></table></figure><p>如果不处理，我们是得不到想要的 JSON 数据的，直接给你返回的是这样一个鬼东西：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200505160959.png"></p><h3 id="node-项目需要安装依赖"><a href="#node-项目需要安装依赖" class="headerlink" title="node 项目需要安装依赖"></a>node 项目需要安装依赖</h3><p>明明上传了项目，但是在 pm2 管理器部署，总是不成功，可能是依赖问题。我上传的时候没有上传 <code>node-modules</code> 文件夹，因为这个文件实在是又臭又长。</p><p>我们直接使用 Xshell 或者宝塔终端或者其他什么都可以，连接到服务器，切换到项目目录，安装依赖就好，这里依然还是推荐淘宝镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><h2 id="开发完成"><a href="#开发完成" class="headerlink" title="开发完成"></a>开发完成</h2><p>到这里我们的 API 接口就开发完成了。看看效果：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200505161722.png" alt="image-20200505161721715"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200505161701.png" alt="image-20200505161700833"></p><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p>api 代码地址：<a href="https://github.com/constown/mallAPI">mallAPI</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> API </tag>
            
            <tag> 接口开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sitemeta渐变背景实现</title>
      <link href="/archives/b1e33f9d.html"/>
      <url>/archives/b1e33f9d.html</url>
      
        <content type="html"><![CDATA[<p>最近挺多小伙伴来问我，博客的 meta 部分的渐变背景怎么做的，其实很简单，纯 css 就好了，给背景设置一个渐变色，然后添加一个关键帧动画就 OK。这里贴出我的所有样式代码，仅供参考：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-brand-container</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    -<span class="number">225deg</span>,</span><br><span class="line">    <span class="number">#2cd8d5</span> <span class="number">0%</span>,</span><br><span class="line">    <span class="number">#c5c1ff</span> <span class="number">56%</span>,</span><br><span class="line">    <span class="number">#ffbac3</span> <span class="number">100%</span>,</span><br><span class="line">    <span class="number">#ddd6f3</span> <span class="number">0%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渐变色配色方案，你可以在 <a href="/stars/">我的收藏</a> =》设计素材中查看。我收藏了一些渐变色配色方案的网站。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 渐变色背景 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端框架热门框架整理</title>
      <link href="/archives/88be941b.html"/>
      <url>/archives/88be941b.html</url>
      
        <content type="html"><![CDATA[<h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><h3 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h3><p>地址：<a href="https://parceljs.org/">https://parceljs.org</a></p><p>Parcel 是一款极速零配置 WEB 应用打包工具，快速、几乎零配置是它最大的特点，开箱即用。相比 webpack，Parcel 对于新手来说未尝不是一个很好的选择。</p><h3 id="Critters"><a href="#Critters" class="headerlink" title="Critters"></a>Critters</h3><p>地址：<a href="https://github.com/GoogleChromeLabs/critters">https://github.com/GoogleChromeLabs/critters</a></p><p>一款 webpack 的插件，它可以很方便的配置内联关键 css( critical CSS ),其余的 css 部分则会异步加载，由于它不使用无头浏览器(headless browser)呈现内容，因此快速轻巧。</p><h3 id="sucrase"><a href="#sucrase" class="headerlink" title="sucrase"></a>sucrase</h3><p>地址：<a href="https://sucrase.io/">https://sucrase.io/</a></p><p>如果你用 typscript 构建 React 项目，sucrase 将是一个不错的选择，它的编译速度将是 Babel 的 20 倍。sucrase——一款 ES6+编译器，重点关注非标准语言，例如 Typescript，JSX 和 Flow。</p><h3 id="Webpack-Config-Tool"><a href="#Webpack-Config-Tool" class="headerlink" title="Webpack Config Tool"></a>Webpack Config Tool</h3><p>地址：<a href="https://createapp.dev/">https://createapp.dev/</a></p><p>一款可视化的在线工具网站，你只需要选择前端项目运用到技术和相关配置，就能一键帮你生成 webpack.config.js，省去你不少的麻烦。</p><h3 id="JSUI"><a href="#JSUI" class="headerlink" title="JSUI"></a>JSUI</h3><p>地址：<a href="https://github.com/kitze/JSUI">https://github.com/kitze/JSUI</a></p><p>JSUI 是一个可视化分类、构建和管理 JavaScript 项目的工具。不管是前端应用还是后端应用，也不论使用的是哪种框架，只要项目有一个 package.json ，即可进行管理。</p><h3 id="PWA-Universal-Builder"><a href="#PWA-Universal-Builder" class="headerlink" title="PWA Universal Builder"></a>PWA Universal Builder</h3><p>地址：<a href="https://pwa.cafe/">https://pwa.cafe/</a></p><p>一款脚手架构建工具，方便创建基于 Preact，React，Vue 和 Svelte 的项目，开箱及支持 Babel，Bublé，Browserlist，TypeScript，PostCSS，ESLint，Prettier 和 Service Workers！</p><h3 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h3><p>地址：<a href="https://vuepress.vuejs.org/">https://vuepress.vuejs.org/</a></p><p>VuePress 由两部分组成：第一部分是一个极简静态网站生成器，它包含由 Vue 驱动的主题系统和插件 API，另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 Vue 及其子项目的文档需求。</p><p>每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。</p><h2 id="框架和库"><a href="#框架和库" class="headerlink" title="框架和库"></a>框架和库</h2><h3 id="PWA-Starter-Kit"><a href="#PWA-Starter-Kit" class="headerlink" title="PWA Starter Kit"></a>PWA Starter Kit</h3><p>地址：<a href="https://pwa-starter-kit.polymer-project.org/">https://pwa-starter-kit.polymer-project.org/</a></p><p>通过功能丰富的 WEB 组件快速帮你构建功能齐全的 PWA 网站项目，几乎零配置，完成了构建、测试和快速部署。</p><h3 id="PaperCSS"><a href="#PaperCSS" class="headerlink" title="PaperCSS"></a>PaperCSS</h3><p>地址：<a href="http://www.getpapercss.com/">www.getpapercss.com/</a></p><p>一个不太常规的 CSS 框架，如果你希望你的网站有手绘风格感觉，选择它准没错。</p><h3 id="boardgame-io"><a href="#boardgame-io" class="headerlink" title="boardgame.io"></a>boardgame.io</h3><p>地址：<a href="https://boardgame.io/">https://boardgame.io/</a></p><p>BOARDAME.IO 是 Google 开源的一个游戏框架，旨在允许游戏作者将游戏规则从本质上转化为一系列简单的函数，这些函数用于描述当一个指定动作发生时游戏的状态变化，框架负责处理表述性状态传递。无需再手动编写任何网络或后端代码。</p><p>功能特性</p><p>状态管理：自动跨浏览器、服务器和存储器无缝管理游戏状态；</p><p>快速成型：在渲染游戏之前调试界面以模拟更改。</p><p>多人游戏：所有连接到同一游戏的浏览器都实时同步，无需刷新。</p><p>私密状态：私密信息可从客户端隐藏。</p><p>日志：游戏日志可查看任意时间的信息。</p><p>UI 工具包：常用于游戏中的 React 组件。</p><h3 id="Stimulus"><a href="#Stimulus" class="headerlink" title="Stimulus"></a>Stimulus</h3><p>地址：<a href="https://stimulusjs.org/">https://stimulusjs.org/</a></p><p>Stimulus 是一个适度的前端框架，它并不试图接管整个前端的方方面面，不关心如何渲染 HTML，相反用来增强 HTML 的相关行为。如果你的团队规模较小，但又想要和那些使用比较费力的主流方案的较大团队竞争，那么这是一个比较适合的前端框架方案。</p><h3 id="sapper"><a href="#sapper" class="headerlink" title="sapper"></a>sapper</h3><p>地址：<a href="https://sapper.svelte.dev/">https://sapper.svelte.dev/</a></p><p>Sapper 是一个类似 Next.js 的框架，具有极高的性能和内存效率，具备代码分割，服务端渲染的现代框架功能，是一款军工级别的框架。</p><h3 id="Reakit"><a href="#Reakit" class="headerlink" title="Reakit"></a>Reakit</h3><p>地址：<a href="https://reakit.io/">https://reakit.io/</a></p><p>使用这个框架能让你快速搭建漂亮的 React UI 交互站点。</p><h3 id="Evergreen"><a href="#Evergreen" class="headerlink" title="Evergreen"></a>Evergreen</h3><p>地址：<a href="https://evergreen.segment.com/">https://evergreen.segment.com/</a></p><p>更为强大的 React UI 框架，有一套非常标准的 UI 设计语言帮你构建企业级的具有国际范设计风格的 WEB 应用，这个框架类似我们国内的 ant.design（<a href="https://ant.design/docs/spec/colors-cn%EF%BC%89">https://ant.design/docs/spec/colors-cn）</a></p><h2 id="HTML-和-CSS-工具"><a href="#HTML-和-CSS-工具" class="headerlink" title="HTML 和 CSS 工具"></a>HTML 和 CSS 工具</h2><h3 id="keyframes-app"><a href="#keyframes-app" class="headerlink" title="keyframes.app"></a>keyframes.app</h3><p>地址：<a href="https://keyframes.app/">https://keyframes.app/</a></p><p>一款基于时间关键帧，在线制作网页动画的网站，你无需在编辑器和浏览器直接互相切换，及所见即所得。keyframes.app 提供在线制作和谷歌浏览器扩展插件两种形式。制作完成后，你能很方便的将自动产生的 CSS 代码复制到你的项目中。</p><h3 id="Emotion"><a href="#Emotion" class="headerlink" title="Emotion"></a>Emotion</h3><p>地址：<a href="https://emotion.sh/docs/introduction">https://emotion.sh/docs/introduction</a></p><p>Emotion 是一款用 JavaScript 编写 css 的库，支持字符串和对象两种方式声明 CSS 变量，如果你在使用 React，试用这个库将让你以更加优雅的方式用 JavaScript 编写 CSS。</p><h3 id="modern-normalize"><a href="#modern-normalize" class="headerlink" title="modern-normalize"></a>modern-normalize</h3><p>地址：<a href="https://github.com/sindresorhus/modern-normalize">https://github.com/sindresorhus/modern-normalize</a></p><p>normalize.css 可以让浏览器以接近标准的方式一致地渲染所有元素，而且不同于 cssrest，只针对需要正常化的元素。modern-normalize 只针对现代浏览器，而且足够现代，甚至 IE 和 Edge 都已经放弃。</p><h3 id="layerJS"><a href="#layerJS" class="headerlink" title="layerJS"></a>layerJS</h3><p>地址：<a href="https://layerjs.org/">https://layerjs.org/</a></p><p>一款你只需要编写 HTML 就能很轻松实现菜单、画框、弹出层、滚动视察、缩放、触摸手势等众多效果的框架，这个框架代码压缩版只有 30KB,很方便与各种前端框架集成(Angular,VueJS,React),支持响应式和触摸，并且不依赖任何库就能实现。</p><h3 id="css-blocks"><a href="#css-blocks" class="headerlink" title="css-blocks"></a>css-blocks</h3><p>地址：<a href="https://css-blocks.com/">https://css-blocks.com/</a></p><p>一款受 CSS Modules, BEM 和 Atomic CSS 框架启发，为你的 web 应用组件提供完美的 CSS 模块方案。</p><h3 id="usebasin"><a href="#usebasin" class="headerlink" title="usebasin"></a>usebasin</h3><p>地址：<a href="https://usebasin.com/">https://usebasin.com/</a></p><p>一款你只需要设计表单，无需编写后端代码，就能很方便的将表单应用集成到你的项目里。</p><h3 id="mustard"><a href="#mustard" class="headerlink" title="mustard"></a>mustard</h3><p>地址：<a href="http://mustard-ui.com/">http://mustard-ui.com/</a></p><p>一款适合初学者的 CSS 框架，但是看起来还蛮不错，模块化，开源，压缩版只有 6KB，支持 FLEX,Grid 布局和自带一些漂亮 UI,比如进度条，表单、按钮等，虽然小，但功能齐全。</p><h2 id="javascript-工具"><a href="#javascript-工具" class="headerlink" title="javascript 工具"></a>javascript 工具</h2><h3 id="ScrollHint"><a href="#ScrollHint" class="headerlink" title="ScrollHint"></a>ScrollHint</h3><p>地址：<a href="https://appleple.github.io/">https://appleple.github.io/</a></p><p>一个 JS 库，用于指示元素可以水平滚动，并带有指针图标，如果你在做一个新手引导，这个工具将会是一个不错的选择。</p><h3 id="ToastUI-editor"><a href="#ToastUI-editor" class="headerlink" title="ToastUI editor"></a>ToastUI editor</h3><p>地址：<a href="https://github.com/TOAST-DOCS/ToastUI-Editor">https://github.com/TOAST-DOCS/ToastUI-Editor</a></p><p>强大的 Markdown 编辑器 tui.editor,方便集成到你的项目里，这款强大的富媒体编辑器有以下特点：</p><p>支持 CommonMark 与 GFM（GitHub Flavored Markdown）两种标准；</p><p>支持丰富的扩展插件，如颜色选择器、图表、UML、表格合并</p><p>提供了所见即所得与 Markdown 这两种模式，在编辑过程中可以随时切换，非常方便。在所见即所得模式下，可以直接从浏览器、 Excel、PPT 等复制文本，并且保留原来的格式。</p><h3 id="FilePond"><a href="#FilePond" class="headerlink" title="FilePond"></a>FilePond</h3><p>地址：<a href="https://github.com/pqina/filepond">https://github.com/pqina/filepond</a></p><p>Filepond 是一个用于文件上传的 JavaScript 库，可以上传任何内容，优化图像以获得更快的上传速度，并提供一个出色的，可访问的，流畅的用户体验。</p><p>Filepond 提供了多种上传方式：拖放，复制和粘贴文件，浏览文件系统或仅使用库的 API。gzip 压缩后仅有 21KB ，并且内置了图像优化和图像自动调整功能。</p><p>Filepond 适用于 React ， Vue ， Angular 和 jQuery 。</p><h3 id="Dinero-js"><a href="#Dinero-js" class="headerlink" title="Dinero.js"></a>Dinero.js</h3><p>地址：<a href="https://dinerojs.com/">https://dinerojs.com/</a></p><p>一个用来创建、计算和格式化货币价值的不可变的框架。</p><p>无论在银行应用程序、电子商务网站还是证券交易所平台，我们每天都在与金钱互动。我们也越来越依赖技术来处理问题。</p><p>然而，关于如何以编程处理货币价值尚无共识。虽然金钱是现代社会中普遍存在的概念，但相较于日期和时间之类的东西，它并不是任何主流语言中的一流数据类型。结果，每一种软件都有自己的处理方式，且伴随着陷阱。</p><p>Dinero.js 遵循 Fowler 的模式更多一点儿。它允许你在 JavaScript 中创建、计算和格式化货币值。你可以进行数学运算、解析和格式化对象，使你的开发过程更加轻松。</p><p>该库设计为不可变和可链接的模式。它支持全局设置，具有扩展格式选项，并提供本机国际化支持。</p><h3 id="Swup"><a href="#Swup" class="headerlink" title="Swup"></a>Swup</h3><p>地址：<a href="https://github.com/swup/swup">https://github.com/swup/swup</a></p><p>一款适合初学者的框架，方便灵活易用，让你能快速制作专业级的页面转场动画效果。</p><h3 id="Selection-js"><a href="#Selection-js" class="headerlink" title="Selection.js"></a>Selection.js</h3><p>地址：<a href="https://simonwep.github.io/selection/">https://simonwep.github.io/selection/</a></p><p>简单易用的可视化，支持鼠标拖拽、使用 Cmd/Ctrl+click 选择页面元素的库（支持分组选择），大大节省了你的开发时间。只有 3KB 大小，不依赖 jQuery。</p><h3 id="Glider-js"><a href="#Glider-js" class="headerlink" title="Glider.js"></a>Glider.js</h3><p>地址：<a href="https://nickpiscitelli.github.io/Glider.js/">https://nickpiscitelli.github.io/Glider.js/</a></p><p>一个超快速(25 毫秒加载)，轻量级(小于 3KB)，无依赖性(不需要 jQuery)的制作幻灯效果的前端库，支持响应式，易于扩展，方便自定义事件等…，更多特性等待你的发现！</p><h3 id="ScrollOut"><a href="#ScrollOut" class="headerlink" title="ScrollOut"></a>ScrollOut</h3><p>地址：<a href="https://scroll-out.github.io/">https://scroll-out.github.io/</a></p><p>一款帮你制作专业级 Scroll 滚动效果（滚动视差）的框架，框架大小不到 1KB,使用回调的方式将相关动画元素的属性进行实时分配，方便你做出个性化的动态效果。</p><h2 id="图标、图表工具"><a href="#图标、图表工具" class="headerlink" title="图标、图表工具"></a>图标、图表工具</h2><h3 id="Orion-Icon-Library"><a href="#Orion-Icon-Library" class="headerlink" title="Orion Icon Library"></a>Orion Icon Library</h3><p>地址：<a href="https://orioniconlibrary.com/">https://orioniconlibrary.com/</a></p><p>多达 6000 专业免费的 SVG 矢量图标，还支持深度的定制，比如更换配色，更改线条粗细，变换图标风格(细线条、粗线条、扁平)，一键生成相关代码。</p><h3 id="Frappe-Charts"><a href="#Frappe-Charts" class="headerlink" title="Frappe Charts"></a>Frappe Charts</h3><p>地址：<a href="https://frappe.io/charts">https://frappe.io/charts</a></p><p>一款简单、专业、开源、现代风格的 SVG 报表工具,不需要任何依赖库，代码风格简单，简单易用。支持一键导出 svg 代码。</p><h3 id="SVGator"><a href="#SVGator" class="headerlink" title="SVGator"></a>SVGator</h3><p>地址：<a href="https://www.svgator.com/">https://www.svgator.com/</a></p><p>如果您希望将 Web 图形提升到一个新的水平，那么动画 SVG 就是您的选择，而 SVGator 是您可以用来创建它们的最简单的工具之一。</p><p>一款专业级的 SVG 动画制在线制作工具。SVGator 还具有代码管理器面板，因此您可以准确地看到应用程序生成的代码。SVGator 导出干净，格式良好的代码。</p><h3 id="ApexCharts"><a href="#ApexCharts" class="headerlink" title="ApexCharts"></a>ApexCharts</h3><p>地址：<a href="https://apexcharts.com/">https://apexcharts.com/</a></p><p>ApexCharts.JS 是一个现代化 JavaScript 图表库，用于使用简单的 API 构建交互式图表和可视化，功能十分强大。方便你将图表嵌入到你的 Vue、React 项目中。</p><h3 id="MapKit-JS"><a href="#MapKit-JS" class="headerlink" title="MapKit JS"></a>MapKit JS</h3><p>地址：<a href="https://developer.apple.com/">https://developer.apple.com/</a></p><p>一款苹果公司提供的地图工具，如果想制作和苹果官方网站一样的地图风格，这个工具将是一个不错的选择，允许你在地图上添加交互事件，丰富你的地图应用。</p><h3 id="Img2"><a href="#Img2" class="headerlink" title="Img2"></a>Img2</h3><p>地址：<a href="https://github.com/javierbyte/img2css">https://github.com/javierbyte/img2css</a></p><p>一款图片自动预加载和缓存工具，防止图片闪烁，并使用模糊滤镜预先显示图片延迟图片加载，提高网页加载速度，使用起来非常简单，你只需要使用<img-2>替代<img/>标签即可，使用起来就是这么简单！</p><h3 id="Lozad"><a href="#Lozad" class="headerlink" title="Lozad"></a>Lozad</h3><p>地址：<a href="https://github.com/ApoorvSaxena/lozad.js">https://github.com/ApoorvSaxena/lozad.js</a></p><p>Lozad.js 是基于 IntersectionObserver API 的轻量级、高性能、可配置的纯 JavaScript 并且无依赖的懒加载器，其能够被用于进行图片、iframe 等多种形式的元素。</p><p>通过 gzip 压缩过后，仅仅 1kb 大小，相对于常用的 jquery.lazyload.js 来说，lozad.js 实力碾压，虽然 jquery.lazyload.js 也才几 kb 大小。在 github 上，已经收获了 4800+的 star。</p><h2 id="React-工具"><a href="#React-工具" class="headerlink" title="React 工具"></a>React 工具</h2><h3 id="RSUITE"><a href="#RSUITE" class="headerlink" title="RSUITE"></a>RSUITE</h3><p>地址：<a href="https://rsuitejs.com/">https://rsuitejs.com/</a></p><p>React Suite 是一套 React 组件库，为后台产品而生。由 HYPERS 前端团队与 UX 团队打造，主要服务于公司大数据产品线。</p><p>经历了三次大的版本更新后，累积了大量的组件和丰富的功能。并支持在线定制个性化主题，更重要的是有中文版，方便我们学习使用。</p><h3 id="Pagedraw"><a href="#Pagedraw" class="headerlink" title="Pagedraw"></a>Pagedraw</h3><p>地址：<a href="https://pagedraw.io/">https://pagedraw.io/</a></p><p>一款神奇的在线 UI 设计制作工具，你只需要拖动和布局页面，这个工具就会给你自动生成质量高的 React 组件代码，更多功能等待你的发掘。</p><h3 id="react-smooth-dnd"><a href="#react-smooth-dnd" class="headerlink" title="react-smooth-dnd"></a>react-smooth-dnd</h3><p>地址：<a href="https://github.com/kutlugsahin/react-smooth-dnd">https://github.com/kutlugsahin/react-smooth-dnd</a></p><p>一款拖拽页面元素的 React 工具，拖拽效果平滑，让你轻松就能实现卡片、列表、表单组件的的拖拽。</p><h3 id="Unstated"><a href="#Unstated" class="headerlink" title="Unstated"></a>Unstated</h3><p>地址：<a href="https://github.com/jamiebuilds/unstated">https://github.com/jamiebuilds/unstated</a></p><p>一个新的状态管理类库 unstated.js：简单易用/合理。和之前的 state 管理库思路完全不同，这个 unstated 主打 local state（不是全局 store，一个小改动导致整棵树 rerender），多个 local state 之间也可以共享， 兼具了 redux 的易用性与 flux 的合理性，令人耳目一新；unstated 完全就是为 React 设计的，“足够 React”，让你感觉不到在用第三方组件。</p><h3 id="Reach-Router"><a href="#Reach-Router" class="headerlink" title="Reach Router"></a>Reach Router</h3><p>地址：<a href="https://reach.tech/router">https://reach.tech/router</a></p><p>Reach-Router 是前 ReactRouter 成员 Ryan Florence 开发的一套基于 react 的路由控件。</p><h3 id="SVGR"><a href="#SVGR" class="headerlink" title="SVGR"></a>SVGR</h3><p>地址：<a href="http://www.smooth-code.com/">http://www.smooth-code.com/</a></p><p>svgr 是一个将 SVG 转换为 React 组件的工具，svgr 由 JavaScript 实现。整个文档也非常的小，已开源在 github 上。</p><h3 id="React-Spreadsheet-Grid"><a href="#React-Spreadsheet-Grid" class="headerlink" title="React Spreadsheet Grid"></a>React Spreadsheet Grid</h3><p>地址：<a href="https://github.com/denisraslov/react-spreadsheet-grid">https://github.com/denisraslov/react-spreadsheet-grid</a></p><p>用于 React 类似于 Excel 的网格组件，具有自定义单元格编辑器，高性能滚动和可调整大小的列。</p><h2 id="测试和数据工具"><a href="#测试和数据工具" class="headerlink" title="测试和数据工具"></a>测试和数据工具</h2><h3 id="webhint"><a href="#webhint" class="headerlink" title="webhint"></a>webhint</h3><p>地址：<a href="https://webhint.io/">https://webhint.io/</a></p><p>Webhint 项目提供了一种用于检查代码的可访问性、性能和安全的开源检查（Linting）工具。在创建 Web 站点和应用中，有越来越多的细节问题亟待完善。为此，Webhint 力图帮助开发人员标记这些细节。</p><p>Webhint 以命令行接口（CLI）工具和在线扫描器两种形式提供，使用在线扫描器是最快的上手方式。使用在线扫描器需要为其提供一个公开的 URL，用于运行报告并洞悉应用的运行情况。</p><p>在测试应用时，Webhint 提供三种运行环境：jsdom、Chrome 和 Edge。后两种运行环境使用了 Chrome DevTools 协议，第一种运行环境使用 Node.js 环境快速地执行有限次数的检查，无需浏览器的支持。</p><p>还有更多强大的功能，还有待你试用挖掘。</p><h3 id="Airtap"><a href="#Airtap" class="headerlink" title="Airtap"></a>Airtap</h3><p>地址：<a href="https://github.com/airtap/airtap">https://github.com/airtap/airtap</a></p><p>Airtap 是一种在浏览器中测试 JavaScript 的简单方法，号称能覆盖 800 多种浏览器，能够在数秒内开始在本地测试你的代码，并无缝转移到由 Sauce Labs 提供的基于云的浏览器上，以获得更好的覆盖测试。</p><p>Airtap 与其他跨浏览器测试运行器的不同之处在于其简单性，以及能够在许多浏览器中轻松运行测试套件而无需在本地安装它们。它可以让你在开发过程中快速迭代，并在发布前提供良好的浏览器覆盖率，而不用担心缺少浏览器支持。</p><p>不要只是声称你的 JavaScript 支持“所有浏览器”，用测试证明它！</p><h3 id="mkcert"><a href="#mkcert" class="headerlink" title="mkcert"></a>mkcert</h3><p>地址：<a href="https://github.com/FiloSottile/mkcert">https://github.com/FiloSottile/mkcert</a></p><p>HTTPS 是 Web 发展的趋势，用于提高网站的安全性。使用 HTTPS 需要配置 TLS 证书，得益于 ACME 协议和 Let’s Encrypt 证书，远程环境可以很容易部署。但是对于本地环境，还没有普遍有效的证书。</p><p>mkcert 被设计的足够简单，隐藏了几乎所有生成 TLS 证书所必须的知识。它适用于任何主机名或者 IP，包括 localhost ，因为它只在你的本地环境使用。</p><p>证书是由你的私有 CA 签发，当你运行 mkcert-install 会自动配置这些信任，因此，当浏览器访问时，就会显示安全标识。目前支持 MacOS、Linux 和 Windows，以及 Firefox、Chrome 和 Java。甚至支持一些手机设备。</p><h3 id="Puppeteer-Recorder"><a href="#Puppeteer-Recorder" class="headerlink" title="Puppeteer Recorder"></a>Puppeteer Recorder</h3><p>地址：<a href="https://github.com/checkly/puppeteer-recorder">https://github.com/checkly/puppeteer-recorder</a></p><p>Puppeteer 是一个 Node 库，它提供了一个高级 API 来控制 DevTools 协议上的 Chrome 或 Chromium，常用于爬虫、自动化测试等，你在浏览器手动完成的大多数事情都可以使用它来完成。</p><h3 id="jsonstore-io"><a href="#jsonstore-io" class="headerlink" title="jsonstore.io"></a>jsonstore.io</h3><p>地址：<a href="http://www.jsonstore.io/">http://www.jsonstore.io/</a></p><p>jsonstore.io 为小型项目提供免费，安全且基于 JSON 的云数据存储。只需输入<a href="https://www.jsonstore.io/%EF%BC%8C%E5%A4%8D%E5%88%B6URL%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%BC%80%E5%A7%8B%E5%8F%91%E9%80%81HTTP%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E3%80%82POST%E8%AF%B7%E6%B1%82%E5%B0%86%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%EF%BC%8CPUT%E8%AF%B7%E6%B1%82%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%EF%BC%8CDELETE%E8%AF%B7%E6%B1%82%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%92%8CGET%E8%AF%B7%E6%B1%82%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE%E3%80%82%E5%A4%A7%E5%A4%A7%E6%96%B9%E4%BE%BF%E4%BA%86%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%9B%86%E6%88%90%EF%BC%8C%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E5%AE%8C%E6%88%90%E5%B0%B1%E8%83%BD%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%8C%E4%BD%BF%E7%94%A8%E8%B5%B7%E6%9D%A5%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95%E3%80%82">https://www.jsonstore.io/，复制URL就可以开始发送HTTP数据请求。POST请求将保存数据，PUT请求修改数据，DELETE请求删除数据和GET请求检索数据。大大方便了前端开发人员进行测试接口的集成，前端页面制作完成就能进行接口测试，使用起来就是这么简单。</a></p><h3 id="Initab"><a href="#Initab" class="headerlink" title="Initab"></a>Initab</h3><p>地址：<a href="http://initab.com/">http://initab.com/</a></p><p>一款为开发人员定制打造的工作台，通过谷歌浏览器插件安装即可使用，通过此工作台你可以轻松订阅你感兴趣的 git 项目、跟进相关问题、pull 相关操作，查看版本历史，订阅 Stack Overflow 相关的内容，管理查看 Gists 相关内容，可以说一个主流技术平台聚合工作台。</p><h3 id="lambdatest"><a href="#lambdatest" class="headerlink" title="lambdatest"></a>lambdatest</h3><p>地址：<a href="https://www.lambdatest.com/">https://www.lambdatest.com/</a></p><p>一款在线自动化测试云端平台，号称在 2000 多个真实浏览器和设备进行测试，可以根据你的测试需求进行深度定制，并形成相关记录，方便团队的协作，帮你发现跨平台不同浏览器版本的各种问题。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决滚动条导致页面跳动的问题</title>
      <link href="/archives/285695a6.html"/>
      <url>/archives/285695a6.html</url>
      
        <content type="html"><![CDATA[<p>今天无意间发现了一个十分影响体验的小问题，就是切换页面的时候，因为滚动条并不是一直存在的，在页面加载的过程中，它是没有滚动条的，但是加载完后会出现滚动条，就造成一个页面闪烁跳动的样子，十分影响体验！</p><p><img src="https://img.juanertu.com/20200416015245.gif" alt="页面跳动"></p><p>解决办法：</p><p><code>hexo/source/_data/styels/stly</code> 文件中添加一个 body 的样式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow-y</span>: scroll</span><br></pre></td></tr></table></figure><p>这样的话，就不会有页面跳动的现象了！</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img.juanertu.com/20200416015456.gif" alt="bug修复"></h2><p>经过一番排查，发现是第三方插件 <code>quicklink</code> 的原因，你也可以直接禁用这个插件，使用 <code>pjax</code>。</p><p>另外图片灯箱和另外一个放大图片的插件也可能会导致这个效果，反正我是强迫症比较严重，所以，我取消掉了这些插件，导致的问题就是博客的图片不能双击放大看了。</p><p>自己取舍吧！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十八)：图片自适应webp及全站CDN加速</title>
      <link href="/archives/54c51cfa.html"/>
      <url>/archives/54c51cfa.html</url>
      
        <content type="html"><![CDATA[<p>在上一篇中，为了提高网站的加载速度，我采用了 webp 的图片格式。</p><p>浏览器环境下，使用最多的图片格式有 JPEG、PNG、GIF。其中，JPEG 适合色彩复杂的图片，PNG 适合色彩单一或者需要透明的图片，GIF 通常用于动图。现有的图片格式体积较大。WebP 是一个现代的图片格式，用于在 web 上提供更好的有损和无损压缩图片。它能够在肉眼观看几乎一样的情况下，对图片体积进行大幅压缩。在将一张 1.3MB 的 JPG 有损压缩为 WebP 后，大小仅为 483KB。</p><p>显然，WebP 是个好东西！虽然很棒，但是它有一个兼容性问题！感谢 SLLiu 同学友情提醒！</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412141801.png" alt="友情提醒"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412141455.png" alt="webp兼容性"></p><p>所以，为了一方面能提高网站的性能，一方面适应兼容性，我们还需要做一些东西。</p><p>我们最好是可以让 webp 自适应，在支持 webp 的浏览器上显示 webp 格式的图片，在不支持的 webp 的浏览器上显示其他格式。这里我想到的是 <a href="https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral">又拍云</a> ，一方面他支持 webp 的自适应，另一方面还可以做个 CDN 加速。</p><h2 id="全站-CDN-加速"><a href="#全站-CDN-加速" class="headerlink" title="全站 CDN 加速"></a>全站 CDN 加速</h2><h3 id="注册又拍云"><a href="#注册又拍云" class="headerlink" title="注册又拍云"></a>注册又拍云</h3><p>你可以点击 <a href="https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral">这里进行注册</a> 。加入 <a href="https://www.upyun.com/league">又拍云联盟</a> 即可免费获取每月 10GB 存储空间 + 15GB CDN 流量。加入又拍云的条件就是：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412142558.png" alt="logo"></p><p>要在网站底部挂上又拍云的 logo 和网站 o(╯□╰)o，并且要等到周五才能审核。</p><p>注册过程很简单，注册完之后用支付宝实名认证一下，即可开始创建服务。</p><h3 id="创建-CDN-服务"><a href="#创建-CDN-服务" class="headerlink" title="创建 CDN 服务"></a>创建 CDN 服务</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412142835.png" alt="控制台"></p><p>打开控制台》CDN》创建服务：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412143152.png" alt="创建服务"></p><p>创建好之后就来到了功能管理界面》域名绑定，把你的域名绑定到这里。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412143304.png" alt="功能管理"></p><p>然后复制 CNAME：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412143816.png" alt="域名解析"></p><p>然后回到你的域名服务商，比如我的域名是万网域名，我就打开阿里云控制台》云解析：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412143946.png" alt="添加解析"></p><p>解析完成后，回到又拍云控制台，然后选择 https</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412151528.png" alt="添加https"></p><p>为自己的域名加上 https 协议，没有证书没关系，可以免费 <a href="https://console.upyun.com/toolbox/ssl/">申请 </a> 。如果你在 GitHub 或者 coding 已经设置了 https，可以取消掉。也可以直接把你已经有的域名证书复制过来，添加自有证书。</p><p>到这里就 CDN 加速就基本配置完了，其他的一些配置请自行参考哦。</p><h3 id="设置-webp-图片自适应"><a href="#设置-webp-图片自适应" class="headerlink" title="设置 webp 图片自适应"></a>设置 webp 图片自适应</h3><p>首先打开成本控制》打开 webp 自适应开关</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412144313.png" alt="成本控制"></p><p>然后在图片处理中配置间隔标识符，我选择的<code>！</code>号</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412144357.png" alt="图片处理"></p><p>这样就完成了 webp 的自适应！当然因为有缓存机制，我们可以刷新一下。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412144533.png" alt="刷新"></p><p>并且清除掉你浏览器的缓存！这样我们就全部搞定了！</p><h2 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h2><p>我们可以简单对比一下：</p><p>我有两张图片，分别是我的背景图和我的头像：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412144824.png" alt="图片"></p><p>他们的大小分别是 29kb 和 194kb.</p><p>我们可以开启本地 sreve 服务看一下网络请求：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412145053.png" alt="本地服务"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412145126.png" alt="图片格式"></p><p>可以看出来没有经过任何处理的时候，显示的就是一张 png 格式图片，大小是 198kb</p><p>再看看我启用了 CDN 加速和 webp 自适应后的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412150941.png" alt="webp"></p><p>可以看到现在他变成了一张 type 为 webp，size 为 7.2kb 的图片！</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200412151133.png" alt="bg"></p><p>这样，不但达到了我们加速博客的效果，同时也解决了兼容性的问题！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十七)：更换博客背景图片及图片压缩</title>
      <link href="/archives/e358bc47.html"/>
      <url>/archives/e358bc47.html</url>
      
        <content type="html"><![CDATA[<p>博客背景我也是很早之前就配置过了，不过之前一直觉得博客加载很慢，中途有段时间又去掉了背景图片，包括动态背景什么的都去掉了，毕竟加载速度实在太影响使用体验了。最近检查了一下，发现是因为图片资源的原因导致加载速度太慢，这里简要记录一下。</p><h2 id="更换背景图片"><a href="#更换背景图片" class="headerlink" title="更换背景图片"></a>更换背景图片</h2><p>这个我也说过很多次了，我是用数据文件的方式进行配置，详情参考我之前的文章。</p><p>在<code>source/_data/style.styl</code>文件中添加：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 背景</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(../images/bg.webp);</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>:repeat-x;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-size</span>:cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>background-image</code> 就是你的背景图啦。</p><p>因为懒得去<code>themes/next/source/images</code> 文件夹下添加图片，所以我所有的自定义的图片资源都放在了<code>hexo/source/images</code>文件下，当然啦，本来是没有这个文件夹的，但是我们自己新建一个就好啦！</p><h2 id="设置透明度"><a href="#设置透明度" class="headerlink" title="设置透明度"></a>设置透明度</h2><p>不设置一点透明度的话，我觉得白色的背景还是很突兀，而且完全看不到背景啊，所以我们继续在<code>source/_data/style.styl</code>文件中添加代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单栏的透明度设置</span></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索框（local-search）的透明度设置</span></span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就好啦！</p><h2 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h2><p>图片资源真的是在是太影响加载速度了，不过把图片压缩就好啦，别看我这么大一张背景图，其实只有 7kb 大小。加载起来就很快啊！</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411213336.png" alt="背景图片"></p><p>方法也很简单啊，图片格式我们使用 webp，不建议使用 png 或者 jpg。</p><p>我们只需要简单转换一下就好啦，你可以点击 <a href="https://ezgif.com/png-to-webp">这里</a> 来进行转换。</p><div class="note danger flat"><p>注意哦：webp 图片存在兼容性问题哦，详情：<a href="/archives/54c51cfa.html">图片自适应 webp 格式</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十六)：Valine评论系统配置邮件提醒功能</title>
      <link href="/archives/cc0b1d61.html"/>
      <url>/archives/cc0b1d61.html</url>
      
        <content type="html"><![CDATA[<p>next 主题集成了很多评论系统，Disqus、友言、畅言、Valine（基于 Leancloud）、Gitment、Gitalk 等。不过 Disqus 是韩国的，虽说国内是能有的不过有时候还是会莫名其妙像被墙起来了一样，友言和畅言已经停止维护，Next 在 7.2 版本也把 Gitment 移除支持了，不过 Gitalk 和 Gitment 比较类似，都是基于 GitHub 的 Issue 实现的。Gitalk 评论虽然最符合程序员的喜好，毕竟基于 GitHub 的 Issue，可以自由改动、打 Tag 等，但是缺点就是必须登录 GitHub 账号，有时候有些小问题就显得麻烦了所以我最后选择了 valine,免登陆，而且免费！</p><p>不过我很早就配置了这个评论功能，配置起来也很简单，但是这里还是简单的说一下吧。</p><div class="note flat"><p>我现在的 next 主题版本已经更新到了 7.8.0</p></div><h2 id="注册-Valine"><a href="#注册-Valine" class="headerlink" title="注册 Valine"></a>注册 Valine</h2><p>注册 valine 及配置，你可以参考：<a href="/archives/264a3045.html">Next 主题配置与美化</a> 第三部分中的第 10 条。总体来说十分简单。</p><p>值得注意的是，如果你和我一样采用的是<strong>数据文件</strong>的方式，只需要把该文中的主题配置文件换成 next.yml 就好。你可以参考：<a href="/archives/5b20fbd0.html">博客主题持续更新的问题</a></p><p>当然我也更加推荐使用<strong>数据文件</strong>的方式来进行配置。</p><h2 id="Valine-的一些样式修改"><a href="#Valine-的一些样式修改" class="headerlink" title="Valine 的一些样式修改"></a>Valine 的一些样式修改</h2><p>这里贴一下，我修改过的一些样式，让评论区看起来更加整洁。我所有的自定义样式都放置于<code>hexo/source/_data/style.styl</code>文件中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏 valine 的 powered by</span></span><br><span class="line"><span class="selector-class">.power</span><span class="selector-class">.txt-right</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// valine 评论框对齐文章</span></span><br><span class="line">div<span class="selector-id">#comments</span><span class="selector-class">.comments</span>.v&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0px</span> ;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0px</span> ;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Valine 隐藏系统信息</span></span><br><span class="line">.vsys&#123;</span><br><span class="line">  <span class="attribute">display</span>:none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得要在 next.yml 或是主题配置文件中取消掉<code>custom_file_path</code>的注释：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>注意：隐藏 valine 的 powered by 样式已经发生了变化（2020.4.12），现在应该修正为：</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 隐藏 valine 的 powered by</span><br><span class="line">.vcopy&#123;</span><br><span class="line">display: none !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置邮件提醒功能"><a href="#配置邮件提醒功能" class="headerlink" title="配置邮件提醒功能"></a>配置邮件提醒功能</h2><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><ul><li>在 设置》安全中心》服务开关中，关闭除了数据存储外的所有功能，并在下方 web 安全域名中添加好你的域名：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411204717.png" alt="服务开关"></p><ul><li>在<code>主题配置文件中</code> ，我们需要关闭掉自带的邮件提醒服务：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span></span><br><span class="line">  <span class="attr">appkey:</span></span><br><span class="line">  <span class="comment">#这里↓↓↓↓↓↓↓</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#这里↑↑↑↑↑↑↑</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">在这里写下你的评论吧！</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">robohash</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>顺便提一句，因为主题自带的 CDN 很慢，你可以在主题配置文件中使用第三方 CDN：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line"><span class="attr">valine:</span> <span class="string">//cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure><h3 id="配置-Valine-Admin"><a href="#配置-Valine-Admin" class="headerlink" title="配置 Valine Admin"></a>配置 Valine Admin</h3><blockquote><p>Valine Admin 是 Valine 评论系统的扩展和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板。基于 Akismet API 实现准确的垃圾评论过滤。此外，使用云函数等技术解决了免费版云引擎休眠问题，支持云引擎自动唤醒，漏发邮件自动补发。兼容云淡风轻及 Deserts 维护的多版本 Valine。</p></blockquote><h4 id="云引擎”一键”部署"><a href="#云引擎”一键”部署" class="headerlink" title="云引擎”一键”部署"></a>云引擎”一键”部署</h4><ol><li>在<a href="https://leancloud.cn/dashboard/#/apps">Leancloud</a>云引擎设置界面，填写代码库并保存：<a href="https://github.com/DesertsP/Valine-Admin.git">https://github.com/DesertsP/Valine-Admin.git</a></li></ol><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411205523.png" alt="设置仓库"></p><ol><li>在设置页面，设置环境变量以及 Web 二级域名。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411205606.png" alt="环境变量"></p><table><thead><tr><th align="left">变量</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">SITE_NAME</td><td align="left">Deserts</td><td align="left">[必填]博客名称</td></tr><tr><td align="left">SITE_URL</td><td align="left"><a href="https://blog.juanertu.com/">https://blog.juanertu.com</a></td><td align="left">[必填]首页地址</td></tr><tr><td align="left"><strong>SMTP_SERVICE</strong></td><td align="left">QQ</td><td align="left">[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td></tr><tr><td align="left">SMTP_USER</td><td align="left"><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td align="left">[必填]SMTP 登录用户</td></tr><tr><td align="left">SMTP_PASS</td><td align="left">ccxxxxxxxxch</td><td align="left">[必填]SMTP 登录密码（QQ 邮箱需要获取独立密码）</td></tr><tr><td align="left">SENDER_NAME</td><td align="left">Deserts</td><td align="left">[必填]发件人</td></tr><tr><td align="left">SENDER_EMAIL</td><td align="left"><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td align="left">[必填]发件邮箱</td></tr><tr><td align="left">ADMIN_URL</td><td align="left"><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td><td align="left">[建议]Web 主机二级域名，用于自动唤醒</td></tr><tr><td align="left">BLOGGER_EMAIL</td><td align="left"><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td align="left">[可选]博主通知收件地址，默认使用 SENDER_EMAIL</td></tr><tr><td align="left">AKISMET_KEY</td><td align="left">xxxxxxxxxxxx</td><td align="left">[可选]Akismet Key 用于垃圾评论检测，设为 MANUAL_REVIEW 开启人工审核，留空不使用反垃圾</td></tr></tbody></table><p><strong>以上必填参数请务必正确设置。</strong></p><p>二级域名用于评论后台管理，如<a href="https://xxxx.leanapp.cn/">https://XXX.leanapp.cn</a> 。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411205719.png" alt="二级域名"></p><ol><li>切换到部署标签页，分支使用 master，点击部署即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411205821.png" alt="部署环境"></p><p>第一次部署需要花点时间。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411205846.png" alt="部署过程"></p><ol><li><p>评论管理。访问设置的二级域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://二级域名.leanapp.cn/sign-up</span><br></pre></td></tr></table></figure><p>，注册管理员登录信息，如：</p><p><a href="https://deserts.leanapp.cn/sign-up">https://deserts.leanapp.cn/sign-up</a></p><blockquote><p>注：使用原版 Valine 如果遇到注册页面不显示直接跳转至登录页的情况，请手动删除_User 表中的全部数据。</p></blockquote></li></ol><p>此后，可以通过<code>https://二级域名.leanapp.cn/</code>管理评论。</p><ol><li>定时任务设置</li></ol><p>目前实现了两种云函数定时任务：</p><ul><li>(1)自动唤醒，定时访问 Web APP 二级域名防止云引擎休眠；.</li><li>(2)每天定时检查 24 小时内漏发的邮件通知。</li></ul><p>进入云引擎-定时任务中，创建定时器，创建两个定时任务。</p><p>选择<code>self-wake</code>云函数，Cron 表达式为<code>0 0/30 7-23 * * ?</code>，表示每天早 6 点到晚 23 点每隔 30 分钟访问云引擎，<code>ADMIN_URL</code>环境变量务必设置正确：</p><p><img src="https://cloud.panjunwen.com/2018/09/ping-mu-kuai-zhao-2018-09-18-xia-wu-2-57-43.png" alt="唤醒云引擎"></p><p>选择<code>resend-mails</code>云函数，Cron 表达式为<code>0 0 8 * * ?</code>，表示每天早 8 点检查过去 24 小时内漏发的通知邮件并补发：</p><p><img src="https://cloud.panjunwen.com/2018/09/ping-mu-kuai-zhao-2018-09-18-xia-wu-2-57-53.png" alt="通知检查"></p><p><strong>添加定时器后记得点击启动方可生效。</strong></p><p><strong>至此，Valine Admin 已经可以正常工作，更多以下是可选的进阶配置。</strong></p><h4 id="邮件通知模板"><a href="#邮件通知模板" class="headerlink" title="邮件通知模板"></a>邮件通知模板</h4><p>邮件通知模板在云引擎环境变量中设定，可自定义通知邮件标题及内容模板。</p><table><thead><tr><th align="left">环境变量</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">MAIL_SUBJECT</td><td align="left">${PARENT_NICK}，您在${SITE_NAME}上的评论收到了回复</td><td align="left">[可选]@通知邮件主题（标题）模板</td></tr><tr><td align="left">MAIL_TEMPLATE</td><td align="left">见下文</td><td align="left">[可选]@通知邮件内容模板</td></tr><tr><td align="left">MAIL_SUBJECT_ADMIN</td><td align="left">${SITE_NAME}上有新评论了</td><td align="left">[可选]博主邮件通知主题模板</td></tr><tr><td align="left">MAIL_TEMPLATE_ADMIN</td><td align="left">见下文</td><td align="left">[可选]博主邮件通知内容模板</td></tr></tbody></table><p>邮件通知包含两种，分别是被@通知和博主通知，这两种模板都可以完全自定义。默认使用经典的蓝色风格模板（样式来源未知）。</p><p>默认被@通知邮件内容模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    您在<span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;text-decoration:none;color: #12ADDB;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;$&#123;SITE_URL&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      $&#123;SITE_NAME&#125;&lt;/a</span><br><span class="line">    &gt;上的评论有了新的回复</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  $&#123;PARENT_NICK&#125; 同学，您曾发表评论：</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding:0 12px 0 12px;margin-top:18px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      $&#123;PARENT_COMMENT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;NICK&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>回复说：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      $&#123;COMMENT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      您可以点击<span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;text-decoration:none; color:#12addb&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">&quot;$&#123;POST_URL&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>查看回复的完整內容&lt;/a</span><br><span class="line">      &gt;，欢迎再次光临<span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;text-decoration:none; color:#12addb&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">&quot;$&#123;SITE_URL&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>$&#123;SITE_NAME&#125;&lt;/a</span><br><span class="line">      &gt;。<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="https://cloud.panjunwen.com/2018/09/wei-ming-ming.png" alt="mail-blue-template"></p><p>@通知模板中的可用变量如下（注，这是邮件模板变量，是指嵌入到 HTML 邮件模板中的变量，请勿与云引擎环境变量混淆）：</p><table><thead><tr><th align="left">模板变量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">SITE_NAME</td><td align="left">博客名称</td></tr><tr><td align="left">SITE_URL</td><td align="left">博客首页地址</td></tr><tr><td align="left">POST_URL</td><td align="left">文章地址（完整路径）</td></tr><tr><td align="left">PARENT_NICK</td><td align="left">收件人昵称（被@者，父级评论人）</td></tr><tr><td align="left">PARENT_COMMENT</td><td align="left">父级评论内容</td></tr><tr><td align="left">NICK</td><td align="left">新评论者昵称</td></tr><tr><td align="left">COMMENT</td><td align="left">新评论内容</td></tr></tbody></table><p>默认博主通知邮件内容模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;</span>&gt;</span>您在<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none;color: #12ADDB;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;SITE_URL&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>$&#123;SITE_NAME&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>上的文章有了新的评论<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;NICK&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>回复说：<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;</span>&gt;</span> $&#123;COMMENT&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>您可以点击<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none; color:#12addb&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;POST_URL&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>查看回复的完整內容<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>博主通知邮件模板中的可用变量与@通知中的基本一致，**<code>PARENT_NICK</code> 和 <code>PARENT_COMMENT</code> 变量不再可用。**</p><p>这里还提供一个彩虹风格的@通知邮件模板代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;border-radius: 10px 10px 10px 10px;font-size:13px;    color: #555555;width: 666px;font-family:&#x27;Century Gothic&#x27;,&#x27;Trebuchet MS&#x27;,&#x27;Hiragino Sans GB&#x27;,微软雅黑,&#x27;Microsoft Yahei&#x27;,Tahoma,Helvetica,Arial,&#x27;SimSun&#x27;,sans-serif;margin:50px auto;border:1px solid #eee;max-width:100%;background: #ffffff repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 1px 5px rgba(0, 0, 0, 0.15);&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;width:100%;background:#49BDAD;color:#ffffff;border-radius: 10px 10px 0 0;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;font-size:15px;word-break:break-all;padding: 23px 32px;margin:0;background-color: hsla(0,0%,100%,.4);border-radius: 10px 10px 0 0;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      您在<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none;color: #ffffff;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;SITE_URL&#125;&quot;</span>&gt;</span></span><br><span class="line">        $&#123;SITE_NAME&#125;&lt;/a</span><br><span class="line">      &gt;上的留言有新回复啦！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin:40px auto;width:90%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;PARENT_NICK&#125; 同学，您曾在文章上发表评论：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      $&#123;PARENT_COMMENT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;NICK&#125; 给您的回复如下：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      $&#123;COMMENT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      您可以点击<span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;text-decoration:none; color:#12addb&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">&quot;$&#123;POST_URL&#125;#comments&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>查看回复的完整內容&lt;/a</span><br><span class="line">      &gt;，欢迎再次光临<span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;text-decoration:none; color:#12addb&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">&quot;$&#123;SITE_URL&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        $&#123;SITE_NAME&#125;&lt;/a</span><br><span class="line">      &gt;。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图：</p><p><img src="https://cloud.panjunwen.com/2018/09/ping-mu-kuai-zhao-2018-09-15-xia-wu-5-17-21.png" alt="彩虹模板"></p><h4 id="垃圾评论检测"><a href="#垃圾评论检测" class="headerlink" title="垃圾评论检测"></a>垃圾评论检测</h4><blockquote><p>Akismet (Automattic Kismet)是应用广泛的一个垃圾留言过滤系统，其作者是大名鼎鼎的 WordPress 创始人 Matt Mullenweg，Akismet 也是 WordPress 默认安装的插件，其使用非常广泛，设计目标便是帮助博客网站来过滤留言 Spam。有了 Akismet 之后，基本上不用担心垃圾留言的烦恼了。<br>启用 Akismet 后，当博客再收到留言会自动将其提交到 Akismet 并与 Akismet 上的黑名单进行比对，如果名列该黑名单中，则该条留言会被标记为垃圾评论且不会发布。</p></blockquote><p>如果还没有 Akismet Key，你可以去 <a href="https://akismet.com/development/">AKISMET FOR DEVELOPERS 免费申请一个</a>；<br><strong>当 AKISMET_KEY 设为 MANUAL_REVIEW 时，开启人工审核模式；</strong><br>如果你不需要反垃圾评论，Akismet Key 环境变量可以忽略。</p><p><strong>为了实现较为精准的垃圾评论识别，采集的判据除了评论内容、邮件地址和网站地址外，还包括评论者的 IP 地址、浏览器信息等，但仅在云引擎后台使用这些数据，确保隐私和安全。</strong></p><p><strong>如果使用了本站最新的 Valine 和 Valine Admin，并设置了 Akismet Key，可以有效地拦截垃圾评论。被标为垃圾的评论可以在管理页面取消标注。</strong></p><table><thead><tr><th align="left">环境变量</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">AKISMET_KEY</td><td align="left">xxxxxxxxxxxx</td><td align="left">[可选]Akismet Key 用于垃圾评论检测</td></tr></tbody></table><h4 id="防止云引擎休眠"><a href="#防止云引擎休眠" class="headerlink" title="防止云引擎休眠"></a>防止云引擎休眠</h4><p>关于自动休眠的官方说法：<a href="https://leancloud.cn/docs/leanengine_plan.html#hash633315134">点击查看</a></p><p>目前最新版的 Valine Admin 已经可以实现自唤醒，即在 LeanCloud 云引擎中定时请求 Web 应用地址防止休眠。对于夜间休眠期漏发的邮件通知，自动在次日早上补发。<strong>务必确保配置中设置了 ADMIN_URL 环境变量，并在第 5 步添加了两个云函数定时任务。</strong></p><h4 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h4><ul><li><p>部署失败，请在评论中附图，或去 Github 发起 Issue</p></li><li><p>邮件发送失败，确保环境变量都没问题后，重启云引擎</p><p><img src="https://cloud.panjunwen.com/2018/09/ping-mu-kuai-zhao-2018-09-15-xia-wu-5-22-56.png" alt="重启云引擎"></p></li><li><p>博主通知模板中不要出现<code>PARENT*</code>相关参数（请勿混用模板）</p></li><li><p>点击邮件中的链接跳转至相应评论，这一细节实现需要一点额外的代码：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> checkExist = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> ($(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>).<span class="property">length</span>) &#123;</span><br><span class="line">              $(<span class="string">&#x27;html, body&#x27;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">scrollTop</span>: $(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>).<span class="title function_">offset</span>().<span class="property">top</span>-<span class="number">90</span>&#125;, <span class="number">1000</span>);</span><br><span class="line">              <span class="built_in">clearInterval</span>(checkExist);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>自定义邮件服务器地址和端口信息，删除 SMTP_SERVICE 环境变量，新增以下变量：</li></ul><table><thead><tr><th align="left">变量</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">SMTP_HOST</td><td align="left">smtp.qq.com</td><td align="left">[可选]SMTP_SERVICE 留空时，自定义 SMTP 服务器地址</td></tr><tr><td align="left">SMTP_PORT</td><td align="left">465</td><td align="left">[可选]SMTP_SERVICE 留空时，自定义 SMTP 端口</td></tr><tr><td align="left">SMTP_SECURE</td><td align="left">true</td><td align="left">[可选]SMTP_SERVICE 留空时填写</td></tr></tbody></table><ul><li>这是我的环境变量配置。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411210226.png" alt="环境变量配置"></p><h2 id="可能遇到的一些问题"><a href="#可能遇到的一些问题" class="headerlink" title="可能遇到的一些问题"></a>可能遇到的一些问题</h2><h3 id="部署失败"><a href="#部署失败" class="headerlink" title="部署失败"></a>部署失败</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200411210908.png" alt="部署失败"></p><p>这种情况是 node 的问题，你需要把项目 fork 到自己的仓库，并且修改<code>package.json</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;engines&quot;: &#123;</span><br><span class="line">  &quot;node&quot;: &quot;6.x&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;engines&quot;: &#123;</span><br><span class="line">  &quot;node&quot;: &quot;12.x&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把代码库改为你 fork 下来的仓库即可。</p><div class="note success flat"><p>目前作者好像已经修复了这个问题。(2020.4.26)</p></div><h3 id="邮件发送失败"><a href="#邮件发送失败" class="headerlink" title="邮件发送失败"></a>邮件发送失败</h3><p>可能是被判定为垃圾邮件被拒收了。我最开始使用的 126 邮箱，刚刚开始还可以，后面发送邮件全部被拒，查了一下，是因为被判定为垃圾邮件了，我就换成了 outlook 邮箱。具体的失败信息，可以查看 云引擎》应用日志 。在日志中可以查看失败的具体原因。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/DesertsP/Valine-Admin">Valine-Admin</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习题</title>
      <link href="/archives/2f89d13b.html"/>
      <url>/archives/2f89d13b.html</url>
      
        <content type="html"><![CDATA[<h4 id="2020-4-12"><a href="#2020-4-12" class="headerlink" title="2020.4.12"></a>2020.4.12</h4><p>当我们这样做的时候会发生什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;woof!&quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">bark.animal = &quot;</span>dog<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> A：Nothing,this is totally fine!</li><li><input disabled="" type="checkbox"> B：SyntaxError. You cannot add properties to a function this way.</li><li><input disabled="" type="checkbox"> C：Undefind</li><li><input disabled="" type="checkbox"> D：ReferenceError</li></ul><div class="note success flat"><p>解析：A。这在 JavaScript 中是可能的，因为函数也是对象！（原始类型之外的所有东西都是对象）。函数是一种特殊类型的对象，自己编写的代码并不是实际的函数。该函数是具有属性的对象，此属性是可调用的。</p></div><hr><h4 id="2020-4-13"><a href="#2020-4-13" class="headerlink" title="2020.4.13"></a>2020.4.13</h4><p>下面的代码会输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Lydia&#x27;</span>, <span class="string">&#x27;Hallie&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sarah = <span class="title class_">Person</span>(<span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lydia)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sarah)</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> A：Person{fistName: “Lydia”, lastName:”Hallie”} and undefined</li><li><input disabled="" type="checkbox"> B：Person{fistName: “Lydia”, lastName:”Hallie”} and Person{fistName: “Sarah”, lastName:”Smith”}</li><li><input disabled="" type="checkbox"> C：Person{fistName: “Lydia”, lastName:”Hallie”} and {}</li><li><input disabled="" type="checkbox"> D：Person{fistName: “Lydia”, lastName:”Hallie”} and ReferenceError</li></ul><div class="note success flat"><p>解析：A。对于 sarah，我们没有使用 new 关键字。使用 new 时，它指的是我们创建的新空对象，但是，如果你不添加 new，它指的是全局对象！我们制定了 this.firstName = “Sarah”和 this.lastName = “Samith”。我们实际做的是定于 global.firstName = “Sarah”和 global.lastName = “Samith”。sarah 本身返回值是 undefined。</p></div><hr><h4 id="2020-4-14"><a href="#2020-4-14" class="headerlink" title="2020.4.14"></a>2020.4.14</h4><p>下面代码的输出是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number++)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++number)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> A：1 1 2</li><li><input disabled="" type="checkbox"> B：1 2 2</li><li><input checked="" disabled="" type="checkbox"> C：0 2 2</li><li><input disabled="" type="checkbox"> D：0 1 2</li></ul><div class="note success flat"><p>解析：C。</p><ul><li><strong>后缀</strong> 一元运算符++：<ul><li>1、返回值（返回 0）；</li><li>2、增加值（现在数值是 1）。</li></ul></li><li><strong>前缀</strong> 一元运算符++：<ul><li>1、增加值（现在数值是 2）</li><li>2、返回值（返回 2）</li></ul></li><li>所以返回 0 2 2</li></ul></div><hr><h4 id="2020-4-15"><a href="#2020-4-15" class="headerlink" title="2020.4.15"></a>2020.4.15</h4><p>单击按钮时 <code>event.tatget</code> 是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">&quot;console.log(&#x27;first dib&#x27;)&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;second div)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;button&#x27;)&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> A：div 外部</li><li><input disabled="" type="checkbox"> B：div 内部</li><li><input checked="" disabled="" type="checkbox"> C：button</li><li><input disabled="" type="checkbox"> D：所有嵌套元素的数组</li></ul><div class="note success flat"><p>解析：C。导致事件的最深嵌套元素是事件的目标。你可以通过<code>event.stopPropagation</code> 停止冒泡。</p></div><hr><h4 id="2020-4-16"><a href="#2020-4-16" class="headerlink" title="2020.4.16"></a>2020.4.16</h4><p>下面代码的输出是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">date</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (data === &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You are an abult&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You are still an abult&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hmm..You donot have an age I guess&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkAge</span>(&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> A：You are an abult</li><li><input disabled="" type="checkbox"> B：You are still an abult</li><li><input checked="" disabled="" type="checkbox"> C：Hmm..You donot have an age I guess</li></ul><div class="note success flat"><p>解析：C。在比较相等性，原始类型通过它们的值进行比较，而对象通过它们的引用进行比较。JavaScript 检查对象是否具有对内存中相同位置的引用。我们作为参数传递的对象和我们用于检查相等性的对象在内存中位于不同的位置，所以它们的引用是不同的。</p><p>这就是为什么 {age:18} === {age:18} 和 {age:18} == {age:18} 返回 false 的原因。</p></div><hr><h4 id="2020-4-17"><a href="#2020-4-17" class="headerlink" title="2020.4.17"></a>2020.4.17</h4><p>下面代码输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> A：NaN</li><li><input disabled="" type="checkbox"> B：TypeError</li><li><input checked="" disabled="" type="checkbox"> C：”12”</li><li><input disabled="" type="checkbox"> D：3</li></ul><div class="note success flat"><p>解析：C。JavaScript 是一种动态类型语言：我们没有指定某些变量的类型。在您不知道的情况下，值可以自动转换为另一类型，称为隐式类型转换。 强制从一种类型转换为另一种类型。</p><p>在此示例中，JavaScript 将数字 1 转换为字符串，以使函数有意义并返回值。在让数字类型<code>1</code>和字符串类型<code>“2”</code>相加时，该数字被视为字符串。我们可以像连接<code> “hello”</code> +<code>“world”</code> 这样的字符串，所以这里发生的是<code>“1”</code>+<code>2”</code>，返回<code>“12” </code></p></div><hr><h4 id="2020-4-18"><a href="#2020-4-18" class="headerlink" title="2020.4.18"></a>2020.4.18</h4><p>所有对象都有原型？</p><ul><li><input disabled="" type="checkbox"> A：对</li><li><input checked="" disabled="" type="checkbox"> B：错误</li></ul><div class="note success flat"><p>解析：B。除基础对象外，所有对象都有原型。基础对象可以访问某些方法和属性，例如：<code>toString</code> 。这就是你可以使用内置 JavaScript 方法的原因！所有这些方法都可以在原型上找到。虽然 JavaScript 无法直接在你的对象上找到它，但它会沿着原型链向下寻找并在那里找到它，这使你可以访问它。</p><p>注：基础对象指原型链终点的对象。基础对象的原型是 <code>null</code></p></div><hr><h4 id="2020-4-19"><a href="#2020-4-19" class="headerlink" title="2020.4.19"></a>2020.4.19</h4><p>下面代码输出的是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;one&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;two&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;three&#x27;</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> A：{a:”noe”, b:”two”}</li><li><input disabled="" type="checkbox"> B：{ b:”two”, a:”three”}</li><li><input checked="" disabled="" type="checkbox"> C：{a:”three”, b:”two”}</li><li><input disabled="" type="checkbox"> D：SyntaxError</li></ul><div class="note success flat"><p>解析：C。如果对象有两个具有相同名称的键，则将替换前面的键。它仍然处于原来的位置，但具有最后指定的值。</p></div><hr><h4 id="2020-4-20"><a href="#2020-4-20" class="headerlink" title="2020.4.20"></a>2020.4.20</h4><p>简述箭头函数和普通函数的区别？能不能作为构造函数？</p><ul><li><p>语法更加简洁、清晰</p></li><li><p>箭头函数不会创建自己的 this</p></li><li><p>箭头函数继承而来的 this 指向永远不变</p></li><li><p><code>.call()</code> / <code>.apply()</code> / <code>.bind()</code> 无法改变箭头函数中 this 的指向</p></li><li><p>箭头函数不能作为构造函数使用</p></li><li><p>箭头函数没有自己的 arguments</p></li><li><p>箭头函数没有原型 prototype</p></li><li><p>箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</p></li></ul><hr><h4 id="2020-4-21"><a href="#2020-4-21" class="headerlink" title="2020.4.21"></a>2020.4.21</h4><p>下面代码的输出是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">  age = <span class="number">21</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getAge</span>()</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> A：21</li><li><input disabled="" type="checkbox"> B：undefined</li><li><input checked="" disabled="" type="checkbox"> C：ReferenceError</li><li><input disabled="" type="checkbox"> D：TypeError</li></ul><div class="note success flat"><p>解析：C。使用 <code>use strict </code> 可以确保不会意外的声明全局变量。我们从未声明变量 <code>age</code> ,因此我们使用 <code>use strict</code> ，它会引发一个 ReferenceError。如果我们不使用 <code>use strict </code> ，它就会起作用，因为属性 <code>age</code> 会被添加到全局对象中。</p></div><hr><h4 id="2020-4-22"><a href="#2020-4-22" class="headerlink" title="2020.4.22"></a>2020.4.22</h4><p>下面的代码输出是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="built_in">eval</span>(<span class="string">&#x27;10*10+5&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> A：105</li><li><input disabled="" type="checkbox"> B：”105”</li><li><input disabled="" type="checkbox"> C：TypeError</li><li><input disabled="" type="checkbox"> D：”10-10+5”</li></ul><div class="note success flat"><p>解析：A.。<code>eval</code> 会为字符串传递的代码求值。如果它是一个表达式，现在这种情况下一样，它会计算表达式。表达式为 <code>10*10+5</code> 计算得到 <code>105</code> 。</p></div><hr><h4 id="2020-4-23"><a href="#2020-4-23" class="headerlink" title="2020.4.23"></a>2020.4.23</h4><p>单击下面的 <code>html</code> 片段打印的内容是什么?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">&quot;console.log(&#x27;div&#x27;)&gt;</span></span><br><span class="line"><span class="string">  &lt;p onclick=&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p&#x27;</span>)<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    Click Here!</span></span><br><span class="line"><span class="string">  &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> A：p div</li><li><input disabled="" type="checkbox"> B：div p</li><li><input disabled="" type="checkbox"> C：p</li><li><input disabled="" type="checkbox"> D：div</li></ul><div class="note success flat"><p>解析：A。如果我们单击 <code>p</code> 我们会看到两个日志， <code>p</code> 和 <code>div</code> 。在事件传播期间，有三个阶段：捕获，目标和冒泡。默认情况下，事件处理程序在冒泡阶段执行（除非您将 <code>useCapture</code> 设置为 <code>true</code> ）。它从最深的嵌套元素向外延伸。</p></div><hr><h4 id="2020-4-24"><a href="#2020-4-24" class="headerlink" title="2020.4.24"></a>2020.4.24</h4><p>下面代码的输出是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">giveLydiaPizza</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Just give Lydia pizza already!“</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">const name = &quot;</span><span class="title class_">Lydia</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">name.giveLydiaPizza()</span></span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> A：”Just give Lydia pizza already!“</li><li><input disabled="" type="checkbox"> B：TypeError:not a function</li><li><input disabled="" type="checkbox"> C：SyntaxError</li><li><input disabled="" type="checkbox"> D：undefined</li></ul><div class="note success flat"><p>解析：A。<code>String</code> 是一个内置的构造函数，我们可以为它添加属性。我刚给它的原型添加了一个方法。原始类型的字符串自动转换为字符串对象，由字符串原型函数生成。因此，所有字符串（字符串对象）都可以访问该方法。</p><p>注：当使用基本类型的字符串调用 <code>giveLydiaPizza</code> 时，实际上发生了下面的过程：</p><ul><li>创建一个 <code>String</code> 的包装类型实例</li><li>在实例上调用 <code>substring</code> 方法</li><li>销毁实例</li></ul></div><hr><h4 id="2020-4-25"><a href="#2020-4-25" class="headerlink" title="2020.4.25"></a>2020.4.25</h4><p>下面代码的输出是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> A：”number”</li><li><input checked="" disabled="" type="checkbox"> B：”string”</li><li><input disabled="" type="checkbox"> C：”object”</li><li><input disabled="" type="checkbox"> D：”undefined”</li></ul><div class="note success flat"><p>解析：B。<code>typeof 1</code> 返回 <code>“number”</code> ，<code>typeof &quot;number&quot;</code> 返回 <code>&quot;string&quot;</code></p></div><hr><h4 id="2020-4-26"><a href="#2020-4-26" class="headerlink" title="2020.4.26"></a>2020.4.26</h4><p>下面代码的输出是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">numbers[<span class="number">10</span>] = <span class="number">11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers)</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> A：[1, 2, 3, 7 x null, 11]</li><li><input disabled="" type="checkbox"> B：[1, 2, 3, 11]</li><li><input checked="" disabled="" type="checkbox"> C：[1, 2, 3, 7 x empty, 11]</li><li><input disabled="" type="checkbox"> D：SyntaxError</li></ul><div class="note success flat"><p>解析：C。当你为数组中的元素设置一个超过数组长度的值是，JavaScript 会创建一个名为 “空插槽” 的东西。这些位置的值实际上是 <code>undefined</code> ,但你会看到类似的东西：<code>[1, 2, 3, 7xempty, 11]</code> 这取决于你运行它的位置（每个浏览器有可能不同）。</p></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 习题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 每天进步一点点 </tag>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十五)：代码块折叠效果</title>
      <link href="/archives/ce7a0d96.html"/>
      <url>/archives/ce7a0d96.html</url>
      
        <content type="html"><![CDATA[<p>实现一个小的代码块折叠的功能，示例如下</p><details>  <summary style="color:red">屠龙宝刀点击就送</summary>  我系渣渣辉，是兄弟就添加友链!</details><p>实现方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">  &lt;summary&gt;屠龙宝刀点击就送&lt;/summary&gt;</span><br><span class="line">  我系渣渣辉，是兄弟就添加友链！</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><p>原理：这是采用了 HTML5 中的新标签。</p><p><code>&lt;summary&gt; </code>标签包含 details 元素的标题，”details” 元素用于描述有关文档或文档片段的详细信息。</p><p>与 <code>&lt;details&gt;</code>一起使用。标题是可见的，当用户点击标题时会显示出详细信息。</p><p>“summary” 元素应该是 “details” 元素的第一个子元素。</p><p>缺点：兼容性不好，只有 Chrome 以及 Safari 6 支持 <code>&lt;summary&gt;</code> 标签。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十四)：修改页面布局为圆角的BUG解决</title>
      <link href="/archives/92c1fbae.html"/>
      <url>/archives/92c1fbae.html</url>
      
        <content type="html"><![CDATA[<p>修改页面布局为圆形：你可以参考这篇文章 <a href="/archives/5b20fbd0.html">关于博客主题持续更新的问题和我的新配置方式</a></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200409183513.png"></p><p>然后我们会遇到这样一个问题，这里始终会有个白块，解决方案很简单，你只需要在<code>source\_data\styles.styl</code> 文件中添加一行代码即可：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:root&#123;<span class="attr">--body-bg-color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,<span class="number">0</span>)&#125;</span><br></pre></td></tr></table></figure><p>或者添加下列代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: none</span><br><span class="line"><span class="attribute">background</span>: none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十三)：关于博客主题持续更新的问题和我的新配置方式</title>
      <link href="/archives/5b20fbd0.html"/>
      <url>/archives/5b20fbd0.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么使用-next？"><a href="#为什么使用-next？" class="headerlink" title="为什么使用 next？"></a>为什么使用 next？</h2><p>一方面是 next 的简洁深得我心，我一向喜欢这种极简的小清新风格，另一方面就是因为 Next 主题的用户量大，易于维护和定制，有很多优秀的自定义教程可供参考。</p><p>当然最重要的是因为，Next 主题更新及时，维护者也很多，基本上隔一段时间就会有新的版本发布。</p><h2 id="为什么要更新？"><a href="#为什么要更新？" class="headerlink" title="为什么要更新？"></a>为什么要更新？</h2><p>由于之前对 Next 进行了很多自定义的修改，包括对源码的一些修改，但我在看见 Next 发布新版本后，我就尝试了进行更新，但是出现了很多问题，因为对源码进行了修改，在使用 <code>git pull </code> 的方式来更新的时候，就会出现文件冲突，手动合并冲突真的是一件让人头疼且很累的事情。</p><p>当然，我们也可以选择不更新，就这么使用下去，但是很明显，这有悖于我的初心，作为一个开发者，我们应该让自己的代码是易于维护，另一方面在 Next 主题发布新版本时，必然会带来一些新的特性，而我更喜欢尝试新的东西。</p><p>所以这次，我对博客进行了一次重新配置，通过数据文件的方式，将配置和主题分离开来，同时也把自定义布局，样式等都放到数据文件中，避免对主题源码的修改，以便于后续的更新。</p><div class="note flat"><p>当然，大部分的配置你仍然可以参考我之前的文章，只不过稍微改动一下即可。这里只记录部分我新添加的改动。</p></div><div class="note danger flat"><p>V8.0 版本后模板文件格式变更为了 <code>njk</code>。</p></div><h2 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h2><p>自从 NexT-7.3.0 开始，官方推荐采用数据文件将配置与主题分离，这样我们可以在不修改主题源码的同时完成选项配置、自定义布局、自定义样式，便于后续 NexT 版本更新。</p><p>你可以点击 <a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/DATA-FILES.md">这里</a> 来查看数据文件的详细介绍。</p><h3 id="next-yml"><a href="#next-yml" class="headerlink" title="next.yml"></a>next.yml</h3><p>我们可以将所有主题配置放在一个位置<code>hexo/source/_data/next.yml</code>。这样就无需编辑主题配置文件<code>next/_config.yml</code>。</p><p>具体步骤：</p><ol><li>在 <code>hexo/source/_data</code> 目录中创建 <code>next.yml</code>（如果<code>_data</code> 不存在，则创建目录）。</li><li>在 <code>next.yml</code> 设置 <code>override</code> 选项为 false。</li><li>将<strong>我们需要的配置项</strong>从主题配置文件复制到 <code>hexo/source/_data/next.yml</code> 中。</li></ol><p>然后我们只需要根据自己的需求配置 <code>next.yml</code> 即可。</p><h3 id="languages-yml"><a href="#languages-yml" class="headerlink" title="languages.yml"></a>languages.yml</h3><p>我们原来是通过配置主题下的 <code>languages</code> 目录中的 <code>zh-CN.yml</code> 文件来对菜单等进行中文翻译的，现在我们可以通过在 <code>hexo/source/_data/</code> 下新建数据文件 <code>languages.yml</code>，配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zh-CN:</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">    <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">    <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">    <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">    <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">    <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br><span class="line">    <span class="attr">message:</span> <span class="string">留言</span></span><br><span class="line">    <span class="attr">links:</span> <span class="string">友情链接</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">reward:</span></span><br><span class="line">    <span class="attr">donate:</span> <span class="string">打赏</span></span><br><span class="line">    <span class="attr">wechatpay:</span> <span class="string">微信支付</span></span><br><span class="line">    <span class="attr">alipay:</span> <span class="string">支付宝</span></span><br><span class="line">    <span class="attr">paypal:</span> <span class="string">贝宝</span></span><br><span class="line">    <span class="attr">bitcoin:</span> <span class="string">比特币</span></span><br></pre></td></tr></table></figure><h3 id="styles-styl"><a href="#styles-styl" class="headerlink" title="styles.styl"></a>styles.styl</h3><p>我们只需要把全部自定义样式放到 <code>hexo/source/_data/styles.styl</code> 即可。</p><p>然后在 NexT 的配置文件 <code>next.yml</code> 中取消 <code>styles.styl</code> 的注释：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><h3 id="variables-styl"><a href="#variables-styl" class="headerlink" title="variables.styl"></a>variables.styl</h3><h4 id="圆角设置"><a href="#圆角设置" class="headerlink" title="圆角设置"></a>圆角设置</h4><p>在自定义样式文件 <code>variables.styl</code> 中添加：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆角设置</span></span><br><span class="line"><span class="variable">$border</span>-radius-inner     = <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="variable">$border</span>-radius           = <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><p>然后在 NexT 的配置文件 <code>next.yml</code> 中取消 <code>variables.styl</code> 的注释：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line"> variables: source/_data/variables.styl</span><br></pre></td></tr></table></figure><h3 id="post-meta-swig"><a href="#post-meta-swig" class="headerlink" title="post-meta.swig"></a>post-meta.swig</h3><h4 id="置顶文章标志"><a href="#置顶文章标志" class="headerlink" title="置顶文章标志"></a>置顶文章标志</h4><p>首先我们需要安装 <code>hexo-generator-index-pin-top</code> 这个插件。</p><p>然后将以下代码放入 <code>hexo/source/_data/post-meta.swig</code> 文件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> post.top <span class="operator">%</span>&#125;</span><br><span class="line">    <span class="operator">&lt;</span>span <span class="keyword">class</span>=&quot;<span class="title class_">post</span>-<span class="title class_">meta</span>-<span class="title class_">divider</span>&quot;&gt;|&lt;/<span class="title class_">span</span>&gt;</span><br><span class="line">    &lt;<span class="title class_">i</span> <span class="title class_">class</span>=&quot;<span class="title class_">fa</span> <span class="title class_">fa</span>-<span class="title class_">thumb</span>-<span class="title class_">tack</span>&quot;&gt;&lt;/<span class="title class_">i</span>&gt;</span><br><span class="line">    &lt;<span class="title class_">font</span> <span class="title class_">color</span>=7<span class="title class_">D26CD</span>&gt;置顶&lt;/<span class="title class_">font</span>&gt;</span><br><span class="line">    &lt;<span class="title class_">span</span> <span class="title class_">class</span>=&quot;<span class="title class_">post</span>-<span class="title class_">meta</span>-<span class="title class_">divider</span>&quot;&gt;|&lt;/<span class="title class_">span</span>&gt;</span><br><span class="line">&#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><p>然后在 Next 的配置文件 <code>next.yml</code> 中取消 <code>post-meta.swig</code> 的注释：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  post<span class="operator">-</span>meta: source<span class="operator">/</span>_data<span class="operator">/</span>post<span class="operator">-</span>meta.swig</span><br></pre></td></tr></table></figure><h2 id="JS-文件"><a href="#JS-文件" class="headerlink" title="JS 文件"></a>JS 文件</h2><p>原本自己新建、定义的 JS 文件，比如点击特效等等，全部搬迁到 <code>hexo/source/_date/js</code> 文件夹下</p><h2 id="其他的一些配置"><a href="#其他的一些配置" class="headerlink" title="其他的一些配置"></a>其他的一些配置</h2><p>你可以参考这篇文章：<a href="https://blog.juanertu.com/archives/264a3045.html">Next 主题配置及美化</a> 在大部分配置中，已经采用了数据文件的方式进行配置。</p><h2 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h2><p>当然，为了不修改源码，原本还有一些自定义的修改，都被我摒弃掉了，不过影响也不大，你也可以尝试一下，这种配置的方法，这里我备份了一份我目前正在使用的配置方案，直接下载即可使用：<a href="https://github.com/constown/blog_back">https://github.com/constown/blog_back</a></p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://tding.top/archives/2bd6d82.html">版本更新记录</a></p><p>并感谢丁同学的指点：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200409210727.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十二)：本博客使用插件备忘</title>
      <link href="/archives/9898af63.html"/>
      <url>/archives/9898af63.html</url>
      
        <content type="html"><![CDATA[<p>最近对博客主题进行了一次升级，顺便在这里记录一下本博客使用的插件，做个备忘。</p><table><thead><tr><th align="center">插件</th><th align="center">功能</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">hexo-deployer-git</td><td align="center">一键部署</td><td align="center">^2.1.0</td></tr><tr><td align="center">hexo-symbols-count-time</td><td align="center">字数统计与阅读时长</td><td align="center">^0.7.1</td></tr><tr><td align="center">hexo-generator-searchdb</td><td align="center">本地搜索</td><td align="center">^1.2.0</td></tr><tr><td align="center">hexo-abbrlink</td><td align="center">url 持久化</td><td align="center">^2.0.5</td></tr><tr><td align="center">hexo-filter-nofollow</td><td align="center">减少出站链接</td><td align="center">^2.0.2</td></tr><tr><td align="center">hexo-baidu-url-submit</td><td align="center">百度推送</td><td align="center">^0.0.6</td></tr><tr><td align="center">hexo-generator-baidu-sitemap</td><td align="center">百度站点地图</td><td align="center">^0.1.6</td></tr><tr><td align="center">hexo-generator-index-pin-top</td><td align="center">置顶</td><td align="center">^0.2.2</td></tr><tr><td align="center">hexo-neat</td><td align="center">博文压缩</td><td align="center">^1.0.4</td></tr><tr><td align="center">hexo-related-popular-posts</td><td align="center">相关文章推荐</td><td align="center">^4.0.0</td></tr><tr><td align="center">hexo-cake-moon-menu</td><td align="center">返回按钮</td><td align="center">^2.1.0</td></tr><tr><td align="center">hexo-generator-sitemap</td><td align="center">站点地图</td><td align="center">^2.0.0</td></tr><tr><td align="center">hexo-filter-emoji</td><td align="center">emoji 表情支持</td><td align="center">^2.2.1</td></tr><tr><td align="center">hexo-generator-archive</td><td align="center"></td><td align="center">^1.0.0</td></tr><tr><td align="center">hexo-generator-category</td><td align="center"></td><td align="center">^1.0.0</td></tr><tr><td align="center">hexo-generator-index</td><td align="center"></td><td align="center">^1.0.0</td></tr><tr><td align="center">hexo-generator-tag</td><td align="center"></td><td align="center">^1.0.0</td></tr><tr><td align="center">hexo-renderer-ejs</td><td align="center"></td><td align="center">^1.0.0</td></tr><tr><td align="center">hexo-renderer-stylus</td><td align="center"></td><td align="center">^1.1.0</td></tr><tr><td align="center">hexo-renderer-marked</td><td align="center"></td><td align="center">^2.0.0</td></tr><tr><td align="center">hexo-server</td><td align="center"></td><td align="center">^1.0.0</td></tr></tbody></table><div class="note danger flat"><p>注意：目前我以采用数据文件的方式进行更新，下文所指的<code>主题配置文件</code>，现在均指<code>hexo/soure/_data/next.yml</code></p></div><h2 id="Hexo-一键部署插件"><a href="#Hexo-一键部署插件" class="headerlink" title="Hexo 一键部署插件"></a>Hexo 一键部署插件</h2><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></li></ul><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后修改<code>站点配置文件</code> 中的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">git@github.com:constown/constown.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="字数和阅读时间统计插件"><a href="#字数和阅读时间统计插件" class="headerlink" title="字数和阅读时间统计插件"></a>字数和阅读时间统计插件</h2><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a></li></ul><h3 id="安装配置-1"><a href="#安装配置-1" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p><code>站点配置文件 </code>中添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="comment">#文章内是否显示</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 网页底部是否显示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&#x27;mins.&#x27;</span></span><br></pre></td></tr></table></figure><p>然后由于此插件集成在 NexT 中，然后修改<code>主题配置文件</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章字数统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-本地搜索功能"><a href="#Hexo-本地搜索功能" class="headerlink" title="Hexo 本地搜索功能"></a>Hexo 本地搜索功能</h2><h3 id="插件地址"><a href="#插件地址" class="headerlink" title="插件地址"></a>插件地址</h3><ul><li><a href="https://github.com/theme-next/hexo-generator-searchdb">hexo-generator-searchdb</a></li></ul><h3 id="安装配置-2"><a href="#安装配置-2" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>然后我们修改<code>站点配置文件</code>，添加如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>path：索引文件的路径，相对于站点根目录</li><li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li><li>limit：限制搜索的条目数</li></ul><p>然后修改<code>主题配置文件</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-文章永久链接插件"><a href="#Hexo-文章永久链接插件" class="headerlink" title="Hexo 文章永久链接插件"></a>Hexo 文章永久链接插件</h2><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></li></ul><h3 id="安装配置-3"><a href="#安装配置-3" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>然后我们可以在<code>站点配置文件</code>中修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.juanertu.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-减少出站链接"><a href="#Hexo-减少出站链接" class="headerlink" title="Hexo 减少出站链接"></a>Hexo 减少出站链接</h2><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://blog.skk.moe/post/hexo-filter-nofollow-joined-hexo-official-plugin/">hexo-filter-nofollow</a></li></ul><h3 id="安装配置-4"><a href="#安装配置-4" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure><p>再在<code>站点配置文件</code>中添加配置，将 <code>nofollow</code> 设置为 <code>true</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;exclude1.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;exclude2.com&#x27;</span></span><br></pre></td></tr></table></figure><p>这样，例外的链接将不会被加上 <code>nofollow</code> 属性。</p><h2 id="Hexo-百度主动推送"><a href="#Hexo-百度主动推送" class="headerlink" title="Hexo 百度主动推送"></a>Hexo 百度主动推送</h2><h3 id="地址-4"><a href="#地址-4" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/huiwang/hexo-baidu-url-submit">Hexo Baidu URL Submit</a></li></ul><h3 id="安装配置-5"><a href="#安装配置-5" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>在<code>站点配置文件</code>中添加以下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">5</span> <span class="comment">## 提交最新的1个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">tding.top</span> <span class="comment">## 百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="comment">## 准入秘钥</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-站点地图-sitemap-生成"><a href="#Hexo-站点地图-sitemap-生成" class="headerlink" title="Hexo 站点地图 sitemap 生成"></a>Hexo 站点地图 sitemap 生成</h2><h3 id="通用站点地图"><a href="#通用站点地图" class="headerlink" title="通用站点地图"></a>通用站点地图</h3><ul><li>地址：<a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></li></ul><p>安装配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>然后我们需要在 Hexo <code>站点配置文件</code>中加入 sitemap 插件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通用站点地图</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure><h3 id="百度站点地图"><a href="#百度站点地图" class="headerlink" title="百度站点地图"></a>百度站点地图</h3><ul><li>地址：<a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">Sitemap generator</a></li></ul><p>安装配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>具体配置类似通用站点地图，当然也可以看官方提供的教程，下面是一个简单的配置，我们在 Hexo <code>站点配置文件</code>中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度站点地图</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-文章置顶插件"><a href="#Hexo-文章置顶插件" class="headerlink" title="Hexo 文章置顶插件"></a>Hexo 文章置顶插件</h2><h3 id="地址-5"><a href="#地址-5" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a></li></ul><h3 id="安装配置-6"><a href="#安装配置-6" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save #卸载原来的插件</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>在需要置顶的文章的 <code>Front-matter</code> 中加上 <code>top: true</code> 或者 <code>top: 任意数字</code>，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">谢谢你来看我的博客</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">header:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="string">a8863134</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-01 12:10:10</span></span><br></pre></td></tr></table></figure><p><strong>注意：top 中数字越大，文章越靠前</strong>。</p><h3 id="设置置顶图标"><a href="#设置置顶图标" class="headerlink" title="设置置顶图标"></a>设置置顶图标</h3><p><del>打开 <code>/themes/next/layout/_macro/</code> 目录下的 <code>post.swig</code> 文件，在 <code>的第一个</code> 标签下，插入如下代码：</del></p><p>更新为将此代码放置到<code>hexo/source/_data/post-meta.swig</code> 文件中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> post.top <span class="operator">%</span>&#125;</span><br><span class="line">    <span class="operator">&lt;</span>i <span class="keyword">class</span>=&quot;<span class="title class_">fa</span> <span class="title class_">fa</span>-<span class="title class_">thumb</span>-<span class="title class_">tack</span>&quot;&gt;&lt;/<span class="title class_">i</span>&gt;</span><br><span class="line">    &lt;<span class="title class_">font</span> <span class="title class_">color</span>=7<span class="title class_">D26CD</span>&gt;置顶&lt;/<span class="title class_">font</span>&gt;</span><br><span class="line">    &lt;<span class="title class_">span</span> <span class="title class_">class</span>=&quot;<span class="title class_">post</span>-<span class="title class_">meta</span>-<span class="title class_">divider</span>&quot;&gt;|&lt;/<span class="title class_">span</span>&gt;</span><br><span class="line">&#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><p>next.yml 设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="bullet">-</span>  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">postMeta:</span> <span class="string">source/_data/post-meta.swig</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-页面静态资源压缩插件"><a href="#Hexo-页面静态资源压缩插件" class="headerlink" title="Hexo 页面静态资源压缩插件"></a>Hexo 页面静态资源压缩插件</h2><h3 id="地址-6"><a href="#地址-6" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/rozbo/hexo-neat">hexo-neat</a></li></ul><h3 id="安装配置-7"><a href="#安装配置-7" class="headerlink" title="安装配置"></a>安装配置</h3><h4 id="安装-hexo-neat-插件"><a href="#安装-hexo-neat-插件" class="headerlink" title="安装 hexo-neat 插件"></a>安装 hexo-neat 插件</h4><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><h4 id="站点配置文件添加相关配置"><a href="#站点配置文件添加相关配置" class="headerlink" title="站点配置文件添加相关配置"></a><code>站点配置文件</code>添加相关配置</h4><p>然后我们需要在<code>站点配置文件</code>中添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/jquery.fancybox.pack.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/index.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/fireworks.js&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-推荐文章插件"><a href="#Hexo-推荐文章插件" class="headerlink" title="Hexo 推荐文章插件"></a>Hexo 推荐文章插件</h2><h3 id="地址-7"><a href="#地址-7" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/tea3/hexo-related-popular-posts">hexo-related-popular-posts</a></li></ul><h3 id="安装配置-8"><a href="#安装配置-8" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure><p>我们只需要在<code>主题配置文件</code>中修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">相关文章推荐</span> <span class="comment"># Custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">PPMixingRate:</span> <span class="number">0.25</span></span><br><span class="line">    <span class="attr">isDate:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">isImage:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">isExcerpt:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-修改-back2top-标签"><a href="#Hexo-修改-back2top-标签" class="headerlink" title="Hexo 修改 back2top 标签"></a>Hexo 修改 back2top 标签</h2><h3 id="地址-8"><a href="#地址-8" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/jiangtj-lab/hexo-cake-moon-menu">hexo-cake-moon-menu</a></li></ul><h3 id="安装配置-9"><a href="#安装配置-9" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cake-moon-menu --save</span><br></pre></td></tr></table></figure><p>然后在<code>站点配置文件``_config.yml</code> 中添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">moon_menu:</span></span><br><span class="line">  <span class="attr">back2top:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-chevron-up</span></span><br><span class="line">    <span class="attr">func:</span> <span class="string">back2top</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">back2bottom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-chevron-down</span></span><br><span class="line">    <span class="attr">func:</span> <span class="string">back2bottom</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-2</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-添加-emoji-表情支持"><a href="#Hexo-添加-emoji-表情支持" class="headerlink" title="Hexo 添加 emoji 表情支持"></a>Hexo 添加 emoji 表情支持</h2><h3 id="地址-9"><a href="#地址-9" class="headerlink" title="地址"></a>地址</h3><ul><li><a href="https://github.com/next-theme/hexo-filter-emoji">hexo-filter-emoji</a></li></ul><h3 id="安装配置-10"><a href="#安装配置-10" class="headerlink" title="安装配置"></a>安装配置</h3><ul><li>安装插件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-emoji</span><br></pre></td></tr></table></figure><ul><li>站点配置文件 <code>.config.yml</code> 中增加：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">emoji:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://tding.top/archives/567debe0.html">插件汇总</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router在history模式下刷新404问题</title>
      <link href="/archives/15049ec0.html"/>
      <url>/archives/15049ec0.html</url>
      
        <content type="html"><![CDATA[<p>Vue-Router 在使用 <code>history</code> 模式时候会出现 404 现象，实际上这在 <a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">官方文档</a> 中已经提到这一点。</p><p>这里简单记录一下我自己在云服务上的处理。</p><p>我使用的是宝塔面板 和 <code>nginx</code>，操作起来相对简单。</p><p>我们只需要在对应网站的配置文件中添加一段代码即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423211456.png" alt="image-20200423211455502"></p><p>这样就简单解决了</p>]]></content>
      
      
      <categories>
          
          <category> ECS云服务器 </category>
          
          <category> 解决方案 </category>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔面板 </tag>
            
            <tag> 云服务器 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue-Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue进阶(二)：仿写ElementUI表单-实现表单验证组件</title>
      <link href="/archives/f93d436.html"/>
      <url>/archives/f93d436.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>form 表单验证是几乎所有 web 项目或者 APP 都会遇到的,这是非常常用也是非常重要的一项知识，这里我们简单学习一下表单验证的方法。</p><p><code>async-validator </code>是一个表单的异步验证的第三方库，它是 <a href="https://links.jianshu.com/go?to=https://github.com/tmpfs/async-validate">https://github.com/tmpfs/async-validate</a> 的演变。也是 <a href="https://links.jianshu.com/go?to=https://element.eleme.cn/%23/zh-CN/component/installation">element-ui</a> 中的 form 组件所使用的验证方式。</p><p>我们就仿写一个 element-UI 的表单验证功能。</p><ul><li>当没有清空输入的时候提示 <strong>请输入 XXX</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326231707.png" alt="image-20200326231658419"></p><ul><li>点击提交的时候，进行一个验证。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326231728.png"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>我首先还是使用了 vue 脚手架，因为表单验证，我们使用了 <code>async-validator</code> 所以这里我们要先安装一下这个第三方库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">--save</span> a<span class="built_in">sync-validator</span></span><br></pre></td></tr></table></figure><p>并且建立好我们的文件目录结构：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326232019.png" alt="image-20200326232018275"></p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="搭建基本框架"><a href="#搭建基本框架" class="headerlink" title="搭建基本框架"></a>搭建基本框架</h3><ul><li>首先是我们的 <code>App</code> 全局组件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Element表单&lt;/h3&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!-- 在最外层对model和rules进行数据绑定 --&gt;</span><br><span class="line">    &lt;el-form :model=&quot;model&quot; :rules=&quot;rules&quot; ref=&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;!-- v-model把可以看作:value 和 @input的语法糖 把model.username作为value传入 --&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;model.username&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;password&quot; v-model=&quot;model.password&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;loginForm&#x27;)&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ElInput from &#x27;./components/ElInput.vue&#x27;</span><br><span class="line">import ElForm from &#x27;./components/ElForm&#x27;</span><br><span class="line">import ElFormItem from &#x27;./components/ElFormItem&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElInput,</span><br><span class="line">    ElForm,</span><br><span class="line">    ElFormItem,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      model: &#123; username: &#x27;&#x27;, password: &#x27;&#x27; &#125;,</span><br><span class="line">      // 校验规则</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [</span><br><span class="line">          &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">        ],</span><br><span class="line">        password: [&#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>然后 <code>ElForm</code> 组件 ，我们接收 <code>App</code> 组件传来的值，并进行 provide。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ElForm&#x27;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form: this,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 接收App传来的数据</span><br><span class="line">  props: [&#x27;model&#x27;, &#x27;rules&#x27;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>然后是 <code>ElInput</code> 组件,非常简单的的一个功能，实现双向绑定。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定value属性 使用的是父组件传入的参数 实现input事件 派发事件 固定写法 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input :type=&quot;type&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; @blur=&quot;onBlur&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ElInput&#x27;,</span><br><span class="line">  // 接受父组件传来的值</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;text&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>然后在 <code>ELFormItem</code> 组件中设置插槽，插入我们的 <code>ElInput</code> 组件，展示我们的错误信息：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 父组件传值 --&gt;</span><br><span class="line">    &lt;label v-if=&quot;label&quot;&gt;&#123;&#123; label &#125;&#125;&lt;/label&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;!-- 错误信息 是自身的属性 --&gt;</span><br><span class="line">    &lt;p v-if=&quot;error&quot; style=&quot;color:red&quot;&gt;&#123;&#123; errortext &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Schema from &#x27;async-validator&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ElFormItem&#x27;,</span><br><span class="line">  // 注入数据</span><br><span class="line">  inject: [&#x27;form&#x27;],</span><br><span class="line">  // 接收参数</span><br><span class="line">  props:[&#x27;label&#x27;, &#x27;prop&#x27;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      errortext: &#x27;&#x27;,</span><br><span class="line">      error: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这样我们的基本结构就搭建好了。</p><h3 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h3><ul><li>首先我们在 <code>ElInput</code> 组件中派发事件，这里我们使用 <code>$dispatch</code> ,所以要先在 <code>main.js</code> 中添加该方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$dispatch</span> = <span class="keyword">function</span> (<span class="params">eventName, data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span></span><br><span class="line">  <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">    parent.$emit(eventName, data)</span><br><span class="line">    parent = parent.<span class="property">$parent</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>然后我们就可以在 <code>ElInput</code> 组件中派发事件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input :type=&quot;type&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; @blur=&quot;onBlur&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ElInput&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;text&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onInput(e) &#123;</span><br><span class="line">      // 派发消息input 和 输入框的值作为参数</span><br><span class="line">      this.$emit(&#x27;input&#x27;, e.target.value)</span><br><span class="line">      // 通知校验</span><br><span class="line">      this.$dispatch(&#x27;validate&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>首先我们在 <code>ElFormItem</code> 组件中进行校验。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label v-if=&quot;label&quot;&gt;</span><br><span class="line">      &#123;&#123; label &#125;&#125;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;p v-if=&quot;error&quot; style=&quot;color:red&quot;&gt;&#123;&#123; errortext &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入第三方库</span><br><span class="line">import Schema from &#x27;async-validator&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ElFormItem&#x27;,</span><br><span class="line">  inject: [&#x27;form&#x27;],</span><br><span class="line">  props: [&#x27;label&#x27;, &#x27;prop&#x27;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      errortext: &#x27;&#x27;,</span><br><span class="line">      error: false,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //当输入时 子类通过$parent派发的 本身负责接收然后 校验</span><br><span class="line">    validate() &#123;</span><br><span class="line">      // 获取rules，校验规则</span><br><span class="line">      const rules = this.form.rules[this.prop]</span><br><span class="line">      // 获取数据模型</span><br><span class="line">      const value = this.form.model[this.prop]</span><br><span class="line">      // 定义一个descriptor</span><br><span class="line">      let desciptor = &#123; [this.prop]: rules &#125;</span><br><span class="line">      const schema = new Schema(desciptor)</span><br><span class="line">      //返回的是promise</span><br><span class="line">      return schema.validate(&#123; [this.prop]: value &#125;, (errors) =&gt; &#123;</span><br><span class="line">        if (errors) &#123;</span><br><span class="line">          this.errortext = errors[0].message</span><br><span class="line">          this.error = true</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.errortext = &#x27;&#x27;</span><br><span class="line">          this.error = false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.$on(&#x27;validate&#x27;, this.validate)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>然后在 <code>ElForm</code> 组件中做全局校验：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ElForm&#x27;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form: this,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [&#x27;model&#x27;, &#x27;rules&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //做全局校验 cb是传进来的函数</span><br><span class="line">    validate(cb) &#123;</span><br><span class="line">      //获取校验项</span><br><span class="line">      //首先拿到KForm的子元素 拿去遍历 得到的是每一个FormItem 让它执行validate方法</span><br><span class="line">      //返回的是一个promise数组</span><br><span class="line">      const tasks = this.$children</span><br><span class="line">        .filter((item) =&gt; item.prop)</span><br><span class="line">        .map((item) =&gt; item.validate())</span><br><span class="line">      //Promise.all所有promise成功才算成功</span><br><span class="line">      Promise.all(tasks)</span><br><span class="line">        .then(() =&gt; cb(true))</span><br><span class="line">        .catch(() =&gt; cb(false))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>最后在 <code>App</code> 组件中进行提交：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Element表单&lt;/h3&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;el-form :model=&quot;model&quot; :rules=&quot;rules&quot; ref=&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;model.username&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input</span><br><span class="line">          type=&quot;password&quot;</span><br><span class="line">          v-model=&quot;model.password&quot;</span><br><span class="line">          autocomplete=&quot;off&quot;</span><br><span class="line">        &gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;loginForm&#x27;)&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ElInput from &#x27;./components/ElInput.vue&#x27;</span><br><span class="line">import ElForm from &#x27;./components/ElForm&#x27;</span><br><span class="line">import ElFormItem from &#x27;./components/ElFormItem&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElInput,</span><br><span class="line">    ElForm,</span><br><span class="line">    ElFormItem,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      model: &#123; username: &#x27;&#x27;, password: &#x27;&#x27; &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [</span><br><span class="line">          &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">        ],</span><br><span class="line">        password: [&#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line">      this.$refs[formName].validate((valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          alert(&#x27;校验成功&#x27;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          alert(&#x27;校验失败&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>一个简单的表单验证功能就完成了，这里面有很多都是第三方库的知识，很多都是一个固定的写法，你可以查看一下参考资料，进行一个详细的学习。</p><p>参考资料：</p><p>Element-UI 表单：<a href="https://element.eleme.cn/#/zh-CN/component/form">https://element.eleme.cn/#/zh-CN/component/form</a></p><p>校验规则：<a href="https://github.com/yiminghe/async-validator">https://github.com/yiminghe/async-validator</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue进阶(一)：Vue组件通信的几种方式</title>
      <link href="/archives/56903ee1.html"/>
      <url>/archives/56903ee1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>组件是 vue.js 最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。</p><p>针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。本文总结了 vue 组件间通信的几种方式，以通俗易懂的实例讲述这其中的差别及使用场景。</p><h2 id="Vue-组件通信"><a href="#Vue-组件通信" class="headerlink" title="Vue 组件通信"></a>Vue 组件通信</h2><p>我们可以直接用脚手架建立好各个组件，做一个 <strong>有趣</strong> 的小 demo 来具体演示，这样或许更加容易让人理解和记忆。而且使用脚手架我们可以是 vue 的 <code>server</code> 服务，来进行实时预览。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326181335.png" alt="目录结构"></p><p>分别填写模板代码：</p><ul><li>GrandGrandSon 下面简称<strong>小红</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandgrandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是曾孙子小红&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandGrandson&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandgrandson &#123;</span><br><span class="line">  border: 3px solid green;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>GrandsonOne 下面简称<strong>小明</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是孙子小明&lt;/h2&gt;</span><br><span class="line">    &lt;grand-grandson /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandGrandson from &#x27;./GrandGrandson&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandsonOne&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandGrandson,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandson &#123;</span><br><span class="line">  border: 3px solid #f90;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>GrandsonTwo 下面简称<strong>小刚</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是孙子小刚&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandsonTwo&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandson &#123;</span><br><span class="line">  border: 3px solid #f90;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>GrandsonThree 下面简称<strong>大明</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是孙子大明&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; broadMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandsonThree&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandson &#123;</span><br><span class="line">  border: 3px solid #f90;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>ParentOne 下面简称<strong>王二</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爸爸王二&lt;/h2&gt;</span><br><span class="line">    &lt;grandson-one /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandsonOne from &#x27;./GrandsonOne.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentOne&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandsonOne,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>ParentTwo 下面简称<strong>李四</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爸爸李四&lt;/h2&gt;</span><br><span class="line">    &lt;grandson-two /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandsonTwo from &#x27;./GrandsonTwo&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentTwo&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandsonTwo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>App 下面简称<strong>张三</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爷爷张三&lt;/h2&gt;</span><br><span class="line">    &lt;parent-one /&gt;</span><br><span class="line">    &lt;parent-two /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ParentOne from &#x27;./components/ParentOne.vue&#x27;</span><br><span class="line">import ParentTwo from &#x27;./components/ParentTwo.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ParentOne,</span><br><span class="line">    ParentTwo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  border: 3px solid blue;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这样我们会获得一个模型非常形象的展示了各个组件之间的关系，像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326164110.png" alt="模型图"></p><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>父传子十分简单，使用 <code>props</code> 来进行传递，比如我们现在从 <strong>张三</strong> 传递数据给 <strong>王二</strong> 和 <strong>李四</strong> ：</p><ul><li>首先我们在 <strong>张三</strong> 组件中 <code>data</code> 给一个值，并在<strong>张三</strong>添加一个<code>botton</code> ,我们点击 <code>botton</code> 时就传递消息 ，并给他一点样式：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爷爷张三&lt;/h2&gt;</span><br><span class="line">    &lt;button class=&quot;button&quot; @click=&quot;sendSon&quot;&gt;发消息给儿子&lt;/button&gt;</span><br><span class="line">    &lt;parent-one :DadMsg=&quot;msgToSon&quot; /&gt;</span><br><span class="line">    &lt;parent-two :DadMsg=&quot;msgToSon&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ParentOne from &#x27;./components/ParentOne.vue&#x27;</span><br><span class="line">import ParentTwo from &#x27;./components/ParentTwo.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ParentOne,</span><br><span class="line">    ParentTwo,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToSon: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendSon() &#123;</span><br><span class="line">      this.msgToSon = &#x27;新消息：我是张三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  border: 3px solid blue;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 23px;</span><br><span class="line">  left: 150px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>然后我们需要在 <strong>王二</strong> 和 <strong>李四</strong> 中接收并展示这个值：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爸爸王二&lt;/h2&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; DadMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;grandson-one /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandsonOne from &#x27;./GrandsonOne.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentOne&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandsonOne,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    DadMsg: String,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>点击按钮，即可发送消息给子组件：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326164158.png" alt="父传子"></p><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>子传父通过发送事件来进进行。</p><ul><li>我们先给 <strong>王二</strong> 一个按钮，当点击按钮的时候，我们就发送事件。所以要给按钮绑定一个事件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爸爸王二&lt;/h2&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; DadMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;button @click=&quot;sendDad&quot;&gt;给爸爸发消息&lt;/button&gt;</span><br><span class="line">    &lt;grandson-one /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandsonOne from &#x27;./GrandsonOne.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentOne&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandsonOne,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToDad: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    DadMsg: String,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendDad() &#123;</span><br><span class="line">      this.$emit(&#x27;sendDad&#x27;, &#x27;王二：我是你亲生的吗？&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>同时 <strong>张三</strong> 接收这个事件，并且对消息进行一个展示：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爷爷张三&lt;/h2&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; sonMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;button class=&quot;button&quot; @click=&quot;sendSon&quot;&gt;发消息给儿子&lt;/button&gt;</span><br><span class="line">    &lt;parent-one :DadMsg=&quot;msgToSon&quot; @sendDad=&quot;getMsg&quot; /&gt;</span><br><span class="line">    &lt;parent-two :DadMsg=&quot;msgToSon&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ParentOne from &#x27;./components/ParentOne.vue&#x27;</span><br><span class="line">import ParentTwo from &#x27;./components/ParentTwo.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ParentOne,</span><br><span class="line">    ParentTwo,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToSon: &#x27;&#x27;,</span><br><span class="line">      sonMsg: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendSon() &#123;</span><br><span class="line">      this.msgToSon = &#x27;新消息：我是张三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    getMsg(msg) &#123;</span><br><span class="line">      this.sonMsg = msg</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  border: 3px solid blue;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 23px;</span><br><span class="line">  left: 150px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>但我们点击 <strong>给爸爸发消息</strong> 按钮的时候， <strong>张三</strong> 就可以接收到来着 <strong>王二</strong> 的消息。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326164232.png" alt="子传父"></p><h3 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h3><p>兄弟组件不能直接通信，我们只需要在父元素搭个桥即可。</p><ul><li>首先我们给 <strong>王二</strong> 一个按钮，当王二点击按钮的时候，发送给 <strong>张三</strong>，通过 <strong>张三</strong> 再传递给 <strong>李四</strong> 。当然还是别忘记了，要记得用 <code>data</code> 来存储这个消息。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爸爸王二&lt;/h2&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; dadMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;button @click=&quot;sendDad&quot;&gt;给爸爸发消息&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;sendBro&quot;&gt;给兄弟发消息&lt;/button&gt;</span><br><span class="line">    &lt;grandson-one /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandsonOne from &#x27;./GrandsonOne.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentOne&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandsonOne,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToDad: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    dadMsg: String,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendDad() &#123;</span><br><span class="line">      this.$emit(&#x27;sendDad&#x27;, &#x27;王二：我是你亲生的吗？&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    sendBro() &#123;</span><br><span class="line">      this.$emit(&#x27;sendBro&#x27;, &#x27;王二：李四，咱爸说你是从网上下载的&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>张三</strong> 接收消息，并进行传递。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爷爷张三&lt;/h2&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; sonMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;button class=&quot;button&quot; @click=&quot;sendSon&quot;&gt;发消息给儿子&lt;/button&gt;</span><br><span class="line">    &lt;parent-one :dadMsg=&quot;msgToSon&quot; @sendDad=&quot;getMsg&quot; @sendBro=&quot;sendBro&quot; /&gt;</span><br><span class="line">    &lt;parent-two :dadMsg=&quot;msgToSon&quot; :broMsg=&quot;broMsg&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ParentOne from &#x27;./components/ParentOne.vue&#x27;</span><br><span class="line">import ParentTwo from &#x27;./components/ParentTwo.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ParentOne,</span><br><span class="line">    ParentTwo,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToSon: &#x27;&#x27;,</span><br><span class="line">      sonMsg: &#x27;&#x27;,</span><br><span class="line">      broMsg: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendSon() &#123;</span><br><span class="line">      this.msgToSon = &#x27;新消息：我是张三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    getMsg(msg) &#123;</span><br><span class="line">      this.sonMsg = msg</span><br><span class="line">    &#125;,</span><br><span class="line">    sendBro(msg) &#123;</span><br><span class="line">      this.broMsg = msg</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  border: 3px solid blue;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 23px;</span><br><span class="line">  left: 150px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>李四</strong> 接收到消息，我们并对其进行一个展示。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爸爸李四&lt;/h2&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; dadMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; broMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;grandson-two /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandsonTwo from &#x27;./GrandsonTwo&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentTwo&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandsonTwo,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    dadMsg: String,</span><br><span class="line">    broMsg: String,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>点击按钮</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326164304.png" alt="兄弟组件传值"></p><h3 id="祖先后代-provide-amp-inject"><a href="#祖先后代-provide-amp-inject" class="headerlink" title="祖先后代 provide &amp; inject"></a>祖先后代 provide &amp; inject</h3><p>props 一层层传递，爷爷传给孙子还好，如果嵌套了五六层还这么写，感觉自己就是一个沙雕，所以这里介绍一个稍微冷门的 API，<code>provide &amp; inject</code>，专门用来跨层级提供数据。</p><blockquote><p>参考资料：<a href="https://cn.vuejs.org/v2/api/#provide-inject">https://cn.vuejs.org/v2/api/#provide-inject</a> 。</p></blockquote><p>注意：提示：<code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。所以我们先在 <code>data</code> 中创建一个对象。</p><ul><li>在 <strong>张三</strong> 中,先在 <code>data</code> 中创建一个可监听的属性，然后通过给监听按钮的点击事件，当按钮点击时，我们传值给 <strong>小红</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爷爷张三&lt;/h2&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; sonMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;button class=&quot;button&quot; @click=&quot;sendSon&quot;&gt;发消息给儿子&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;button2&quot; @click=&quot;sendGGson&quot;&gt;发消息给小红&lt;/button&gt;</span><br><span class="line">    &lt;parent-one :dadMsg=&quot;msgToSon&quot; @sendDad=&quot;getMsg&quot; @sendBro=&quot;sendBro&quot; /&gt;</span><br><span class="line">    &lt;parent-two :dadMsg=&quot;msgToSon&quot; :broMsg=&quot;broMsg&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ParentOne from &#x27;./components/ParentOne.vue&#x27;</span><br><span class="line">import ParentTwo from &#x27;./components/ParentTwo.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ParentOne,</span><br><span class="line">    ParentTwo,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToSon: &#x27;&#x27;,</span><br><span class="line">      sonMsg: &#x27;&#x27;,</span><br><span class="line">      broMsg: &#x27;&#x27;,</span><br><span class="line">      msgToGGson: &#123;</span><br><span class="line">        msg: &#x27;&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToGGson: this.msgToGGson,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendSon() &#123;</span><br><span class="line">      this.msgToSon = &#x27;新消息：我是张三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    getMsg(msg) &#123;</span><br><span class="line">      this.sonMsg = msg</span><br><span class="line">    &#125;,</span><br><span class="line">    sendBro(msg) &#123;</span><br><span class="line">      this.broMsg = msg</span><br><span class="line">    &#125;,</span><br><span class="line">    sendGGson() &#123;</span><br><span class="line">      this.msgToGGson.msg = &#x27;张三：我是你祖宗&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  border: 3px solid blue;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 23px;</span><br><span class="line">  left: 150px;</span><br><span class="line">&#125;</span><br><span class="line">.button2 &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 23px;</span><br><span class="line">  left: 250px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>在 <strong>小红</strong> 中我们注入，并对值进行一个展示：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandgrandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是曾孙子小红&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msgToGGson.msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandGrandson&#x27;,</span><br><span class="line">  inject: [&#x27;msgToGGson&#x27;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandgrandson &#123;</span><br><span class="line">  border: 3px solid green;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>点击按钮：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326164400.png" alt="provide &amp; inject"></p><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>递归获取 <code>$parent</code> 即可。原理就是通过 <code>this.$parent</code> 来获取父元素，并且如果没有找到并且会一直往上寻找。</p><ul><li>注意这需要放在 vue 的原型链之上。</li><li>首先我们在 <code>main.js</code> 文件中添加：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$dispatch</span> = <span class="keyword">function</span> (<span class="params">eventName, data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span></span><br><span class="line">  <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">    parent.$emit(eventName, data)</span><br><span class="line">    parent = parent.<span class="property">$parent</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>在 <strong>小红</strong> 中我们添加一个按钮，监听点击事件发送我们的消息.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandgrandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是曾孙子小红&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;dispatch&quot;&gt;dispatch通知父元素&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msgToGGson.msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandGrandson&#x27;,</span><br><span class="line">  inject: [&#x27;msgToGGson&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    dispatch() &#123;</span><br><span class="line">      this.$dispatch(&#x27;dispatch&#x27;, &#x27;小红：我4点钟回家&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandgrandson &#123;</span><br><span class="line">  border: 3px solid green;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>在所有父元素中我们先在 <code>data</code> 中接收数据，并在 <code>mounted</code> 中监听 <code>dispatch</code> ，以 <strong>张三</strong> 为例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爷爷张三&lt;/h2&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; sonMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; gruandsonMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button class=&quot;button&quot; @click=&quot;sendSon&quot;&gt;发消息给儿子&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;button2&quot; @click=&quot;sendGGson&quot;&gt;发消息给小红&lt;/button&gt;</span><br><span class="line">    &lt;parent-one :dadMsg=&quot;msgToSon&quot; @sendDad=&quot;getMsg&quot; @sendBro=&quot;sendBro&quot; /&gt;</span><br><span class="line">    &lt;parent-two :dadMsg=&quot;msgToSon&quot; :broMsg=&quot;broMsg&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ParentOne from &#x27;./components/ParentOne.vue&#x27;</span><br><span class="line">import ParentTwo from &#x27;./components/ParentTwo.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ParentOne,</span><br><span class="line">    ParentTwo,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToSon: &#x27;&#x27;,</span><br><span class="line">      sonMsg: &#x27;&#x27;,</span><br><span class="line">      broMsg: &#x27;&#x27;,</span><br><span class="line">      msgToGGson: &#123;</span><br><span class="line">        msg: &#x27;&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      gruandsonMsg: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToGGson: this.msgToGGson,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendSon() &#123;</span><br><span class="line">      this.msgToSon = &#x27;新消息：我是张三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    getMsg(msg) &#123;</span><br><span class="line">      this.sonMsg = msg</span><br><span class="line">    &#125;,</span><br><span class="line">    sendBro(msg) &#123;</span><br><span class="line">      this.broMsg = msg</span><br><span class="line">    &#125;,</span><br><span class="line">    sendGGson() &#123;</span><br><span class="line">      this.msgToGGson.msg = &#x27;张三：我是你祖宗&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.$on(&#x27;dispatch&#x27;, (msg) =&gt; &#123;</span><br><span class="line">      this.gruandsonMsg = msg</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  border: 3px solid blue;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 23px;</span><br><span class="line">  left: 150px;</span><br><span class="line">&#125;</span><br><span class="line">.button2 &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 23px;</span><br><span class="line">  left: 250px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>当我们点击按钮时，就可以通知祖先元素。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326165256.png" alt="dispatch"></p><h3 id="broadcast"><a href="#broadcast" class="headerlink" title="broadcast"></a>broadcast</h3><p>和 <code>dispatch</code> 类似，递归获取 <code>$children </code>来向所有子元素广播。</p><ul><li>在 <code>main.js</code> 文件中添加：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$dispatch</span> = <span class="keyword">function</span> (<span class="params">eventName, data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span></span><br><span class="line">  <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">    parent.$emit(eventName, data)</span><br><span class="line">    parent = parent.<span class="property">$parent</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$broadcast</span> = <span class="keyword">function</span> (<span class="params">eventName, data</span>) &#123;</span><br><span class="line">  broadcast.<span class="title function_">call</span>(<span class="variable language_">this</span>, eventName, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">broadcast</span>(<span class="params">eventName, data</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">    child.$emit(eventName, data)</span><br><span class="line">    <span class="keyword">if</span> (child.<span class="property">$children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      broadcast.<span class="title function_">call</span>(child, eventName, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>在 <strong>王二</strong> 中添加一个按钮，并绑定一个事件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是爸爸王二&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sendDad&quot;&gt;给爸爸发消息&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;sendBro&quot;&gt;给兄弟发消息&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;broadcast&quot;&gt;broadcast广播子元素&lt;/button&gt;</span><br><span class="line">    &lt;P&gt;&#123;&#123; dadMsg &#125;&#125;&lt;/P&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; gruandsonMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;grandson-three /&gt;</span><br><span class="line">    &lt;grandson-one /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandsonOne from &#x27;./GrandsonOne.vue&#x27;</span><br><span class="line">import GrandsonThree from &#x27;./GrandsonThree&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentOne&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandsonOne,</span><br><span class="line">    GrandsonThree,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msgToDad: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    dadMsg: String,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendDad() &#123;</span><br><span class="line">      this.$emit(&#x27;sendDad&#x27;, &#x27;王二：我是你亲生的吗？&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    sendBro() &#123;</span><br><span class="line">      this.$emit(&#x27;sendBro&#x27;, &#x27;王二：李四，咱爸说你是从网上下载的&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    broadcast() &#123;</span><br><span class="line">      this.$broadcast(&#x27;broadcast&#x27;, &#x27;广播：所有人今天晚上8点前回家&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>然后在所有子组件的 <code>mounted</code>中监听事件接收消息，保存到 <code>data</code> 并进行展示。以 <strong>大明</strong> 为例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是孙子大明&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; broadMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandsonThree&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      broadMsg: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.$on(&#x27;broadcast&#x27;, (msg) =&gt; &#123;</span><br><span class="line">      this.broadMsg = msg</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandson &#123;</span><br><span class="line">  border: 3px solid #f90;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>点击按钮，所有人都将收到消息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326165705.png" alt="broadcast"></p><h3 id="event-bus"><a href="#event-bus" class="headerlink" title="event-bus"></a>event-bus</h3><p>如果两个组件没有什么关系，我们只能使用订阅发布模式来做，并且挂载到 Vue.protytype 上，我们来试试，我们称呼这种机制为总线机制，也就是喜闻乐见的 event-bus。</p><p>我们在 Vue 脚手架中只需要在 <code>main.js</code> 文件中添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure><p>当然也可以这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $on(name, fn) &#123;</span><br><span class="line">    <span class="comment">//监听</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[name] = <span class="variable language_">this</span>.<span class="property">callbacks</span>[name] || []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[name].<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;</span><br><span class="line">  $emit(name, args) &#123;</span><br><span class="line">    <span class="comment">// 触发</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">callbacks</span>[name]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>[name].<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(args))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Bus</span>()</span><br></pre></td></tr></table></figure><ul><li>我们在 <strong>小明</strong> 中添加一个按钮，用来发布。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是孙子小明&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;bus&quot;&gt;bus发布&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; broadMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; gruandsonMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;grand-grandson /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GrandGrandson from &#x27;./GrandGrandson&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandsonOne&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandGrandson,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      broadMsg: &#x27;&#x27;,</span><br><span class="line">      gruandsonMsg: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    bus() &#123;</span><br><span class="line">      this.$bus.$emit(&#x27;bus&#x27;, &#x27;小明：小红考试没及格&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.$on(&#x27;broadcast&#x27;, (msg) =&gt; &#123;</span><br><span class="line">      this.broadMsg = msg</span><br><span class="line">    &#125;),</span><br><span class="line">      this.$on(&#x27;dispatch&#x27;, (msg) =&gt; &#123;</span><br><span class="line">        this.gruandsonMsg = msg</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandson &#123;</span><br><span class="line">  border: 3px solid #f90;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>在其他任何组件中，我们都可以接收到来自小明发布的内容,我们以 <strong>小刚</strong> 为例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grandson&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是孙子小刚&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; broadMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; busMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandsonTwo&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      broadMsg: &#x27;&#x27;,</span><br><span class="line">      busMsg: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.$on(&#x27;broadcast&#x27;, (msg) =&gt; &#123;</span><br><span class="line">      this.broadMsg = msg</span><br><span class="line">    &#125;),</span><br><span class="line">      this.$bus.$on(&#x27;bus&#x27;, (msg) =&gt; &#123;</span><br><span class="line">        this.busMsg = msg</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grandson &#123;</span><br><span class="line">  border: 3px solid #f90;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>当我们点击发布的时候，所有人都能收到消息：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200326172918.png" alt="事件总线"></p><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>常见使用场景可以分为三类：</p><ul><li><p>父子通信</p></li><li><p>兄弟通信</p></li><li><p>跨级通信</p></li></ul><p>我们可以在不同的场景中选择最合适的方式来进行通信。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue脚手架安装详解</title>
      <link href="/archives/995b88f0.html"/>
      <url>/archives/995b88f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实际项目中，我们通常会使用 vue 脚手架来快速部署我们的项目，在这里，我记录了一下我对于脚手架安装的一点个人理解，希望对你也有所帮助。</p><h2 id="安装-Vue-脚手架"><a href="#安装-Vue-脚手架" class="headerlink" title="安装 Vue 脚手架"></a>安装 Vue 脚手架</h2><h3 id="全局安装："><a href="#全局安装：" class="headerlink" title="全局安装："></a>全局安装：</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>注意：上面安装的是 Vue CLI 最新的版本，如果想要按照 Vue CLI2 的方式初始化项目是不可以的</p><p>拓展：</p><p>在安装完后可以使用<code>vue --version</code>来查看我们安装的 Vue CLI 版本，如果这时候终端报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vue : 无法加载文件 D:\node.js\vue.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ vue --version</span><br><span class="line">+ ~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>如果发生以下错误，我们可以使用管理员身份打开<code>Windows PowerShell</code>工具(注意不是<code>cmd</code>),输入<code>set-ExecutionPolicy RemoteSigned </code>，选择 Y 或者 A，即可。</p><h3 id="拉取-2-x-模板"><a href="#拉取-2-x-模板" class="headerlink" title="拉取 2.x 模板"></a>拉取 2.x 模板</h3><p>最新的 Vue CLI 和旧版使用了相同的 Vue 命令。所以 Vue CLI2（<code>vue-cli</code>）被覆盖了。如果仍然需要使用旧版本的<code>vue init</code> 功能。可以全局安装一个桥接工具：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line">#&#x27;vue init&#x27; 的运行效果将会跟&#x27;vue-cli@<span class="number">2</span>.x&#x27;相同</span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><ol><li>Vue CLi2 初始化项目</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><ol start="2"><li>Vue Cli &gt;=3 初始化项目</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br><span class="line">#使用图形化界面</span><br><span class="line">vue ui</span><br><span class="line">#上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程。</span><br></pre></td></tr></table></figure><h2 id="初始化项目的过程"><a href="#初始化项目的过程" class="headerlink" title="初始化项目的过程"></a>初始化项目的过程</h2><h3 id="初始化项目（Vue-CLI2）"><a href="#初始化项目（Vue-CLI2）" class="headerlink" title="初始化项目（Vue-CLI2）"></a>初始化项目（Vue-CLI2）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vuecli2test（项目名称不能包含大写）</span><br></pre></td></tr></table></figure><ul><li>Project name</li></ul><p>#项目名字 不能包含大写 #通常情况下，项目名字和我们文件夹名字是一样的</p><ul><li>Project description</li></ul><p>#项目描述</p><ul><li><p>Author #作者，<code>.getconfig</code> 全局可能已经配置了一个默认信息</p></li><li><p>Vue build（use arrow keys）</p></li></ul><blockquote><p>Runtime + Compiler: recommended for most users</p><p>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specific HTML) are ONLY allowed in .vue files - render functions are required elsewhere</p></blockquote><p>#选择之后构建项目使用哪一个来进行构建。通常情况下我们会选择下面这个，主要有 2 个好处：</p><p>1.下面的选项更加小巧。</p><p>2.下面的选项效率更加高。</p><blockquote><p>Runtime + Compiler 和 Runtime-only 的区别：他们的区别只在于 main.js 里面</p></blockquote><ul><li><p>Install vue-router? (Y/n) #是否安装路由</p></li><li><p>Use ESLint to lint your code? (Y/n) #是否使用 ESlint, es-lint 主要是对 js 代码做一些限制，让 js 代码更加规范</p></li><li><p>Pick an ESLint preset (Use arrow keys) 选择一个 eslint 的规范（选择使用 eslint 的时候）</p></li></ul><blockquote><p>Standard (<a href="https://github.com/standard/standard">https://github.com/standard/standard</a>) #eslint 标准规范</p><p>Airbnb (<a href="https://github.com/airbnb/javascript">https://github.com/airbnb/javascript</a>) #爱彼迎的一个规范</p><p>none (configure it yourself) #自己配置</p></blockquote><ul><li>Set up unit tests (Y/n)</li></ul><p>#单元测试</p><ul><li><p>Setup e2e tests with Nightwatch? (Y/n) #端到端测试 ,安装 Nightwatch，是一个利用 seionlum 或者 drive 或 phantomjs 等进行自动化测试的框架</p></li><li><p>Should we run <code>npm install</code> for you after the project has been created? (recommended)<br>(Use arrow keys) #选择管理工具</p></li></ul><blockquote><p>Yes, use NPM<br>Yes, use Yarn<br>No, I will handle that myself</p></blockquote><h3 id="认识-Vue-CLI3"><a href="#认识-Vue-CLI3" class="headerlink" title="认识 Vue CLI3"></a>认识 Vue CLI3</h3><ul><li>Vue-Cli3 与 2 版本有很大的区别：<ul><li>Vue-Cli3 是基于 webpack4 打造，Vue-Cli2 还是 webpack3</li><li>Vue-Cli3 的设计原则是‘0 配置’，移除的配置文件根目录下的 build 和 config 等目录</li><li>Vue-Cli3 提供了<code>vue ui</code>命令，提供了可视化配置，更加人性化</li><li>移除了 static 文件夹，新增了 public 文件夹，并且 index.html 移动到了 public 中</li></ul></li></ul><h3 id="初始化项目（Vue-Cli3）"><a href="#初始化项目（Vue-Cli3）" class="headerlink" title="初始化项目（Vue-Cli3）"></a>初始化项目（Vue-Cli3）</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project (项目名称)</span><br></pre></td></tr></table></figure><ul><li><p>Your connection to the default yarn registry seems to be slow.<br>Use <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> for faster installation? (Y/n)</p><p>#这是提示网络较慢，问要不要转到淘宝来安装，会更快一点。</p></li><li><p>Please pick a preset: (Use arrow keys) #选择一个配置</p><blockquote><p>default (babel, eslint) #默认配置</p></blockquote><blockquote><p>Manually select features #手动配置</p></blockquote><ul><li>如果选择手动配置：</li></ul><p>Check the features needed for your project: (Press to select, to toggle all, to invert selection) #检测项目所需要的特性：空格是选择和取消，a 是权限，i 是全不选</p><blockquote><p>( ) Babel</p><p>( ) TypeScript</p><p>( ) Progressive Web App (PWA) Support #渐进式 web 应用程序（PWA）支持</p><p>( ) Router #路由</p><p>( ) Vuex #状态管理</p><p>( ) CSS Pre-processors #CSS 预处理器</p></blockquote><blockquote><p>( ) Linter / Formatter #eslint 对代码进行一些检测</p><p>( ) Unit Testing #单元测试</p><p>( ) E2E Testing #端到端测试</p></blockquote></li><li><p>Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</p><p>#你打算把 Babel,ESLint 等配置文件放到哪里</p><blockquote><p>In dedicated config files #单独配置文件<br>In package.json #放在 package.json 里</p></blockquote></li><li><p>Save this as a preset for future projects? (y/N) # 把它作为未来项目的预置？</p><ul><li>如果选择 Y：<ul><li>Save preset as: templateset #输入保存的名字</li></ul></li><li>如果要删除保存预置项目</li><li>找到 C:\Users\Administrator\.vuerc 文件<ul><li>删除该文件里的 presets 即可</li></ul></li></ul></li><li><p>Pick the package manager to use when installing dependencies: (Use arrow keys) #在安装依赖项时选择要使用的包管理器:</p><blockquote><p>Use Yarn<br>Use NPM</p></blockquote></li></ul><h3 id="Vue-Cli3-的配置文件的查看和修改"><a href="#Vue-Cli3-的配置文件的查看和修改" class="headerlink" title="Vue-Cli3 的配置文件的查看和修改"></a>Vue-Cli3 的配置文件的查看和修改</h3><ul><li>使用图像化进行配置：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>也可以自己创建一个 <code>vue.config.js</code> 文件，这个文件名字是固定的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//这写自己的配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是脚手架安装的全部过程了。希望对你也有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十一)：给头像添加唱片式旋转特效</title>
      <link href="/archives/6fd4fff1.html"/>
      <url>/archives/6fd4fff1.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！</p></div><h2 id="侧栏头像动画"><a href="#侧栏头像动画" class="headerlink" title="侧栏头像动画"></a>侧栏头像动画</h2><p>先从简单的开始吧！修改头像其实很简单，直接把头像放进 <code>next/source/images/</code> 下，然后再主题配置文件中，找到以下部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在 <code>url</code> 处指定头像文件即可，头像可以是网络图片，只需要把本地路径替换为网络图片的网址即可。另外，当打开了 <code>rotated</code> 后，鼠标移到头像处会逆时针旋转半圈，鼠标移开又转回来，不过这个效果看起来好像也比较普通：</p><p><del>请找到这个文件并打开它：<code>themes\next\source\css\_common\outline\sidebar\sidebar-author.styl</code>，然后找到如下部分修改：</del> 我从 7.8 版本开始，已经更新为将这段代码，复制到<code>hexo/souece/_data/style.styl</code>文件中即可， 参考：<a href="/archives/5b20fbd0.html">新配置</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (hexo-config(&#x27;avatar.rotated&#x27;)) &#123;</span><br><span class="line">  .site-author-image &#123;</span><br><span class="line">    //transition: transform 1s ease-out;</span><br><span class="line">    animation: rotate 5s linear infinite;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes rotate&#123;from&#123;transform: rotate(0deg)&#125;</span><br><span class="line">  to&#123;transform: rotate(360deg)&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .site-author-image:hover &#123;</span><br><span class="line">    // transform: rotateZ(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的意思就是：动画是 rotate，时间是 5 秒（也即 5 秒转一圈），动画速度是线性，动画重复无限次，在下方定义了旋转的角度是从 0 ~ 360°，其中正数是顺时针旋转，负数是逆时针旋转。设置完了以后别忘了 Hexo 三连一下试试效果。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.liushulun.cn/post/blogdiy/blogdiy-6-avatar-title/">动态头像与动态浏览器标题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(十)：新建友链页面</title>
      <link href="/archives/dde01238.html"/>
      <url>/archives/dde01238.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！</p></div><p>NexT 主题自带的友链模块放在侧边栏下面，视觉上比较臃肿。所以我直接新建一个单独的友链界面出来。</p><p>基本原理：新建 md 页面，渲染出一个 html 页面，其中包含一个 class 是<code>.link-navigation</code> 的网页元素。同时加载 <code>links.js</code>，下载 json 文件，渲染到这个网页元素中。</p><h3 id="新建-links-页面"><a href="#新建-links-页面" class="headerlink" title="新建 links 页面"></a>新建 links 页面</h3><p>新建 links 页面，输入放置友链的 html 元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page links</span><br></pre></td></tr></table></figure><p>这样会在 <code>/source/</code> 下创建 <code>links/index.md</code>。在文档的 <code>front matter</code> 添加 <code>type: links</code>，编辑好自己需要的友链页面内容，然后输入放置友链的 html 元素。示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line"><span class="section">type: links</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span>.links-content&#123;margin-top:1rem&#125;.link-navigation::after&#123;content:&quot; &quot;;display:block;clear:both&#125;.card&#123;width:130px;font-size:1rem;padding:0;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:block;float:left;box-shadow:0 2px 6px 0 rgba(0,0,0,.12);background:#f5f5f5&#125;.card&#123;margin-left:16px&#125;@media(max-width:567px)&#123;.card&#123;margin-left:16px;width:calc((100% - 16px)/2)&#125;.card:nth-child(2n+1)&#123;margin-left:0&#125;.card:not(:nth-child(2n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:567px)&#123;.card&#123;margin-left:16px;width:calc((100% - 32px)/3)&#125;.card:nth-child(3n+1)&#123;margin-left:0&#125;.card:not(:nth-child(3n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:768px)&#123;.card&#123;margin-left:16px;width:calc((100% - 48px)/4)&#125;.card:nth-child(4n+1)&#123;margin-left:0&#125;.card:not(:nth-child(4n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:1200px)&#123;.card&#123;margin-left:16px;width:calc((100% - 64px)/5)&#125;.card:nth-child(5n+1)&#123;margin-left:0&#125;.card:not(:nth-child(5n+1))&#123;margin-left:16px&#125;&#125;.card:hover&#123;transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)&#125;.card .thumb&#123;width:100%;height:0;padding-bottom:100%;background-size:100% 100%!important&#125;.posts-expand .post-body img&#123;margin:0;padding:0;border:0&#125;.card .card-header&#123;display:block;text-align:center;padding:1rem .25rem;font-weight:500;color:#333;white-space:normal&#125;.card .card-header a&#123;font-style:normal;color:#5073b8;font-weight:700;text-decoration:none;border:0&#125;.card .card-header a:hover&#123;color:#5073b8;text-decoration:none;border:0&#125;<span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation&quot;</span> <span class="attr">id</span>=<span class="string">&quot;links1&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;with-love&quot;</span> <span class="attr">id</span>=<span class="string">&quot;animate1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="code">  &lt;/span&gt;留言添加友链&lt;span class=&quot;with-love&quot; id=&quot;animate2&quot;&gt;</span></span><br><span class="line"><span class="code">    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="code">  &lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">------</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">## 友链格式</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 网站名称：你真是美好的人类</span><br><span class="line"><span class="bullet">-</span> 网站地址：[<span class="string">https://blog.juanertu.com</span>](<span class="link">https://blog.juanertu.com/</span>)</span><br><span class="line"><span class="bullet">-</span> 网站描述：能与你一起成长，我荣幸之至</span><br><span class="line"><span class="bullet">-</span> 网站 Logo/头像：[<span class="string">https://blog.juanertu.com/images/avatar.png</span>](<span class="link">https://blog.juanertu.com/images/avatar.png</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="侧边栏添加友链页面链接"><a href="#侧边栏添加友链页面链接" class="headerlink" title="侧边栏添加友链页面链接"></a>侧边栏添加友链页面链接</h3><p>主题配置文件<code>_config.yml</code> 中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">links:</span> <span class="string">/links</span> <span class="string">||</span> <span class="string">link</span></span><br></pre></td></tr></table></figure><h3 id="添加友链的-json-文件"><a href="#添加友链的-json-文件" class="headerlink" title="添加友链的 json 文件"></a>添加友链的 json 文件</h3><p>在页面目录 <code>/source/links/</code> 中添加 <code>linklist.json</code>，示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你真是个美好的人类&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blog.juanertu.com/images/avatar.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blog.juanertu.com&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="加载-link-js"><a href="#加载-link-js" class="headerlink" title="加载 link.js"></a>加载 link.js</h3><p>在自定义文件 <code>body-end.swig</code> 中添加：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 友链设置 #&#125;</span><br><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> page.type <span class="operator">===</span> &#x27;links&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>script src<span class="operator">=</span><span class="string">&quot;/js/link.js&quot;</span><span class="operator">&gt;&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%</span> <span class="keyword">else</span> <span class="operator">%</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><p><code>link.js</code> 内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">link = &#123;</span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">//这里设置的是刚才的 linklist.json 文件路径</span></span><br><span class="line">    $.<span class="title function_">getJSON</span>(<span class="string">&#x27;/links/linklist.json&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      that.<span class="title function_">render</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> html,</span><br><span class="line">      nickname,</span><br><span class="line">      avatar,</span><br><span class="line">      site,</span><br><span class="line">      li = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      nickname = data[i].<span class="property">nickname</span></span><br><span class="line">      avatar = data[i].<span class="property">avatar</span></span><br><span class="line">      site = data[i].<span class="property">site</span></span><br><span class="line">      li +=</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;card&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;a href=&quot;&#x27;</span> +</span><br><span class="line">        site +</span><br><span class="line">        <span class="string">&#x27;&quot; target=&quot;_blank&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;thumb&quot; style=&quot;background: url( &#x27;</span> +</span><br><span class="line">        avatar +</span><br><span class="line">        <span class="string">&#x27;);&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/a&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;card-header&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div&gt;&lt;a href=&quot;&#x27;</span> +</span><br><span class="line">        site +</span><br><span class="line">        <span class="string">&#x27;&quot; target=&quot;_blank&quot;&gt;&#x27;</span> +</span><br><span class="line">        nickname +</span><br><span class="line">        <span class="string">&#x27;&lt;/a&gt;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">&#x27;.link-navigation&#x27;</span>).<span class="title function_">append</span>(li)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">link.<span class="title function_">init</span>()</span><br></pre></td></tr></table></figure><p>在<code>hexo/source</code> 文件夹下新建一个 js 文件夹，放入即可。</p><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><ol><li>浏览器 F12 查看页面源码，是否有一个 class 是<code>.link-navigation</code> 的网页元素。</li><li>查看 <code>link.js</code> 是否正常加载了，json 文件是否正常加载了。</li></ol><p>如果加载 js 文件的 <code>/source/_data/body-end.swig</code> 不起作用，我们也可以把 <code>link.js</code> 内容放到 <code>/source/links/index.md</code> 中，效果是一样的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tding.top/archives/73ce4e7.html">新增友链</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(九)：博客展示GitHub Chart</title>
      <link href="/archives/d18fd292.html"/>
      <url>/archives/d18fd292.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！</p></div><p>本文主要介绍如何在个人博客中展示 GitHub Chart。其实 GitHub 上已经有人开源了一个工具，并且提供了 API，我们只需要调用一下就可以了。</p><p>工具地址：<a href="https://ghchart.rshah.org/">Github Chart API</a></p><p>这个工具可以实时的将 <code>GitHub Chart</code> 信息<strong>转化成一张图片</strong>，如下图所示，然后我们就可以把它插入到自己的博客进行展示了。</p><p><img src="https://ghchart.rshah.org/constown"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>我们只需要在 <code>https://ghchart.rshah.org/</code> 这个地址后加上自己的 <strong>GitHub 用户名</strong>即可构造 GitHub Chart 图片的 URL。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ghchart.rshah.org/constown</span><br></pre></td></tr></table></figure><h3 id="HTML-引入图片"><a href="#HTML-引入图片" class="headerlink" title="HTML 引入图片"></a>HTML 引入图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://ghchart.rshah.org/constown&quot; alt=&quot;constown&#x27;s Github chart&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="Markdown-引入图片"><a href="#Markdown-引入图片" class="headerlink" title="Markdown 引入图片"></a>Markdown 引入图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![constown&#x27;s Github chart](https://ghchart.rshah.org/constown)</span><br></pre></td></tr></table></figure><h2 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h2><p>这个工具还支持自定义配色方案，我们可以提供任何基本颜色来为图表添加阴影。</p><p>我们只需访问 <code>https://ghchart.rshah.org/2016rshah</code>，然后将 `` 替换为我们想要设置的十六进制颜色代码（不包括开头的标签）就可以了。</p><p>例如，如果我们想要一个的蓝色主题图表（<code>＃409ba5</code>），那么我们可以构造链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://ghchart.rshah.org/409ba5/constown&quot; alt=&quot;constown&#x27;s Blue Github Chart&quot; /&gt;</span><br></pre></td></tr></table></figure><p><img src="http://ghchart.rshah.org/409ba5/constown" alt="img"></p><ul><li><a href="https://github.com/2016rshah/githubchart-api">Github Chart API</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(八)：双线部署及全站CDN加速</title>
      <link href="/archives/fde43a3f.html"/>
      <url>/archives/fde43a3f.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！</p><p>CDN 加速我已更新：<a href="/archives/54c51cfa.html">Hexo 框架 (十八)：图片自适应 webp 及全站 CDN 加速</a></p></div><h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><p>这里就不再赘述如何部署到 GitHub，如果你还不会，可以参考一下 <a href="/archives/e3dc5cbb.html">Hexo 框架 (一)：使用 Hexo 快速搭建个人博客</a></p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>购买域名什么的，这里不再赘述，这里假定你已经购买了域名，并且会基本的解析操作。</p><h3 id="添加解析记录"><a href="#添加解析记录" class="headerlink" title="添加解析记录"></a>添加解析记录</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404125320.png" alt="添加解析记录"></p><h3 id="Github-Pages-对自定义域上-Https"><a href="#Github-Pages-对自定义域上-Https" class="headerlink" title="Github Pages 对自定义域上 Https"></a>Github Pages 对自定义域上 Https</h3><p>我们在 Github Pages 项目中 Settings 选项卡 Github Pages 选项：在 Custom domain 添加你的自定义域名。</p><p>刷新页面 如果能勾选 Enforce HTTPS 即完成。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404125034.png" alt="自定义域名"></p><h2 id="部署到-coding"><a href="#部署到-coding" class="headerlink" title="部署到 coding"></a>部署到 coding</h2><p>GitHub 服务器毕竟是在国外，国内访问的速度比较慢。而 Coding 是<strong>国内</strong>的一个面向开发者的云端开发平台，这意味着能够大大提升国内的访问速度。</p><p>本文简单记录了 Hexo 博客部署到 Coding 的过程。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ul><li><p>首先官网注册账号。现在好像不能注册个人版了。你可以点击这里进行注册：<a href="https://e.coding.net/signup?_ga=2.161434680.426044788.1585971162-1077804823.1584698701">Coding</a></p></li><li><p>注册完账号之后，请前个人账户的设置页面选择 SSH 公钥将本地生成的 公钥 添加进去。公钥储存位置一般在 <code>C:\Users\用户名\.ssh</code> 目录下的 <code>id_rsa.pub</code> 文件里，用记事本打开复制其内容即可。操作与 GitHub 类似，你可以参考 <a href="/archives/e3dc5cbb.html">Hexo 框架 (一)：使用 Hexo 快速搭建个人博客</a></p></li><li><p>新建项目</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404123409.png" alt="新建项目"></p></li><li><p>然后创建仓库</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404123453.png"></p></li></ul><p>一个仓库用来存储静态页面，一个用来保存我们的配置文件，做个备份。</p><h3 id="部署到-Coding-仓库"><a href="#部署到-Coding-仓库" class="headerlink" title="部署到 Coding 仓库"></a>部署到 Coding 仓库</h3><p>现在我们将 public 目录推送到 Coding 上博客仓库的 master 分支。</p><p>我们只需要改下站点的配置文件，添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://e.coding.net/XXXXX/XXXXXX.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>然后 <code>hexo deploy</code> 即可部署成功。</p><h3 id="开启-Coding-Pages-服务"><a href="#开启-Coding-Pages-服务" class="headerlink" title="开启 Coding Pages 服务"></a>开启 Coding Pages 服务</h3><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404123705.png" alt="静态网站"></p><p>博客部署完成后，我们在<code>构建与部署&gt; 静态网站</code>中一键开启 Coding Pages 服务。</p><p>在浏览器中直接输入他给的域名，查看是否部署成功。</p><h3 id="添加自定义域名"><a href="#添加自定义域名" class="headerlink" title="添加自定义域名"></a>添加自定义域名</h3><p>首先得有一个自定义域名，然后我们把它绑定到 Coding 上。</p><p>我是用的万网域名，直接打开 <a href="https://account.aliyun.com/">阿里云控制台</a>。</p><p>添加解析记录：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404124122.png" alt="添加解析"></p><p>注意：因为我们要实现国内外访问不同的服务，所以需要分别设置解析，无论是腾讯云还是阿里云的解析服务，都能够很好的区分国内外节点，我们需要将国内的 <code>CNAME</code> 设置到 <code>pages.coding.me</code>，将国外的 <code>CNAME</code> 设置到 <code>pages.github.io</code>。</p><h3 id="Coding-绑定自定义域名"><a href="#Coding-绑定自定义域名" class="headerlink" title="Coding 绑定自定义域名"></a>Coding 绑定自定义域名</h3><p>打开 Coding 的 Pages 服务，进入设置页面，为网站绑定自己的域名。这里他也有说怎么绑定。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404124318.png" alt="image-20200404124317316"></p><p>注意：一定要选首选的域名，并且<strong>非首选域名要勾选跳转至首选域名</strong>，不然有些第三方服务数据会统计不到一起。</p><h3 id="开启-HTTPS"><a href="#开启-HTTPS" class="headerlink" title="开启 HTTPS"></a>开启 HTTPS</h3><p>如果你之前已经部署到了 GitHub Pages 并开启了 HTTPS，那么直接在设置页面绑定你自己的域名，SSL/TLS 安全证书就会显示申请错误。</p><p>申请错误原因是：在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败。</p><p><strong>正确的做法是：先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，大约十秒左右就能申请成功，然后开启强制 HTTPS 访问</strong>。</p><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">https://e.coding.net/XXXX/blog.git</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/XXXXX/XXXXX.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>到此双线部署完成，你每次<code>hexo d</code> 就会自动上传到两个仓库，并自动部署。</p><h2 id="全站-CDN-加速"><a href="#全站-CDN-加速" class="headerlink" title="全站 CDN 加速"></a>全站 CDN 加速</h2><p>由于 GitHub Pages 的服务器在国外，国内访问速度可能会非常慢。目前有以下几种解决方案：</p><ul><li>博客双线部署在 GitHub Pages 和 Coding Pages 上，其中国内流量解析到 Coding Pages，国外流量解析到 GitHub Pages<ul><li>优势：无需购买 VPS、速度比较快、不用备案</li><li>劣势：Coding Pages 的服务并不是那么稳定，近期出现多次不能正常部署或访问 Pages 的问题</li></ul></li><li>博客部署到国内的 VPS<ul><li>优势：速度快</li><li>劣势：需要购买 VPS、需要备案</li></ul></li><li>博客部署在 GitHub Pages 上并采用 CDN 加速<ul><li>优势：速度快、无需备案、稳定</li><li>劣势：CDN 比较贵</li></ul></li></ul><p><strong>CDN 介绍</strong></p><blockquote><p>内容分发网络（Content delivery network 或 Content distribution network，缩写：CDN）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p></blockquote><p>简单来说，CDN 就是部署在世界各地的缓存服务器，它们会提前缓存网站上的资源，然后当用户想要访问相关资源时，直接从 CDN 服务器上取就可以了。这样不仅可以增加访问速度减少访问延迟，还可以减缓网站服务器上的压力。</p><p><strong>为什么选择 Cloudflare？</strong></p><p>国内的 CDN 服务提供商有不少，但是基本都需要备案，因此我转向了 Cloudflare 这个国外的 CDN 服务提供商。</p><p>Cloudflare 是全球最大的 DNS 服务提供商之一。除此之外他们还提供 CDN、SSL 证书、DDos 保护等服务，并且 Cloudflare 与百度有合作，在国内也部署有大量的节点，还能顺便解决百度爬无法抓取 GitHub Pages 的问题。</p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><ul><li><p>首先要去 <a href="https://www.cloudflare.com/zh-cn/network/china/">Cloudflare</a> 注册一个帐号。<strong>注意：我们需要的是国际版的 CloudFlare，而不是 CloudFlare 与百度合作的百度云加速</strong>。</p></li><li><p>注册好后点击 <code>Add site</code> 添加你的网站个性化域名。</p></li><li><p>添加好后选择免费的那个计划（Plan），有钱也可以选择收费的，提供的服务更多。</p></li><li><p>然后点击 <code>Scan DNS Records</code>，等待扫描完成。即使没有扫到 DNS 记录也没有关系，我们可以在后面自己添加：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404130218.png" alt="添加记录"></p><p>然后 Cloudflare 会要你把你的 DNS 服务器替换成他提供的，我们只需要去域名商那里设置一下即可。<strong>CloudFlare 既是一个 CDN 服务商，同样也是一个 DNS 服务商</strong>。DNS 修改完成后可以点击 <code>Recheck Nameservers</code> 来复查 NS 记录是否正确设置。</p><h3 id="Cloudflare-配置详解"><a href="#Cloudflare-配置详解" class="headerlink" title="Cloudflare 配置详解"></a>Cloudflare 配置详解</h3><h4 id="Overview-菜单设置"><a href="#Overview-菜单设置" class="headerlink" title="Overview 菜单设置"></a>Overview 菜单设置</h4><p>主要关注下面两个快捷设置：</p><ul><li><code>under attack mode</code>：当你的网站被攻击的时候打开它，这样可以阻止攻击。</li><li><code>development mode</code>：由于 cloudflare 采用了缓存技术，当你更新了网站的内容，不一定能马上在前台看到更新的内容。这个时候你只要打开 development mode 就可以马上看到网站更新的内容。当然，正常情况下还是关掉比较好。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404131850.png" alt="OverView菜单"></p><h4 id="Analytics-菜单设置"><a href="#Analytics-菜单设置" class="headerlink" title="Analytics 菜单设置"></a>Analytics 菜单设置</h4><p>这里主要是看网站使用 cloudflare 之后的一些分析数据，Analytics 下面包含几个子菜单：Traffic、security、Performance、DNS。</p><ul><li>Traffic 子菜单：主要是网站在过去某一个时间段的请求、带宽、访客情况。</li><li>Security 子菜单：主要是某一段时间内受到的威胁数据，包括威胁次数、来自哪些国家、威胁的类型等等。</li><li>Performance 子菜单：付费功能。</li><li>DNS 子菜单：主要是 DNS 查询的数据。</li></ul><h4 id="DNS-菜单设置"><a href="#DNS-菜单设置" class="headerlink" title="DNS 菜单设置"></a>DNS 菜单设置</h4><p>在 DNS 菜单里面，你可以随意添加或删除所有 DNS 记录，也可以选择使用或不使用 cloudflare 的 CDN 服务。</p><p>注意：只有 A 记录和 CNAME 记录才可以设置使用 CDN 服务，我们只需要点亮 <code>Proxy status</code> 处的云彩小图标即可切换成使用 CDN 的状态。</p><h4 id="SSL-TLS-菜单设置"><a href="#SSL-TLS-菜单设置" class="headerlink" title="SSL/TLS 菜单设置"></a>SSL/TLS 菜单设置</h4><p>这里面主要是网站加密的设置。</p><ul><li><code>SSL</code> 设置：如果你本来的网站有 SSL 证书，这里选择 full 即可，即浏览器到 Cloudflare 和 Cloudflare 到服务器都是加密的。</li><li><strong><code>Always Use HTTPS</code> 设置：这个打开，一直使用 https 链接</strong>。</li><li><code>Authenticated Origin Pulls</code> &amp; <code>Opportunistic Encryption</code> &amp; <code>Onion Routing</code> 设置：这些设置都打开</li><li><code>Minimum TLS Version</code> 设置：选择 1.1 即可，如果选择太高可能导致网站打不开。</li></ul><h4 id="Firewall-菜单设置"><a href="#Firewall-菜单设置" class="headerlink" title="Firewall 菜单设置"></a>Firewall 菜单设置</h4><p>Firewall 菜单里面可以对网站安全进一步设置，限制某些 IP 或地区的用户访问等。</p><ul><li><p>Events 子菜单：这里面可以查看防火墙的一些小事件，比如屏蔽的一些访问。</p></li><li><p>Managed Rules 子菜单：付费功能。</p></li><li><p>Firewall Rules 子菜单：这里可以设置限制其他人访问你的网站的规则，每个账户只能设置 5 个限制规则。</p></li><li><p>TOOLS 子菜单：这里的功能是 firewall rules 功能的补充，都是对用户访问你的网站的一些设置。</p><ul><li><code>IP Access Rules</code>：主要是针对 IP、IP 范围及国家和 ASN 设置一些规则。</li><li><code>User Agent Blocking</code>：对用户使用的代理设置规则，比如浏览器类型、CPU、操作系统。</li></ul></li><li><p>Settting 子菜单：</p><ul><li><code>Security Level</code>：这个设置 low 即可，如果设置太高，就会过于敏感，导致很多用户受影响。</li><li><code>Challenge Passage</code>：这是验证的有效期，可以设置久一点，比如 <code>1 hour</code>。</li><li><code>Browser Integrity Check</code> 和 <code>Privacy Pass Support</code>：全部打开。</li></ul></li></ul><h4 id="Speed-菜单设置"><a href="#Speed-菜单设置" class="headerlink" title="Speed 菜单设置"></a>Speed 菜单设置</h4><ul><li><code>Auto Minify</code>：网页最小化处理，把 Javascript, css html 前面都打勾即可。</li><li><code>Brotli</code>：这是一种比 gzip 更好的网页压缩方式，打开即可。</li><li><code>Rocket Loader</code>：这个需要测试决定是否需要打开，没有固定的答案，你可以打开之后，然后在不同的浏览器上面查看网页的效果，如果出现网页排版等问题，那就将它关闭。</li></ul><h4 id="Caching-菜单设置"><a href="#Caching-菜单设置" class="headerlink" title="Caching 菜单设置"></a>Caching 菜单设置</h4><ul><li><p><code>Purge Cache</code>：这个设置是清除缓存，其中：</p></li><li><p><code>Custom Purge</code>：清除指定页面的缓存，我们可以点击 <code>custom purge</code>, 然后在框里面输入要清除的链接，再点击 <code>purge</code> 即可。</p><ul><li><code>Purge Everything</code>：清除整个网站的缓存。</li></ul></li><li><p><code>Caching Level</code>：缓存水平设置，决定缓存哪些内容，这里选择 standard 即可。</p></li><li><p><code>Browser Cache TTL</code>：即浏览器缓存过期时间，决定浏览器多久向网站获取一次新缓存。</p></li></ul><h4 id="Page-Rules-菜单设置"><a href="#Page-Rules-菜单设置" class="headerlink" title="Page Rules 菜单设置"></a>Page Rules 菜单设置</h4><p>免费版本可以设置 3 个页面的规则。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(七)：博客性能优化提升加载速度</title>
      <link href="/archives/868f84ed.html"/>
      <url>/archives/868f84ed.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！</p></div><p>在使用博客的时候，总感觉不太流畅，页面性能感觉很低，所以，今天对博客进行了一些优化。</p><h2 id="去掉无用的功能"><a href="#去掉无用的功能" class="headerlink" title="去掉无用的功能"></a>去掉无用的功能</h2><p>尽量以实用为主，去掉一些不必要的功能，取消了 DaoVoice，鼠标点击特效等。</p><h2 id="使用-CDN-加载部分-css、js"><a href="#使用-CDN-加载部分-css、js" class="headerlink" title="使用 CDN 加载部分 css、js"></a>使用 CDN 加载部分 css、js</h2><p>外部资源加载使用 jsDeliver</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404101343.png" alt="CDN加速外部资源"></p><h2 id="压缩静态资源"><a href="#压缩静态资源" class="headerlink" title="压缩静态资源"></a>压缩静态资源</h2><p>我们自己添加的 css 和 js 文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说是没有用的，甚至还会降低渲染页面的速度。同时，由于 Markdown 转成 html 的 bug，会导致页面存在大量的空白，我们可以通过查看页面源代码发现这些大量的空白符，这也会造成页面渲染的性能问题。</p><p>因此，我们需要对页面的静态资源进行压缩，包括 css、js 和 html 等文件。</p><p>我们可以使用 <code>hexo-neat</code> 插件进行压缩。<code>hexo-neat</code> 配置简单，无需额外命令，我们只需使用原本的调试、部署命令就可以自动完成静态资源的压缩。</p><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p>然后我们需要在<strong>站点</strong>配置文件<code>_config.yml</code> 中添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/jquery.fancybox.pack.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/index.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/fireworks.js&#x27;</span></span><br></pre></td></tr></table></figure><p>但是好像这个插件有点点问题，我通常是不压缩 js 的，压缩 js 的时候会报错。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(六)：SEO优化及站点被搜索引擎收录设置</title>
      <link href="/archives/9013c8d8.html"/>
      <url>/archives/9013c8d8.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！</p></div><p>我们必须把我们的网站推送到搜索引擎那， 不然别人除了输入我们的域名或者搜索文章，是没法发现我们的博文。</p><p>如何查看我的网站是否被收录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:你的网站</span><br><span class="line">比如我的：site:blog.juanertu.com</span><br></pre></td></tr></table></figure><h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><p>站点地图即<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/sitemap/6241567?fr=aladdin">sitemap</a>， 是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。所以我们首先需要生成一个站点地图</p><p>安装百度和 Google 的站点地图生成插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-baidu-sitemap</span> <span class="literal">--save</span></span><br><span class="line">npm install hexo<span class="literal">-generator-sitemap</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p>然后来到站点目录配置文件<code>_config.yml</code>，在下面添加：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 站点地图</span></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>然后重新推送到服务器，在访问如下 URL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://你的域名/sitemap.xml</span><br><span class="line">https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>看看有没有出现代码。有的话就成功。</p><p>给你的 hexo 网站添加蜘蛛协议 robots.txt,<em>把 robots.txt 放在你的 hexo 站点的 source 文件下即可。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line"></span><br><span class="line">Sitemap: https://blog.juanertu.com/sitemap.xml</span><br><span class="line">Sitemap: https://blog.juanertu.com/baidusitemap.xml</span><br></pre></td></tr></table></figure><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><h3 id="提交网站"><a href="#提交网站" class="headerlink" title="提交网站"></a>提交网站</h3><p>通过百度站长平台进行链接提交，增加网站的索引量。先去注册并登录：<a href="https://ziyuan.baidu.com/?castk=LTE=">百度站长平台</a></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403221307.png" alt="百度站长平台"></p><p>然后需要验证网站，我选择的是<code>https://</code>，这根据你前面是否添加 SSL 证书来选择。并且我使用的是不带 www 的，看个人。然后到第三步，我使用的<strong>HTML 标签验证</strong>。你也可以选择自己喜欢的方式</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403221838.png" alt="验证网站"></p><p>把<code>content</code> 中的字符串复制到 <code>主题配置文件</code> 中的<code>baidu_site_verification</code> 就好。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span> <span class="comment">#这里填上面的字符串</span></span><br></pre></td></tr></table></figure><h3 id="提交链接"><a href="#提交链接" class="headerlink" title="提交链接"></a>提交链接</h3><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。</p><h4 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h4><p>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-baidu-url-submit</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p>然后到站点目录配置文件<code>_config.yml</code>，添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主动推送百度，被百度收录</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">10</span> <span class="comment"># 提交最新的10个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="comment"># 百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="comment"># 秘钥，百度站长平台 &gt; 推送接口 &gt; 接口调用地址中token字段</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里，不用改</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403222340.png" alt="自动提交"></p><p>其次，记得查看<code>_config.yml</code>文件中 url 的值， 必须包含是百度站长平台注册的域名， 比如:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.juanertu.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>最后，加入新的 deployer:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">coding:</span></span><br><span class="line">      <span class="attr">github:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403222515.png" alt="deployer"></p><p>其主动推送的实现原理如下：</p><ul><li>新链接的产生， <code>hexo generate</code> 会产生一个文本文件，里面包含最新的链接</li><li>新链接的提交， <code>hexo deploy</code> 会从上述文件中读取链接，提交至百度搜索引擎</li></ul><h4 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h4><p>可以在<code>themes\next\layout\_third-party</code>中看到一个 baidu-push.swig 文件，这应该是现在 next 版本自带的。所以就不用配置了。如果没有则，在此目录下创建一个名为：baidu-push.swig 文件。然后添加：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="operator">%-</span> <span class="keyword">if</span> theme.baidu_push <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>script&#123;&#123; pjax &#125;&#125;<span class="operator">&gt;</span></span><br><span class="line">    (function()&#123;</span><br><span class="line">      <span class="keyword">var</span> bp <span class="operator">=</span> document.createElement(&#x27;script&#x27;);</span><br><span class="line">      <span class="keyword">var</span> curProtocol <span class="operator">=</span> window.location.protocol.split(&#x27;:&#x27;)[<span class="number">0</span>];</span><br><span class="line">      bp.src <span class="operator">=</span> (curProtocol <span class="operator">===</span> &#x27;https&#x27;) <span class="operator">?</span> &#x27;https:<span class="comment">//zz.bdstatic.com/linksubmit/push.js&#x27; : &#x27;http://push.zhanzhang.baidu.com/push.js&#x27;;</span></span><br><span class="line">      <span class="keyword">var</span> s <span class="operator">=</span> document.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">      s.parentNode.insertBefore(bp, s);</span><br><span class="line">    &#125;)();</span><br><span class="line">  <span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%-</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403222743.png" alt="自动推送"></p><h4 id="手动提交"><a href="#手动提交" class="headerlink" title="手动提交"></a>手动提交</h4><p>把下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://你的域名/sitemap.xml</span><br><span class="line">https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>复制粘贴到这里，然后提交。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403223016.png" alt="手动提交"></p><p>然后就是等待收录了，反正百度收录慢得要死。</p><h2 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h2><p>提交谷歌搜索引擎比较简单，在提交之前，我们依然可以使用 <code>site:域名</code> 查看网站是否被收录。进入<a href="https://www.google.com/webmasters/#?modal_active=none">谷歌站长</a>，登录你的谷歌账号。然后如下操作，要是第一次就弹出一个让你输入域名的提示框，就直接输入你要收录的网站域名就行。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403223138.png" alt="选择资源类型"></p><p>选择第一个或者第二个都可以的，我两个都做了，也与百度的类似。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403223206.png" alt="验证所有权"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403223509.png" alt="验证所有权"></p><p>你也可以下载个 HTML 文件然后放在站点目录下的 source 中，然后推送到服务器。或者把<code>content</code>中的字符串复制到<code>主题配置文件</code> 中的<code>google_site_verification</code> 就好。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line"><span class="attr">google_site_verification:</span></span><br></pre></td></tr></table></figure><p>输入完就不用去理了。第二天会自动收录。</p><h2 id="必应收录"><a href="#必应收录" class="headerlink" title="必应收录"></a>必应收录</h2><p>必应收录也是很简单，点击<a href="https://www.bing.com/webmaster/home/mysites">必应站长</a>。先注册登录，必应收录有两种方式，一种使用刚刚谷歌导入过去，第二种是就是自己添加 URL</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200403224338.png" alt="必应收录"></p><p>整体来说都比较类似。然后就等着收录就好了！</p><h2 id="其他收录"><a href="#其他收录" class="headerlink" title="其他收录"></a>其他收录</h2><p>其他搜索引擎的收录都很类似，就不一一赘述了。</p><h2 id="url-持久化"><a href="#url-持久化" class="headerlink" title="url 持久化"></a>url 持久化</h2><p>我们可以发现 hexo 默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。</p><p>这种链接对搜索爬虫是很不友好的，第一它的 url 结构超过了三层，太深了。<br>下面我推荐一种方式：安装 hexo-abbrlink</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>然后配置_config.yml：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :title/</span></span><br><span class="line"><span class="symbol">permalink:</span> archives/<span class="symbol">:abbrlink</span>.html</span><br><span class="line"><span class="symbol">abbrlink:</span></span><br><span class="line">  <span class="symbol">alg:</span> crc32  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="symbol">rep:</span> hex    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>之后部署一下，就看到你的链接变成了这样：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200404102913.png" alt="url持久化"></p><h2 id="添加-nofollow-标签"><a href="#添加-nofollow-标签" class="headerlink" title="添加 nofollow 标签"></a>添加 nofollow 标签</h2><p>给非友情链接的出站链接添加「nofollow」标签，nofollow 标签是由谷歌领头创新的一个「反垃圾链接」的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure><p>再在站点的<code>_config.yml</code> 中添加配置，将 <code>nofollow</code> 设置为 <code>true</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">  enable: true</span><br><span class="line">  field: site</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;exclude1.com&#x27;</span><br><span class="line">    - &#x27;exclude2.com&#x27;</span><br></pre></td></tr></table></figure><p>这样，例外的链接将不会被加上 <code>nofollow</code> 属性。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(五)：将SEO描述作为简介</title>
      <link href="/archives/e8460ade.html"/>
      <url>/archives/e8460ade.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！<strong>注意：目前我已经更新至最新版本，目前采用了全新的配置方式，这里的主题配置文件，均指 hexo/source/_data 目录下的 next.yml 文件，你可以点击这里查看：<a href="/archives/5b20fbd0.html">关于博客主题持续更新的问题和我的新配置方式</a></strong></p><p>此外，由于对于要修改源码的配置方式，目前我均已放弃。</p></div><h2 id="一、文首显示文章描述"><a href="#一、文首显示文章描述" class="headerlink" title="一、文首显示文章描述"></a>一、文首显示文章描述</h2><p>在给博客做 SEO 优化时，通常会给每一篇文章都加一个描述 description 属性，这样能更方便地使得文章被搜索引擎检索到。不过 description 会和正文的 <code>ReadMore</code> 冲突，也就是不论正文在哪里划分 `` 标签，只要设置了 description 就会导致首页显示的文章缩略内容是 description，并且点击阅读全文后，这个 description 会作为一个文章信息的形式展示而非正文：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331214811.png" alt="image-20200331214810342"></p><p>这就使得本就信息栏更加复杂，而且如果文章确实需要一个简介，在正文处又要再写一次，不仅重复而且不美观。所以可以想办法把 description 从信息栏移到正文开头，恰好作为简介使用，而且还能优化 SEO，一举两得。调整 description 的位置需要修改 <code>next/layout/_macro/post.swig</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;#################&#125;</span><br><span class="line">&#123;## POST HEADER ##&#125;</span><br><span class="line">&#123;#################&#125;</span><br><span class="line">&#123;% if not headlessPost %&#125;</span><br><span class="line">  &lt;header class=&quot;post-header&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &#123;### 中间隔了很长一大段 ###&#125;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  &#123;### 一直到 Post Header 的最下面 ###&#125;</span><br><span class="line"></span><br><span class="line">  &#123;#################&#125;</span><br><span class="line">  &#123;## Description ##&#125;</span><br><span class="line">  &#123;#################&#125;</span><br><span class="line">  &#123;% if post.description and (not theme.excerpt_description or not is_index) %&#125;</span><br><span class="line">    &lt;div class=&quot;post-description&quot;&gt;&#123;#</span><br><span class="line">      #&#125;&#123;&#123; post.description &#125;&#125;&#123;#</span><br><span class="line">    #&#125;&lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;#################&#125;</span><br><span class="line">&#123;### POST BODY ###&#125;</span><br><span class="line">&#123;#################&#125;</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>由于比较复杂，我截了一个图，如果版本相同的话，你可以按照代码行来缩小查找范围：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331215223.png" alt="image-20200331215221802"></p><p>把这段 Description 的代码复制下来，然后把这里删掉，找到下面 <strong>Post Body</strong> 部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;#################&#125;</span><br><span class="line">&#123;### POST BODY ###&#125;</span><br><span class="line">&#123;#################&#125;</span><br><span class="line">&lt;div class=&quot;post-body&#123;% if theme.han %&#125; han-init-context&#123;% endif %&#125;&#123;% if post.direction &amp;&amp; post.direction.toLowerCase() === &#x27;rtl&#x27; %&#125; rtl&#123;% endif %&#125;&quot; itemprop=&quot;articleBody&quot;&gt;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  &#123;% if is_index %&#125;</span><br><span class="line">    &#123;% if post.description and theme.excerpt_description %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;### 这里是首页文章列表的描述 ###&#125;</span><br><span class="line">      &#123;### 在描述前面加一个高亮的“简介：”开头 ###&#125;</span><br><span class="line">      &lt;span style=&quot;color: #EB6D39&quot;&gt;简介：&lt;/span&gt;&#123;&#123; post.description &#125;&#125;</span><br><span class="line"></span><br><span class="line">      ......</span><br><span class="line"></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;### 这里是正文内的描述 ###&#125;</span><br><span class="line">    &#123;### 在描述前面加一个高亮的“简介：”开头 ###&#125;</span><br><span class="line"></span><br><span class="line">    &#123;#################&#125;</span><br><span class="line">    &#123;## Description ##&#125;</span><br><span class="line">    &#123;#################&#125;</span><br><span class="line">    &#123;### 把 Description 显示在正文内 ###&#125;</span><br><span class="line">    &#123;% if post.description and (not theme.excerpt_description or not is_index) %&#125;</span><br><span class="line">      &lt;div class=&quot;post-description&quot;&gt;&#123;#</span><br><span class="line">        #&#125;&lt;span style=&quot;color: #EB6D39&quot;&gt;简介：&lt;/span&gt;&#123;&#123; post.description &#125;&#125;&#123;#</span><br><span class="line">      #&#125;&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;### 下面就是正文内容 ###&#125;</span><br><span class="line">    &#123;&#123; post.content &#125;&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>同样的我也截了一个图，作为参考：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331215457.png" alt="image-20200331215457003"></p><p>这样，首页的描述前就会自动加上高亮的“简介：”开头了：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331215549.png" alt="image-20200331215549012"></p><p>正文内的描述也会有同样效果：</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331214647.png" alt="image-20200331214646275"></h2><h2 id="自动切换“简介”和“未完待续”"><a href="#自动切换“简介”和“未完待续”" class="headerlink" title="自动切换“简介”和“未完待续”"></a>自动切换“简介”和“未完待续”</h2><p>如果一篇文章尚未完成，想要在文首提示一些信息，可能会这么做：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331215720.png" alt="image-20200331215718604"></p><p>但是显得不够简洁，简介就应该是针对一篇已完成的文章。因此，可以利用自定义文章头部属性的方式进行适配。首先在未完成的文章头部属性中增加一个自定义属性 <code>unfinished: true</code>，当然也可以按自己的喜好来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title</span>: 例文</span><br><span class="line"><span class="attr">date</span>: <span class="number">2020</span>-<span class="number">02</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">12</span></span><br><span class="line"><span class="attr">unfinished</span>: <span class="literal">true</span></span><br><span class="line"><span class="attr">description</span>: 简介 / 未完待续</span><br></pre></td></tr></table></figure><p>然后修改 <code>next/layout/_macro/post.swig</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if is_index %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;####################################&#125;</span><br><span class="line">  &#123;### 首页文章列表中显示的简介/未完待续 ###&#125;</span><br><span class="line">  &#123;####################################&#125;</span><br><span class="line">  &#123;% if post.description and theme.excerpt_description %&#125;</span><br><span class="line">    &lt;span style=&quot;color: #EB6D39&quot;&gt;&#123;#</span><br><span class="line">        #&#125;&#123;% if post.unfinished %&#125;</span><br><span class="line">            未完待续：</span><br><span class="line">          &#123;% else %&#125;</span><br><span class="line">            简介：</span><br><span class="line">          &#123;% endif %&#125;&#123;#</span><br><span class="line">      #&#125;&lt;/span&gt;&#123;&#123; post.description &#125;&#125;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;#################################&#125;</span><br><span class="line">  &#123;### 正文文首中显示的简介/未完待续 ###&#125;</span><br><span class="line">  &#123;#################################&#125;</span><br><span class="line">  &#123;% if post.description and (not theme.excerpt_description or not is_index) %&#125;</span><br><span class="line">    &lt;div class=&quot;post-description&quot;&gt;&#123;#</span><br><span class="line">      #&#125;&lt;span style=&quot;color: #EB6D39&quot;&gt;&#123;#</span><br><span class="line">        #&#125;&#123;% if post.unfinished %&#125;</span><br><span class="line">            未完待续：</span><br><span class="line">          &#123;% else %&#125;</span><br><span class="line">            简介：</span><br><span class="line">          &#123;% endif %&#125;&#123;#</span><br><span class="line">      #&#125;&lt;/span&gt;&#123;&#123; post.description &#125;&#125;&#123;#</span><br><span class="line">    #&#125;&lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331220002.png" alt="image-20200331220001483"></p><p>这样，如果文章具有 <code>unfinished: true</code> 属性，则会显示“未完待续”，完成文章后删掉这个属性，即可正常显示“简介”了。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331220103.png" alt="image-20200331220102305"></p><p>完成后的文章：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331220135.png" alt="image-20200331220134638"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.liushulun.cn/post/blogdiy/blogdiy-16-description/">Hexo 博客 DIY：SEO 描述作为简介并添加 LaTeX 提示</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(一)：使用Hexo快速搭建个人博客</title>
      <link href="/archives/e3dc5cbb.html"/>
      <url>/archives/e3dc5cbb.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！</p></div><p>平时自己也会做很多笔记，把一些学习和开发中的经验心得和踩过的一些坑及解决办法写下来，但是笔记都太多零散，不方便整理成册，而且因为电脑原因还丢失了很多笔记，所以就想写一个博客。</p><p>但是之前所使用的一些博客或者记录网站，都不太符合自己的心意，要么广告太多，要么太过繁琐。所以我觉得搭建一个属于自己的博客。</p><p>Hexo 是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持 Markdown 格式，有众多优秀插件和主题。本篇使用 Hexo + GitHub Pages 在 windows 系统快速搭建一个免费个人博客。</p><h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><h3 id="安装-Git-Bash"><a href="#安装-Git-Bash" class="headerlink" title="安装 Git Bash"></a>安装 Git Bash</h3><p>安装教程你可以看这里：<a href="/archives/616a84f2.html">Git 安装教程</a></p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>安装教程你可以看这里：<a href="/archives/4f1f2f20.html">Node.js 安装教程</a></p><h3 id="配置-Github-仓库"><a href="#配置-Github-仓库" class="headerlink" title="配置 Github 仓库"></a>配置 Github 仓库</h3><p>关于 GitHub 注册相关这里就不赘述了。</p><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><ul><li>新建一个名为<code>你的用户名.github.io</code>的仓库，如果你的 github 用户名是<code>test</code>，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <code>http://test.github.io</code> 了.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205017.png" alt="新建仓库"></p><ul><li><p>仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名,然后点击 Create repository；</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205025.png" alt="创建仓库"></p></li><li><p>创建成功：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205033.png" alt="创建完成"></p><h4 id="配置-SSH-key"><a href="#配置-SSH-key" class="headerlink" title="配置 SSH key"></a>配置 SSH key</h4><ul><li>回到 GitBash 中，配置 GitHub 账户信息（YourName 和 YourEail 都替换成你自己的）：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205042.png" alt="image-20200318210215347"></p><ul><li><p>创建 SSH。</p></li><li><p>在 GitBash 中输入命令(替换成你 GitHub 绑定的邮箱)，回车三次。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205053.png" alt="配置"></p><ul><li>出现以下界面：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205058.png" alt="成功"></p><ul><li>找到红框中的路径，用记事本打开<code>id_rsa.pub</code>文件，复制里面的内容。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205107.png" alt="路径"></p><ul><li>返回 GitHub，打开这个设置：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205114.png" alt="设置"></p><ul><li>选择 SSH and GPG keys，然后点击 New SSHkey</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205123.png" alt="新建SSH key"></p><ul><li>把你复制的记事本的内容填到这里，然后点击 Add SSH key：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205133.png" alt="image-20200318211835432"></p><ul><li><p>检查是否成功：</p><pre><code>在GitBash中输入命令：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure>如果提示:<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to <span class="keyword">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>输入：yes。如果看到这样。说明SSH配置成功！</code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205145.png" alt="配置成功"></p><h3 id="代码编辑器"><a href="#代码编辑器" class="headerlink" title="代码编辑器"></a>代码编辑器</h3><p>我选择使用 VSCode，关于代码编辑器相关的东西，这里不再赘述。</p><h2 id="使用-Hexo-搭建博客"><a href="#使用-Hexo-搭建博客" class="headerlink" title="使用 Hexo 搭建博客"></a>使用 Hexo 搭建博客</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><ul><li>1.创建一个文件夹，我们可以命名为 Blog，将这个文件夹在 VSCode 中打开，并打开 VSCode 终端。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205153.png" alt="vscode"></p><ul><li>2.在终端中输入<code>npm install -g hexo</code> 进行全局安装。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205201.png" alt="输入"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205209.png" alt="image-20200318213600276"></p><ul><li>3.初始化项目：在终端中输入<code>hexo init</code>，初始化完成后项目结构如图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320205220.png" alt="image-20200318214545681"></p><ul><li>如果文件夹内没有 node_modules 文件夹，我们需要安装一下依赖，输入命令：<code>npm install</code> 进行安装。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320210653.png" alt="image-20200318214841319"></p><ul><li>安装完成后，我们可以运行<code>hexo g</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320210703.png" alt="image-20200318214932858"></p><ul><li>然后运行<code>hexo s</code>，即可本地预览博客。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320210713.png" alt="image-20200318215039717"></p><ul><li>浏览器输入 <a href="http://localhost:4000/">http://localhost:4000/</a> ，查看效果。出现这个界面，表示成功！</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320210725.png" alt="image-20200318215136343"></p><h3 id="上传到-GitHub"><a href="#上传到-GitHub" class="headerlink" title="上传到 GitHub"></a>上传到 GitHub</h3><ul><li>首先打开 Blog 根目录下的<code>_config.yml</code>文件，翻到最后进行如下配置(替换你自己的 GitHub 名字)：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320210736.png" alt="image-20200318215528546"></p><ul><li>在终端执行命令安装一下插件：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320210746.png" alt="image-20200318215809920"></p><p>（我使用了淘宝镜像，所以是 cnpm。与 npm 没有什么区别。）</p><ul><li>然后我们依次执行一下这 3 个命令<ul><li><code>hexo clean</code></li><li><code>hexo g</code></li><li><code>hexo d</code></li></ul></li><li>如果在过程中弹出提示要求你输入 GitHub 的账户和密码，输入即可，最后弹出：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320210754.png" alt="image-20200318220305772"></p><ul><li>打开浏览器，输入你的地址：<a href="https://yourname.github.io/%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C%E3%80%82%E8%87%B3%E6%AD%A4%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%AF%95%E3%80%82">https://YourName.github.io/，即可看到效果。至此博客搭建完毕。</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320210803.png" alt="image-20200318220503520"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>使用 Hexo + GitHub Pages 搭建一个博客的基础工作到这里就完成了，后面将详细介绍如何使用及个性化设置。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitBash安装 </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Node.js安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(四)：Next主题文章置顶和公告效果</title>
      <link href="/archives/540169c9.html"/>
      <url>/archives/540169c9.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！<strong>注意：目前我已经更新至最新版本，目前采用了全新的配置方式，这里的主题配置文件，均指 hexo/source/_data 目录下的 next.yml 文件，你可以点击这里查看：<a href="/archives/5b20fbd0.html">关于博客主题持续更新的问题和我的新配置方式</a></strong></p><p>此外，由于对于要修改源码的配置方式，目前我均已放弃。</p></div><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>Hexo 本身并没有内置文章置顶功能，因此需要自行安装。不过 Hexo 本身有一个对文章排序的组件，也就是在站点配置文件内的 <code>index_generator</code> 选项，置顶功能其实就是每次排序的时候，把其中的置顶文章排在最前，本质上是一个排序组件，Hexo 默认的是 <code>hexo-generator-index</code>，所以先卸载再重新安装一个可以置顶的排序组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 先卸载</span><br><span class="line">npm uninstall --save hexo-generator-index</span><br><span class="line"></span><br><span class="line"># 再安装</span><br><span class="line">npm install --save hexo-generator-index-pin-top</span><br></pre></td></tr></table></figure><p>从插件名字上就能看得出来支持置顶了。该插件的 GitHub 地址：<a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a>。插件安装完之后，只需要在文章头部信息栏内设置 <code>top</code> 属性即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo博客文章置顶</span><br><span class="line">date: 2020-03-31 07:31:04</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这样这篇文章就具有置顶效果了。不过，仅仅只是这么做，文章虽然确实置顶了，但是从文章列表上来看，和普通的文章没什么不同。如果不特意去对比文章发布时间，可能会以为只是最新的文章而已。例如一些说明、通知之类的，为了能有个比较突出的标志，可以在 <code>next/layout/_macro/post.swig</code> 文件中找到以下位置并添加代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>div <span class="keyword">class</span>=&quot;<span class="title class_">post</span>-<span class="title class_">meta</span>&quot;&gt;</span><br><span class="line">  &#123;<span class="operator">%========</span> 加在这里<span class="operator">============%</span>&#125;</span><br><span class="line">  &#123;<span class="operator">%</span> <span class="keyword">if</span> post.top <span class="operator">%</span>&#125;</span><br><span class="line">    <span class="operator">&lt;</span>i <span class="keyword">class</span>=&quot;<span class="title class_">fa</span> <span class="title class_">fa</span>-<span class="title class_">thumb</span>-<span class="title class_">tack</span>&quot; <span class="title class_">style</span>=&quot;<span class="title class_">color</span>: #<span class="title class_">EB6D39</span>&quot;&gt;&lt;/<span class="title class_">i</span>&gt;</span><br><span class="line">    &lt;<span class="title class_">font</span> <span class="title class_">color</span>=<span class="title class_">EB6D39</span>&gt;置顶&lt;/<span class="title class_">font</span>&gt;</span><br><span class="line">    &lt;<span class="title class_">span</span> <span class="title class_">class</span>=&quot;<span class="title class_">post</span>-<span class="title class_">meta</span>-<span class="title class_">divider</span>&quot;&gt;|&lt;/<span class="title class_">span</span>&gt;</span><br><span class="line">  &#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br><span class="line">  &#123;<span class="operator">%</span> <span class="operator">============================</span> <span class="operator">%</span>&#125;</span><br><span class="line">&#123;<span class="operator">%-</span> <span class="keyword">set</span> date_diff <span class="operator">=</span> date(post.date) <span class="operator">!=</span> date(post.updated) <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><p>这里的图标、文字、以及各自对应的颜色都可以自定义。完成后的效果就是：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331204310.png" alt="image-20200331204301994"></p><h2 id="公告效果"><a href="#公告效果" class="headerlink" title="公告效果"></a>公告效果</h2><p>现在文章置顶已经成功实现了，但是还有个问题，比如像我的博客，文章置顶是类似于一个窗格的形式，更符合“置顶消息”这么一个设定，没有标题、没有分类和标签、没有日期等等，但是如果不填写 title 栏，仍然会显示一个默认的“未命名”标题：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331204715.png" alt="image-20200331204713823"></p><p>而且会导致搜索无法使用，因此如果想实现这种：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331204739.png" alt="文章置顶"></p><p>就需要在文章的头部信息栏加入一个 <code>header</code> 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 谢谢你来看我的博客</span><br><span class="line"><span class="attr">date</span>: <span class="number">2020</span>-<span class="number">01</span>-<span class="number">31</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">13</span></span><br><span class="line"><span class="attr">top</span>: <span class="literal">true</span></span><br><span class="line"><span class="attr">header</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这样文章就会变成一个完全没有标题和各种属性的引用块了。</p><div class="note danger flat"><p>注意：下面的内容，因为涉及到修改源码，目前我已经不再使用了！</p></div><h2 id="从侧边栏去掉文章计数"><a href="#从侧边栏去掉文章计数" class="headerlink" title="从侧边栏去掉文章计数"></a>从侧边栏去掉文章计数</h2><p>正常情况下，Next 主题侧栏会有一个显示文章、分类、标签的计数：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200331205046.png" alt="侧边栏"></p><p>但是如果我们创建了一个上文所示的“公告”，而只是用来做一些通知、信息展示等功能，可能就并不想把这些文章算进去。想要减掉这部分的文章数量，可以在 <code>themes/next/layout/_partials/header/menu-item.swig</code> 文件里找到<code>archives:site.posts.length</code>部分并修改,将数量减 1 即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="operator">%-</span> <span class="keyword">set</span> badges <span class="operator">=</span> &#123;</span><br><span class="line">  archives  : site.posts.length <span class="operator">-</span> <span class="number">1</span>,</span><br><span class="line">  categories: site.categories.length,</span><br><span class="line">  tags      : site.tags.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><p>然后找到<code>themes/next/layout/_partials/sidebar/site-overview.swig </code> 文件里找到<code>site.posts.length</code> 进行修改，将 length - 1 即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="operator">%-</span> <span class="keyword">if</span> theme.site_state <span class="operator">%</span>&#125;</span><br><span class="line"><span class="operator">&lt;</span>div <span class="keyword">class</span>=&quot;<span class="title class_">site</span>-<span class="title class_">state</span>-<span class="title class_">wrap</span> <span class="title class_">motion</span>-<span class="title class_">element</span>&quot;&gt;</span><br><span class="line">  &lt;<span class="title class_">nav</span> <span class="title class_">class</span>=&quot;<span class="title class_">site</span>-<span class="title class_">state</span>&quot;&gt;</span><br><span class="line">    &#123;<span class="operator">%-</span> <span class="keyword">if</span> config.archive_dir <span class="operator">!=</span> &#x27;<span class="operator">/</span>&#x27; and site.posts.length <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">%</span>&#125;</span><br><span class="line">      <span class="operator">&lt;</span>div <span class="keyword">class</span>=&quot;<span class="title class_">site</span>-<span class="title class_">state</span>-<span class="title class_">item</span> <span class="title class_">site</span>-<span class="title class_">state</span>-<span class="title class_">posts</span>&quot;&gt;</span><br><span class="line">        &#123;<span class="operator">%-</span> <span class="keyword">if</span> theme.menu.archives <span class="operator">%</span>&#125;</span><br><span class="line">          <span class="operator">&lt;</span>a href<span class="operator">=</span><span class="string">&quot;&#123;&#123; url_for(theme.menu.archives.split(&#x27;||&#x27;)[0] | trim) &#125;&#125;&quot;</span><span class="operator">&gt;</span></span><br><span class="line">        &#123;<span class="operator">%</span> <span class="keyword">else</span> <span class="operator">%</span>&#125;</span><br><span class="line">          <span class="operator">&lt;</span>a href<span class="operator">=</span><span class="string">&quot;&#123;&#123; url_for(config.archive_dir) &#125;&#125;&quot;</span><span class="operator">&gt;</span></span><br><span class="line">        &#123;<span class="operator">%-</span> endif <span class="operator">%</span>&#125;</span><br><span class="line">&#123;<span class="operator">%=============================</span>就是这里<span class="operator">↓===============================%</span>&#125;</span><br><span class="line">          <span class="operator">&lt;</span>span <span class="keyword">class</span>=&quot;<span class="title class_">site</span>-<span class="title class_">state</span>-<span class="title class_">item</span>-<span class="title class_">count</span>&quot;&gt;&#123;&#123; site.posts.length <span class="operator">-</span> <span class="number">1</span>&#125;&#125;<span class="operator">&lt;/</span>span<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%=============================</span>就是这里<span class="operator">↑===============================%</span>&#125;</span><br><span class="line">          <span class="operator">&lt;</span>span <span class="keyword">class</span>=&quot;<span class="title class_">site</span>-<span class="title class_">state</span>-<span class="title class_">item</span>-<span class="title class_">name</span>&quot;&gt;&#123;&#123; __(&#x27;state.posts&#x27;) &#125;&#125;<span class="operator">&lt;/</span>span<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;/</span>a<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br><span class="line">    &#123;<span class="operator">%-</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><p>其实就是直接把 <code>site.posts.length</code> 减掉了 1 而已，方法是笨方法，因为如果删掉了那篇文章，或者新增了一篇，还要再改一次源码，不过这是个备用方法，看看有没有办法能找到 <code>site.posts</code> 统计的地方然后直接不读取指定属性的文章。</p><h2 id="从‘归档’中去掉文章"><a href="#从‘归档’中去掉文章" class="headerlink" title="从‘归档’中去掉文章"></a>从‘归档’中去掉文章</h2><p>如果选择从侧栏的文章计数中去掉了某篇文章，可能也会希望“归档”里同样不记录，同样，归档里也有一个文章计数，还另有一个所有文章的列表，可以看到我的归档里并不包括置顶那个“信息栏”的文章，修改的方式也很类似，找到 <code>next/layout/archive.swig</code> 文件中 <code>ARCHIVE BLOCK</code> 部分并修改：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>div <span class="keyword">class</span>=&quot;<span class="title class_">post</span>-<span class="title class_">block</span>&quot;&gt;</span><br><span class="line">  &lt;<span class="title class_">div</span> <span class="title class_">class</span>=&quot;<span class="title class_">posts</span>-<span class="title class_">collapse</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="title class_">div</span> <span class="title class_">class</span>=&quot;<span class="title class_">collection</span>-<span class="title class_">title</span>&quot;&gt;</span><br><span class="line">&#123;<span class="operator">%================</span>下面这行site.posts.length<span class="operator">-</span><span class="number">1</span>即可<span class="operator">======================%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%-</span> <span class="keyword">set</span> posts_length <span class="operator">=</span> site.posts.length <span class="operator">-</span> <span class="number">1</span> <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%-</span> <span class="keyword">if</span> posts_length <span class="operator">&gt;</span> <span class="number">210</span> <span class="operator">%</span>&#125;</span><br><span class="line">        &#123;<span class="operator">%-</span> <span class="keyword">set</span> cheers <span class="operator">=</span> &#x27;excellent&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> elif posts_length <span class="operator">&gt;</span> <span class="number">130</span> <span class="operator">%</span>&#125;</span><br><span class="line">        &#123;<span class="operator">%-</span> <span class="keyword">set</span> cheers <span class="operator">=</span> &#x27;great&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> elif posts_length <span class="operator">&gt;</span> <span class="number">80</span> <span class="operator">%</span>&#125;</span><br><span class="line">        &#123;<span class="operator">%-</span> <span class="keyword">set</span> cheers <span class="operator">=</span> &#x27;good&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> elif posts_length <span class="operator">&gt;</span> <span class="number">50</span> <span class="operator">%</span>&#125;</span><br><span class="line">        &#123;<span class="operator">%-</span> <span class="keyword">set</span> cheers <span class="operator">=</span> &#x27;nice&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> elif posts_length <span class="operator">&gt;</span> <span class="number">30</span> <span class="operator">%</span>&#125;</span><br><span class="line">        &#123;<span class="operator">%-</span> <span class="keyword">set</span> cheers <span class="operator">=</span> &#x27;ok&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%</span> <span class="keyword">else</span> <span class="operator">%</span>&#125;</span><br><span class="line">        &#123;<span class="operator">%-</span> <span class="keyword">set</span> cheers <span class="operator">=</span> &#x27;um&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">      &#123;<span class="operator">%-</span> endif <span class="operator">%</span>&#125;</span><br><span class="line">       &#123;<span class="operator">%================</span>下面这行site.posts.length<span class="operator">-</span><span class="number">1</span>即可<span class="operator">======================%</span>&#125;</span><br><span class="line">      <span class="operator">&lt;</span>span <span class="keyword">class</span>=&quot;<span class="title class_">collection</span>-<span class="title class_">header</span>&quot;&gt;&#123;&#123; __(&#x27;cheers.&#x27; <span class="operator">+</span> cheers) &#125;&#125;<span class="operator">!</span> &#123;&#123; _p(&#x27;counter.archive_posts&#x27;, site.posts.length <span class="operator">-</span> <span class="number">1</span>) &#125;&#125; &#123;&#123; __(&#x27;keep_on&#x27;) &#125;&#125;<span class="operator">&lt;/</span>span<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123; post_template.render(page.posts) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>同样，直接把 <code>site.posts.length</code> 减掉了 1 来去掉计数。</p><p>同样在<code>themes/next/layout/_macro/post-collapse.swig</code>文件中，找到循环遍历所有文章的部分进行修改：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="operator">%</span> macro render(posts) <span class="operator">%</span>&#125;</span><br><span class="line">&#123;<span class="operator">%-</span> <span class="keyword">set</span> current_year <span class="operator">=</span> &#x27;<span class="number">1970</span>&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">&#123;<span class="operator">%-</span> <span class="keyword">for</span> post <span class="keyword">in</span> posts.toArray() <span class="operator">%</span>&#125;</span><br><span class="line">&#123;<span class="operator">%=============</span>添加这一行<span class="operator">↓↓↓↓↓↓↓===============%</span>&#125;</span><br><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> not post.topic <span class="operator">%</span>&#125;</span><br><span class="line">&#123;<span class="operator">%=============</span>添加这一行<span class="operator">↑↑↑↑↑↑===============%</span>&#125;</span><br><span class="line">  &#123;<span class="operator">%-</span> <span class="keyword">set</span> year <span class="operator">=</span> date(post.date, &#x27;<span class="type">YYYY</span>&#x27;) <span class="operator">%</span>&#125;</span><br><span class="line"></span><br><span class="line">  &#123;<span class="operator">%-</span> <span class="keyword">if</span> year <span class="operator">!==</span> current_year <span class="operator">%</span>&#125;</span><br><span class="line">    &#123;<span class="operator">%-</span> <span class="keyword">set</span> current_year <span class="operator">=</span> year <span class="operator">%</span>&#125;</span><br><span class="line">    <span class="operator">&lt;</span>div <span class="keyword">class</span>=&quot;<span class="title class_">collection</span>-<span class="title class_">year</span>&quot;&gt;</span><br><span class="line">      &lt;<span class="title class_">span</span> <span class="title class_">class</span>=&quot;<span class="title class_">collection</span>-<span class="title class_">header</span>&quot;&gt;&#123;&#123; current_year &#125;&#125;<span class="operator">&lt;/</span>span<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br><span class="line">  &#123;<span class="operator">%-</span> endif <span class="operator">%</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="operator">&lt;</span>article itemscope itemtype<span class="operator">=</span><span class="string">&quot;http://schema.org/Article&quot;</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>header <span class="keyword">class</span>=&quot;<span class="title class_">post</span>-<span class="title class_">header</span>&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;<span class="title class_">div</span> <span class="title class_">class</span>=&quot;<span class="title class_">post</span>-<span class="title class_">meta</span>&quot;&gt;</span><br><span class="line">        &lt;<span class="title class_">time</span> <span class="title class_">itemprop</span>=&quot;<span class="title class_">dateCreated</span>&quot;</span><br><span class="line">              <span class="title class_">datetime</span>=&quot;&#123;&#123; moment(post.date).format() &#125;&#125;<span class="string">&quot;</span></span><br><span class="line"><span class="string">              content=&quot;</span>&#123;&#123; date(post.date, config.date_format) &#125;&#125;<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/time&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;div class=&quot;</span>post<span class="operator">-</span>title<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">        &#123;%- if post.link %&#125;&#123;# Link posts #&#125;</span></span><br><span class="line"><span class="string">          &#123;%- set postTitleIcon = &#x27;&lt;i class=&quot;</span>fa fa<span class="operator">-</span>external<span class="operator">-</span>link<span class="string">&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span></span><br><span class="line"><span class="string">          &#123;%- set postText = post.title or post.link %&#125;</span></span><br><span class="line"><span class="string">          &#123;&#123; next_url(post.link, postText + postTitleIcon, &#123;class: &#x27;post-title-link post-title-link-external&#x27;, itemprop: &#x27;url&#x27;&#125;) &#125;&#125;</span></span><br><span class="line"><span class="string">        &#123;% else %&#125;</span></span><br><span class="line"><span class="string">          &lt;a class=&quot;</span>post<span class="operator">-</span>title<span class="operator">-</span>link<span class="string">&quot; href=&quot;</span>&#123;&#123; url_for(post.path) &#125;&#125;<span class="string">&quot; itemprop=&quot;</span>url<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;span itemprop=&quot;</span>name<span class="string">&quot;&gt;&#123;&#123; post.title or __(&#x27;post.untitled&#x27;) &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &#123;%- endif %&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/header&gt;</span></span><br><span class="line"><span class="string">  &lt;/article&gt;</span></span><br><span class="line"><span class="string">&#123;%=============添加这一行↓↓↓↓↓↓↓===============%&#125;</span></span><br><span class="line"><span class="string">&#123;% endif %&#125;</span></span><br><span class="line"><span class="string">&#123;%=============添加这一行↑↑↑↑↑↑===============%&#125;</span></span><br><span class="line"><span class="string">&#123;%- endfor %&#125;</span></span><br><span class="line"><span class="string">&#123;% endmacro %&#125;</span></span><br></pre></td></tr></table></figure><p>这样，只要我们在文章的头部信息栏内增加一个 <code>topic</code> 标签（可以自定义，只要代码里和文章里一致即可），就能从“归档”的列表中去掉这篇文章！同理，也可以增加任意约束，比如去掉日期早于某个时候的文章、去掉带有某个标签的文章等等，只要把约束全部加进 <code>if</code> 里去即可。不过这里的修改只影响到“归档”中的列表，博客首页的所有文章还是会显示的。</p><h2 id="一个-bug"><a href="#一个-bug" class="headerlink" title="一个 bug"></a>一个 bug</h2><p>因为我这是的归档页面，每 10 篇文章一页，当我的的日志为整数，比如 30 页的时候，本来只应该显示有 3 页文章，但是他会显示有 4 页，且第 4 页什么也没有。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200407182711.png" alt="bug"></p><p>目前，我还没有找解决办法【囧】</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.liushulun.cn/post/blogdiy/blogdiy-7-top/">Hexo 博客 DIY：文章置顶和引用式文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(三)：Next主题配置及美化</title>
      <link href="/archives/264a3045.html"/>
      <url>/archives/264a3045.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！</p></div><p>Hexo 框架允许我们更换自己喜欢的主题，用于构件不同风格的主题，因为我个人比较喜欢简洁风，所以我选择了 Next 主题。Next 主题也是特别常用的一款主题，如果你也和我一样喜欢简洁的风格，可以对我的配置进行参考。</p><p><strong>在正式开始配置之前，我们需要明确以下东西</strong> : <code>站点配置文件</code> `主题配置文件</p><ul><li><p>在 Hexo 中有<strong>两份</strong>主要的配置文件，其名称都是 <code>_config.yml</code>。</p></li><li><p><code>站点配置文件</code>，位于<strong>站点根目录</strong>下，用于网站的基础配置</p></li><li><p><code>主题配置文件 </code>，位于<strong>thems</strong>目录下，用于主题相关的配置</p></li><li><p>不同的主题会有不同的配置文件，<code>主题配置文件 </code> 通常由主题作者提供</p></li></ul><div class="note danger flat"><p><strong>注意：目前我已经更新至最新版本，目前采用了全新的配置方式，这里的主题配置文件，均指 hexo/source/_data 目录下的 next.yml 文件，你可以点击这里查看：<a href="/archives/5b20fbd0.html">关于博客主题持续更新的问题和我的新配置方式</a></strong></p></div><h2 id="安装-Next-主题"><a href="#安装-Next-主题" class="headerlink" title="安装 Next 主题"></a>安装 Next 主题</h2><h3 id="下载-Next"><a href="#下载-Next" class="headerlink" title="下载 Next"></a>下载 Next</h3><ul><li><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p><p><strong>注</strong>：我们这里使用社区维护的最新版本。</p></li><li><p>我们使用 Git，克隆最新版本的方式进行安装，之后的更新我们也可以用 <code>git pull</code> 来进行快速更新，而不用再次下载压缩包替换</p></li><li><p>在终端窗口下，定位到 Hexo 站点根目录，在终端中输入：</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/hexo<span class="literal">-theme-next</span> themes/next</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><ul><li>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <code> 站点配置文件</code>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先使用<code>hexo clean</code>清除缓存，然后使用<code>hexo g</code> 生成文件，然后使用<code>hexo s</code>来运行本地服务。当命令行输出中提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321144826.png" alt="image-20200321144825051"></p><p>现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p><h2 id="Hexo-基础配置"><a href="#Hexo-基础配置" class="headerlink" title="Hexo 基础配置"></a>Hexo 基础配置</h2><p>现在我们就正式开始配置，以下内容均为 <code>站点配置文件</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="comment">#网站的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span> <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#网站关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#网站作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#语言 zh-CN简体中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span> <span class="comment">#时区，默认就好</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="comment">#网站地址 比如：https://yourname.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment">#网站根目录</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网站的url格式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:category/:title/</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自动提交到仓库，可以设置多个仓库</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line">    <span class="attr">Gitee:</span> <span class="string">https://gitee.com/yourname/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置主题为next</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h2 id="Next-主题设置"><a href="#Next-主题设置" class="headerlink" title="Next 主题设置"></a>Next 主题设置</h2><p><strong>以下配置主要基于更高版本的 Next7，下面配置项如无特别指明，均为<code>主题配置文件</code>中的配置项</strong>，</p><h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持四种 Scheme，他们是：</p><ul><li>scheme: Muse</li><li>scheme: Mist</li><li>scheme: Pisces</li><li>scheme: Gemini</li></ul><p>Scheme 的切换通过更改 <code>主题配置文件</code>，搜索 scheme 关键字。 你会看到有四行 scheme 的配置，将你需用启用的 scheme 前面注释 <code>#</code> 去除即可。我个人选择 Gemini。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure><h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>编辑 <code>站点配置文件</code>， 将 <code>language</code> 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>目前 NexT 支持的语言如以下表格所示:</p><table><thead><tr><th align="left">语言</th><th align="left">代码</th><th align="left">设定示例</th></tr></thead><tbody><tr><td align="left">English</td><td align="left"><code>en</code></td><td align="left"><code>language: en</code></td></tr><tr><td align="left">简体中文</td><td align="left"><code>zh-Hans</code></td><td align="left"><code>language: zh-CN</code></td></tr><tr><td align="left">Français</td><td align="left"><code>fr-FR</code></td><td align="left"><code>language: fr-FR</code></td></tr><tr><td align="left">Português</td><td align="left"><code>pt</code></td><td align="left"><code>language: pt</code> or <code>language: pt-BR</code></td></tr><tr><td align="left">繁體中文</td><td align="left"><code>zh-hk</code> 或者 <code>zh-tw</code></td><td align="left"><code>language: zh-hk</code></td></tr><tr><td align="left">Русский язык</td><td align="left"><code>ru</code></td><td align="left"><code>language: ru</code></td></tr><tr><td align="left">Deutsch</td><td align="left"><code>de</code></td><td align="left"><code>language: de</code></td></tr><tr><td align="left">日本語</td><td align="left"><code>ja</code></td><td align="left"><code>language: ja</code></td></tr><tr><td align="left">Indonesian</td><td align="left"><code>id</code></td><td align="left"><code>language: id</code></td></tr><tr><td align="left">Korean</td><td align="left"><code>ko</code></td><td align="left"><code>language: ko</code></td></tr></tbody></table><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="http://fontawesome.io/">Font Awesome</a> 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。</p><p>编辑 <code>主题配置文件</code>，修改以下内容：</p><ul><li>设定菜单内容，对应的字段是 <code>menu</code>。 菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name </code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</li></ul><h4 id="设置菜单项的显示中文文本"><a href="#设置菜单项的显示中文文本" class="headerlink" title="设置菜单项的显示中文文本"></a>设置菜单项的显示中文文本</h4><p><del>打开 <code>themes/next/languages/zh-Hans.yml</code> 文件,搜索 <code>menu</code> 关键字，修改对应中文或者新增。</del><br>最新版本此方法已经修改：你可以点击 <a href="/archives/5b20fbd0.html">这里</a> 查看其中的第 3.2 节。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br><span class="line">  <span class="comment"># 新增menu</span></span><br><span class="line">  <span class="attr">catalogue:</span> <span class="string">目录</span></span><br></pre></td></tr></table></figure><h4 id="设定菜单项的文件目录和对应图标"><a href="#设定菜单项的文件目录和对应图标" class="headerlink" title="设定菜单项的文件目录和对应图标"></a>设定菜单项的文件目录和对应图标</h4><p>打开 <code>themes/next/_config.yml</code> 文件，搜索 <code>menu</code> 关键字，修改对应图标名称或者新增对应 <code>menu</code> 的图标。各个菜单项通过 # 注释开启或关闭。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>除了 <code>home</code>， <code>archives</code> , 后面都需要手动创建这个页面</p><h4 id="创建菜单项对应文件目录"><a href="#创建菜单项对应文件目录" class="headerlink" title="创建菜单项对应文件目录"></a>创建菜单项对应文件目录</h4><p>设定好上面后，我们<code>hexo s</code>启动本地服务器预览，就可以看到网页上出现了对应的文件目录。更改目录的位置即可调整顺序。比如我习惯的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>网页显示：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320153920.png" alt="image-20200320102717504"></p><p>但是，此时我们还没有创建对应的页面，比如点击分类，会报错：<code>Cannot GET /categories/</code></p><p>下面我们就创建上面对应的页面：</p><p>在终端窗口下，定位到 <code>Hexo</code> <strong>站点目录</strong>下。使用 <code>hexo new page</code> 新建页面:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分类</span></span><br><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="comment">#标签</span></span><br><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="comment">#关于</span></span><br><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure><p>这时候，<strong>站点根目录</strong><code>source</code>文件夹下面新增一个<code>categories</code>文件夹，打开里面的<code>index.md</code>文件。在<strong>文档头部</strong>添加以下描述,其他页面类似。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">&lt;!-- 页面的名字，可以更改为你自己喜欢的名字 --&gt;</span><br><span class="line">title: categories </span><br><span class="line">date: 2020-03-20 10:32:05</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">&lt;!-- 评论功能默认关闭 --&gt;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>打开<code>主题配置文件</code>，搜索关键字<code>Sidebar Avatar</code> 进行定位，将 <code>avatar</code> 的值设置成头像图片的链接地址即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># 修改头像边框为圆形</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 鼠标放置头像时，头像旋转特效</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>头像图片的完整连接地址可以是：</p><ul><li>完整的互联网地址：例如，<a href="https://www.example.com/avatar.jpg">https://www.example.com/avatar.jpg</a></li><li>站点内的相对地址：例如，假设图片命名为 avatar.jpg，存放在 source/images/ 目录下，则链接地址可以写成 /images/avatar.jpg</li></ul><h3 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h3><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 <code>主题配置文件</code> 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p><h4 id="设置侧边栏的位置"><a href="#设置侧边栏的位置" class="headerlink" title="设置侧边栏的位置"></a>设置侧边栏的位置</h4><p>修改 <code>sidebar.position</code> 的值，支持的选项有：</p><ul><li>left - 靠左放置</li><li>right - 靠右放置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br></pre></td></tr></table></figure><h4 id="设置侧边栏显示的时机"><a href="#设置侧边栏显示的时机" class="headerlink" title="设置侧边栏显示的时机"></a>设置侧边栏显示的时机</h4><p>修改 <code>sidebar.display</code> 的值，支持的选项有：</p><ul><li><p><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</p></li><li><p><code>always</code> - 在所有页面中都显示</p></li><li><p><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</p></li><li><p><code>remove</code> - 完全移除</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h4 id="设置侧边栏社交链接"><a href="#设置侧边栏社交链接" class="headerlink" title="设置侧边栏社交链接"></a>设置侧边栏社交链接</h4><p>打开 <code>主题配置文件</code>，搜索关键字<code>social</code>，然后添加社交站点名称与地址即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target permalink.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">http://mail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  <span class="comment"># 等等</span></span><br></pre></td></tr></table></figure><p>如果要自定义图标或者新增链接，搜索关键字<code>social_icons</code> ，添加社交站点名称（注意大小写）图标，<a href="http://fontawesome.dashgame.com/">Font Awesome</a>图标地。</p><h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><p>打开 <code>主题配置文件</code> ，搜索关键字<code>blog rolls</code> :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line"><span class="comment">#图标样式</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">link</span></span><br><span class="line">  <span class="comment">#链接名称</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Links</span></span><br><span class="line">  <span class="comment"># Available values: block | inline 布局</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="comment">#Title: http://yoursite.com</span></span><br></pre></td></tr></table></figure><h3 id="提醒版本更新"><a href="#提醒版本更新" class="headerlink" title="提醒版本更新"></a>提醒版本更新</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Console reminder if new version released.</span></span><br><span class="line"><span class="attr">reminder:</span> <span class="literal">true</span> <span class="comment"># 提醒版本更新</span></span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Allow to cache content generation.</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 缓存</span></span><br></pre></td></tr></table></figure><h3 id="自动清除无用文件"><a href="#自动清除无用文件" class="headerlink" title="自动清除无用文件"></a>自动清除无用文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Remove unnecessary files after hexo generate.</span><br><span class="line">minify: true    # 压缩</span><br></pre></td></tr></table></figure><h3 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="comment">#文章阅读数。站点访问数和点击数。</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure><h3 id="valine-评论"><a href="#valine-评论" class="headerlink" title="valine 评论"></a>valine 评论</h3><h4 id="获取-APP-id-和-APP-key"><a href="#获取-APP-id-和-APP-key" class="headerlink" title="获取 APP id 和 APP key"></a>获取 APP id 和 APP key</h4><ul><li>你可以点击 <a href="https://leancloud.cn/">LeanCloud</a> ，注册登录，进入控制台后点击创建应用。</li><li>进入刚刚创建的应用，选择<code>设置</code> 》<code>应用Keys</code>，就能看到你的 APP ID 和 APP Key</li></ul><h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改<code>主题配置文件</code></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="comment"># 配置项详情请查阅官方文档。</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启评论功能</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># 填入刚刚获取的APP ID</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># 填入刚刚获取的APP key</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># 邮件通知默认关闭</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># 验证码默认关闭</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">在这里写下你的评论吧！</span> <span class="comment"># 评论框默认文字</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># 头像风格</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span> <span class="comment">#,link # Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">false</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># 是否记录IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure><p>配置参考：<a href="https://valine.js.org/configuration.html">https://valine.js.org/configuration.html</a></p><h3 id="定制"><a href="#定制" class="headerlink" title="定制"></a>定制</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="comment"># 路径为根目录下的source，新建一个_data文件夹，不是主题下的source，去掉#即生效</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="attr">postBodyEnd:</span> <span class="string">source/_data/post-body-end.swig</span> <span class="comment"># 本文结束放这里</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span> <span class="comment"># js 代码放这里</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span> <span class="comment"># css 代码放这里</span></span><br></pre></td></tr></table></figure><h4 id="修改-valine-及不蒜子样式"><a href="#修改-valine-及不蒜子样式" class="headerlink" title="修改 valine 及不蒜子样式"></a>修改 valine 及不蒜子样式</h4><p><code>source/_data/styles.styl</code> 文件内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏 valine 的 powered by</span></span><br><span class="line"><span class="selector-class">.power</span><span class="selector-class">.txt-right</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改不蒜子数据颜色</span></span><br><span class="line"><span class="selector-id">#busuanzi_value_site_pv</span>,#busuanzi_value_site_uv&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00BFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// valine 评论框对齐文章</span></span><br><span class="line">div<span class="selector-id">#comments</span><span class="selector-class">.comments</span>.v&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="个性网页标题"><a href="#个性网页标题" class="headerlink" title="个性网页标题"></a>个性网页标题</h4><p>新建<code>source/_data/footer.swig</code> 文件，添加内容：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 搞怪网页标题 #&#125;</span><br><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> theme.title_trick.enable <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>script<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">var</span> <span class="type">OriginTitle</span> <span class="operator">=</span> document.title;</span><br><span class="line">    <span class="keyword">var</span> titleTime;</span><br><span class="line">    document.addEventListener(&#x27;visibilitychange&#x27;, function() &#123;</span><br><span class="line">      <span class="keyword">if</span> (document.hidden) &#123;</span><br><span class="line">        document.title <span class="operator">=</span> &#x27;&#123;&#123; theme.title_trick.leave &#125;&#125;&#x27; <span class="operator">+</span> <span class="type">OriginTitle</span>;</span><br><span class="line">        clearTimeout(titleTime);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        document.title <span class="operator">=</span> &#x27;&#123;&#123; theme.title_trick.enter &#125;&#125;&#x27; <span class="operator">+</span> <span class="type">OriginTitle</span>;</span><br><span class="line">        titleTime <span class="operator">=</span> setTimeout(function() &#123;</span><br><span class="line">          document.title <span class="operator">=</span> <span class="type">OriginTitle</span>;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><p>在<code>主题配置文件</code>添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搞怪网站标题</span></span><br><span class="line"><span class="attr">title_trick:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">leave:</span> <span class="string">&#x27;(*^▽^*)我藏好了哦~&#x27;</span></span><br><span class="line">  <span class="attr">enter:</span> <span class="string">&#x27;q(≧▽≦q)被你发现啦~&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="文章末尾统一添加本文结束分割线"><a href="#文章末尾统一添加本文结束分割线" class="headerlink" title="文章末尾统一添加本文结束分割线"></a>文章末尾统一添加本文结束分割线</h4><p>新建 <code>source/_data/post-body-end.swig</code> 文件，添加内容：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 本文结束 #&#125;</span><br><span class="line"><span class="operator">&lt;</span>div<span class="operator">&gt;</span></span><br><span class="line">    &#123;<span class="operator">%</span> <span class="keyword">if</span> not is_index <span class="operator">%</span>&#125;</span><br><span class="line">        <span class="operator">&lt;</span>div style<span class="operator">=</span><span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span><span class="operator">&gt;-------------</span>　　　　本文结束　<span class="operator">&lt;</span>i <span class="keyword">class</span>=&quot;<span class="title class_">fa</span> <span class="title class_">fa</span>-<span class="title class_">flag</span>&quot;&gt;&lt;/<span class="title class_">i</span>&gt;　感谢阅读　　　　-------------&lt;/<span class="title class_">div</span>&gt;</span><br><span class="line">    &#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br><span class="line"><span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改底部用户图标为跳动的心"><a href="#修改底部用户图标为跳动的心" class="headerlink" title="修改底部用户图标为跳动的心"></a>修改底部用户图标为跳动的心</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Icon between year and copyright info.</span></span><br><span class="line"><span class="attr">icon:</span></span><br><span class="line">  <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/</span></span><br><span class="line">  <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heart</span></span><br><span class="line">  <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">  <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;#ff5999&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="打开文章末尾的版权信息"><a href="#打开文章末尾的版权信息" class="headerlink" title="打开文章末尾的版权信息"></a>打开文章末尾的版权信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure><h3 id="菜单栏显示分类-标签中的文章数目"><a href="#菜单栏显示分类-标签中的文章数目" class="headerlink" title="菜单栏显示分类/标签中的文章数目"></a>菜单栏显示分类/标签中的文章数目</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span> <span class="comment"># 显示菜单分类的数目</span></span><br></pre></td></tr></table></figure><h3 id="文章目录的设置"><a href="#文章目录的设置" class="headerlink" title="文章目录的设置"></a>文章目录的设置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">true</span> <span class="comment"># 目录全展开</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">3</span> <span class="comment"># 目录展开的标题级数</span></span><br></pre></td></tr></table></figure><h3 id="字数统计与阅读时长"><a href="#字数统计与阅读时长" class="headerlink" title="字数统计与阅读时长"></a>字数统计与阅读时长</h3><ul><li>在终端中输入命令安装插件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-symbols-count-time</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>站点配置文件</code> 添加：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="comment">#文章内是否显示</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 网页底部是否显示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&#x27;mins.&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>修改 <code>主题配置文件</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="修改文章底部标签的样式"><a href="#修改文章底部标签的样式" class="headerlink" title="修改文章底部标签的样式"></a>修改文章底部标签的样式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line"><span class="comment"># 标签代替#</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Baidu transformation on mobile devices.</span></span><br><span class="line"><span class="attr">disable_baidu_transformation:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a canonical link tag in your hexo, you could use it for your SEO of blog.</span></span><br><span class="line"><span class="comment"># See: https://support.google.com/webmasters/answer/139066</span></span><br><span class="line"><span class="comment"># Remember to set up your URL in Hexo `_config.yml` (e.g. url: http://yourdomain.com)</span></span><br><span class="line"><span class="attr">canonical:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change headers hierarchy on site-subtitle (will be main site description) and on all post / page titles for better SEO-optimization.</span></span><br><span class="line"><span class="attr">seo:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, will add site-subtitle to index page.</span></span><br><span class="line"><span class="comment"># Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line"><span class="attr">index_with_subtitle:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line"><span class="attr">exturl:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line"><span class="attr">google_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster</span></span><br><span class="line"><span class="attr">bing_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line"><span class="attr">yandex_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO.</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Easily enable fast Ajax navigation on your website.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pjax</span></span><br><span class="line"><span class="comment"># For moreinformation: https://github.com/MoOx/pjax</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox</span></span><br><span class="line"><span class="comment"># 点击图片放大</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A JavaScript library for zooming images like Medium.</span></span><br><span class="line"><span class="comment"># Do not enable both `fancybox` and `mediumzoom`.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line"><span class="attr">mediumzoom:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/ApoorvSaxena/lozad.js</span></span><br><span class="line"><span class="comment"># 高性能、轻巧和可配置的延迟加载器</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pangu Support</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/vinta/pangu.js</span></span><br><span class="line"><span class="comment"># 神器啊，盘古之白：自动在中文字和半形的英文、数字、符号之间插入空白。</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Quicklink Support</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/GoogleChromeLabs/quicklink</span></span><br><span class="line"><span class="comment"># 通过在空闲时间预取in-viewport链接来加快后续页面加载速度。</span></span><br><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Quicklink (quicklink.umd.js script) is loaded on demand.</span></span><br><span class="line">  <span class="comment"># Add `quicklink: true` in Front-matter of the page or post you need.</span></span><br><span class="line">  <span class="comment"># Home page and archive page can be controlled through home and archive options below.</span></span><br><span class="line">  <span class="attr">home:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will initialize quicklink after the load event fires.</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Custom a time in milliseconds by which the browser must execute prefetching.</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># Default (true) will enable fetch() or falls back to XHR.</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># For more flexibility you can add some patterns (RegExp, Function, or Array) to ignores.</span></span><br><span class="line">  <span class="comment"># See: https://github.com/GoogleChromeLabs/quicklink#custom-ignore-patterns</span></span><br><span class="line">  <span class="attr">ignores:</span></span><br></pre></td></tr></table></figure><h3 id="动态线条背景"><a href="#动态线条背景" class="headerlink" title="动态线条背景"></a>动态线条背景</h3><ul><li>Next7 内置了 2 个动态背景，但我都觉得不太好看，安装对应插件打开即可。</li><li>three:</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/theme<span class="literal">-next-three</span> source/lib/three</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="attr">three:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>canvas_ribbon</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/theme<span class="literal">-next-canvas-ribbon</span> source/lib/canvas<span class="literal">-ribbon</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/zproo/canvas-ribbon</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure><ul><li>我使用的 canvas_nest</li></ul><p>在<code>source\_data\footer.swig</code>文件中添加以下代码即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script color=&quot;0,0,255&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果你没有配置 <strong>第 11 条</strong> ，那一定要记得打开<code>主题配置文件</code> 中的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br></pre></td></tr></table></figure><h3 id="点击头像跳转到关于页面"><a href="#点击头像跳转到关于页面" class="headerlink" title="点击头像跳转到关于页面"></a>点击头像跳转到关于页面</h3><p>打开 <code>themes\next\layout\_partials\sidebar\site-overview.swig</code> 文件，添加以下的 a 标签。当然这个 about 你也可以改成你想要页面。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>div <span class="keyword">class</span>=&quot;<span class="title class_">site</span>-<span class="title class_">author</span> <span class="title class_">motion</span>-<span class="title class_">element</span>&quot; <span class="title class_">itemprop</span>=&quot;<span class="title class_">author</span>&quot; <span class="title class_">itemscope</span> <span class="title class_">itemtype</span>=&quot;<span class="title class_">http</span>://<span class="title class_">schema</span>.<span class="title class_">org</span>/<span class="title class_">Person</span>&quot;&gt;</span><br><span class="line">  &#123;# 点击头像跳转 #&#125;</span><br><span class="line">  <span class="operator">&lt;</span>a href<span class="operator">=</span><span class="string">&quot;/about&quot;</span><span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span>img <span class="keyword">class</span>=&quot;<span class="title class_">site</span>-<span class="title class_">author</span>-<span class="title class_">image</span>&quot; <span class="title class_">itemprop</span>=&quot;<span class="title class_">image</span>&quot; <span class="title class_">alt</span>=&quot;&#123;&#123; author &#125;&#125;<span class="string">&quot;</span></span><br><span class="line"><span class="string">    src=&quot;</span>&#123;&#123; url_for(theme.avatar.url or theme.images <span class="operator">+</span> &#x27;<span class="operator">/</span>avatar.gif&#x27;) &#125;&#125;<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/a&gt;</span></span><br><span class="line"><span class="string">  &lt;p class=&quot;</span>site<span class="operator">-</span>author<span class="operator">-</span>name<span class="string">&quot; itemprop=&quot;</span>name<span class="string">&quot;&gt;&#123;&#123; author &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;</span>site<span class="operator">-</span>description<span class="string">&quot; itemprop=&quot;</span>description<span class="string">&quot;&gt;&#123;&#123; description &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="点击出现桃心效果"><a href="#点击出现桃心效果" class="headerlink" title="点击出现桃心效果"></a>点击出现桃心效果</h3><p>实现效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321222340.png" alt="image-20200320121756514"></p><p>实现方法：</p><ul><li><p>创建 JS 文件</p><p>在在<code>/themes/next/source/js/src</code>下新建文件<code>clicklove.js</code>，接着把代码拷贝粘贴到<code>clicklove.js</code>文件中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="keyword">function</span> (<span class="params">e, t, a</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">c</span>(</span><br><span class="line">      <span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class="line">    ),</span><br><span class="line">      <span class="title function_">o</span>(),</span><br><span class="line">      <span class="title function_">r</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.<span class="property">length</span>; e++)</span><br><span class="line">      d[e].<span class="property">alpha</span> &lt;= <span class="number">0</span></span><br><span class="line">        ? (t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>), d.<span class="title function_">splice</span>(e, <span class="number">1</span>))</span><br><span class="line">        : (d[e].<span class="property">y</span>--,</span><br><span class="line">          (d[e].<span class="property">scale</span> += <span class="number">0.004</span>),</span><br><span class="line">          (d[e].<span class="property">alpha</span> -= <span class="number">0.013</span>),</span><br><span class="line">          (d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> =</span><br><span class="line">            <span class="string">&#x27;left:&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">x</span> +</span><br><span class="line">            <span class="string">&#x27;px;top:&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">y</span> +</span><br><span class="line">            <span class="string">&#x27;px;opacity:&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">alpha</span> +</span><br><span class="line">            <span class="string">&#x27;;transform:scale(&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">scale</span> +</span><br><span class="line">            <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">scale</span> +</span><br><span class="line">            <span class="string">&#x27;) rotate(45deg);background:&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">color</span> +</span><br><span class="line">            <span class="string">&#x27;;z-index:99999&#x27;</span>))</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(r)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&#x27;function&#x27;</span> == <span class="keyword">typeof</span> e.<span class="property">onclick</span> &amp;&amp; e.<span class="property">onclick</span></span><br><span class="line">    e.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      t &amp;&amp; <span class="title function_">t</span>(), <span class="title function_">i</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    ;(a.<span class="property">className</span> = <span class="string">&#x27;heart&#x27;</span>),</span><br><span class="line">      d.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: a,</span><br><span class="line">        <span class="attr">x</span>: e.<span class="property">clientX</span> - <span class="number">5</span>,</span><br><span class="line">        <span class="attr">y</span>: e.<span class="property">clientY</span> - <span class="number">5</span>,</span><br><span class="line">        <span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="title function_">s</span>(),</span><br><span class="line">      &#125;),</span><br><span class="line">      t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>)</span><br><span class="line">    a.<span class="property">type</span> = <span class="string">&#x27;text/css&#x27;</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">      a.<span class="property">styleSheet</span>.<span class="property">cssText</span> = e</span><br><span class="line">    &#125;</span><br><span class="line">    t.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">&#x27;rgb(&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) +</span><br><span class="line">      <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) +</span><br><span class="line">      <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) +</span><br><span class="line">      <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> d = []</span><br><span class="line">  ;(e.<span class="property">requestAnimationFrame</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      e.<span class="property">requestAnimationFrame</span> ||</span><br><span class="line">      e.<span class="property">webkitRequestAnimationFrame</span> ||</span><br><span class="line">      e.<span class="property">mozRequestAnimationFrame</span> ||</span><br><span class="line">      e.<span class="property">oRequestAnimationFrame</span> ||</span><br><span class="line">      e.<span class="property">msRequestAnimationFrame</span> ||</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;)()),</span><br><span class="line">    <span class="title function_">n</span>()</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改<code>themes/next/layout/_layout.swig</code>文件，在末尾添加</p></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;!--</span> 页面点击小红心 <span class="operator">--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>script type<span class="operator">=</span><span class="string">&quot;text/javascript&quot;</span> src<span class="operator">=</span><span class="string">&quot;/js/src/clicklove.js&quot;</span><span class="operator">&gt;&lt;/</span>script<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面底部主题信息删除"><a href="#页面底部主题信息删除" class="headerlink" title="页面底部主题信息删除"></a>页面底部主题信息删除</h3><ul><li>打开<code>主题配置文件</code> ，修改<code>footer</code>下面的这些设置为<code>false</code>即可。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line"><span class="attr">copyright:</span></span><br><span class="line"><span class="attr">powered:</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">  <span class="attr">version:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">theme:</span></span><br><span class="line">  <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">  <span class="attr">version:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="修改网站的图标-Favicon"><a href="#修改网站的图标-Favicon" class="headerlink" title="修改网站的图标 Favicon"></a>修改网站的图标 Favicon</h3><p>实现效果</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320152532.png" alt="image-20200320152531334"></p><p>实现方法：</p><ul><li>在<a href="https://link.zhihu.com/?target=http://www.easyicon.net/">EasyIcon</a>中找一张（32*32）的 ico 图标,或者去别的网站下载或者制作，并将图标名称改为 favicon.ico，然后把图标放在/themes/next/source/images 里，并且修改 <code>主题配置文件</code>：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><h3 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h3><p>实现效果：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320171112.png" alt="image-20200320171110759"></p><p>实现方法：</p><ul><li>修改<code>主题配置文件</code>，把 <code>false</code> 改为 <code>true</code>：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="添加在线联系功能"><a href="#添加在线联系功能" class="headerlink" title="添加在线联系功能"></a>添加在线联系功能</h3><p>实现方法：</p><ul><li>一个在线的联系功能:<a href="http://www.daovoice.io/">DaoVoice</a></li><li>点击 <a href="http://www.daovoice.io/">注册</a> ,获取 app_id</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200320172237.png" alt="image-20200320172235334"></p><ul><li>修改<code>next\layout_partials\head\head.swig </code>文件, 添加以下内容</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> theme.daovoice <span class="operator">%</span>&#125;</span><br><span class="line">  <span class="operator">&lt;</span>script<span class="operator">&gt;</span></span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[<span class="string">&quot;DaoVoiceObject&quot;</span>]<span class="operator">=</span>r;i[r]<span class="operator">=</span>i[r]<span class="operator">||</span>function()&#123;(i[r].q<span class="operator">=</span>i[r].q<span class="operator">||</span>[]).push(arguments)&#125;,i[r].l<span class="operator">=</span><span class="number">1</span><span class="operator">*</span>new <span class="type">Date</span>();a<span class="operator">=</span>s.createElement(o),m<span class="operator">=</span>s.getElementsByTagName(o)[<span class="number">0</span>];a.async<span class="operator">=</span><span class="number">1</span>;a.src<span class="operator">=</span>g;a.charset<span class="operator">=</span><span class="string">&quot;utf-8&quot;</span>;m.parentNode.insertBefore(a,m)&#125;)(window,document,<span class="string">&quot;script&quot;</span>,(&#x27;https:&#x27; <span class="operator">==</span> document.location.protocol <span class="operator">?</span> &#x27;https:&#x27; : &#x27;http:&#x27;) <span class="operator">+</span> <span class="string">&quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;</span>,<span class="string">&quot;daovoice&quot;</span>)</span><br><span class="line">  daovoice(&#x27;<span class="keyword">init</span>&#x27;, &#123;</span><br><span class="line">      app_id: <span class="string">&quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&#x27;update&#x27;);</span><br><span class="line">  <span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">&#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>修改<code>主题配置文件</code>，添加：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># daovoice 配置</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="comment"># 填入刚才的app_id</span></span><br></pre></td></tr></table></figure><ul><li><p>部署到网站：</p><p><code>hexo clean</code> &amp;&amp; <code>hexo g</code> &amp;&amp; <code>hexo d </code>就能看到效果了，网页右下角多了个 图标。具体修改图表的样式，位置。可以在 daovoice 网页中 应用设置-聊天设置 中配置。</p></li></ul><h3 id="添加文章书写样式"><a href="#添加文章书写样式" class="headerlink" title="添加文章书写样式"></a>添加文章书写样式</h3><h4 id="文字增加背景色块"><a href="#文字增加背景色块" class="headerlink" title="文字增加背景色块"></a><del>文字增加背景色块</del></h4><p><del>在<code>source\_data\styles.styl</code>文件中添加属性样式（参考<strong>第 11 条</strong>）：</del><br>2020.3.25 提醒：其实可以直接使用 next 主题支持的 label 方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label danger @ XXXX %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 颜色块-黄</span></span><br><span class="line">span<span class="selector-id">#inline-yellow</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块-绿</span></span><br><span class="line">span<span class="selector-id">#inline-green</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块-蓝</span></span><br><span class="line">span<span class="selector-id">#inline-blue</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块-紫</span></span><br><span class="line">span<span class="selector-id">#inline-purple</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块-橙</span></span><br><span class="line">span<span class="selector-id">#inline-geraldine</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f78a7a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块-红</span></span><br><span class="line">span<span class="selector-id">#inline-roman</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#de5c6b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在你需要编辑的地方，使用如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`站点配置文件`</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-purple&quot;</span>&gt;</span> `主题配置文件` <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-yellow&quot;</span>&gt;</span> 站点配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-green&quot;</span>&gt;</span> `主题配置文件` <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-geraldine&quot;</span>&gt;</span> `主题配置文件` <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-roman&quot;</span>&gt;</span> `主题配置文件` <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="下载样式"><a href="#下载样式" class="headerlink" title="下载样式"></a>下载样式</h4><p>在<code>source\_data\styles.styl</code>文件中添加属性样式（参考<strong>第 11 条</strong>）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a<span class="selector-id">#download</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background</span>: transparent;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line"><span class="attribute">transition</span>: all .<span class="number">5s</span> ease;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在你需要编辑的文章地方。放置如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;download&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://git-scm.com/download/win&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-download&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> Download Now<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在文章中增加小图标"><a href="#在文章中增加小图标" class="headerlink" title="在文章中增加小图标"></a>在文章中增加小图标</h4><p>next 支持<a href="http://fontawesome.dashgame.com/">Font Awesome</a> 提供图标，你可以选择你喜欢的图标，这样使用即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-pencil&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>支持Markdown</span><br></pre></td></tr></table></figure><h3 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h3><ul><li>搜索功能需要依赖 <code>hexo-generator-searchdb</code> 插件，我们先安装插件：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-searchdb</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ul><li>打开<code>主题配置文件</code> ，搜索<code>local_search</code>，修改 <code>enable</code> 为 <code>true</code>。</li><li>修改<code>站点配置文件</code>，添加代码：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="右上角增加-fork-me-on-GitHub-图标"><a href="#右上角增加-fork-me-on-GitHub-图标" class="headerlink" title="右上角增加 fork me on GitHub 图标"></a>右上角增加 fork me on GitHub 图标</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/yourname</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure><h3 id="打开代码块的复制功能"><a href="#打开代码块的复制功能" class="headerlink" title="打开代码块的复制功能"></a>打开代码块的复制功能</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure><h3 id="页面加载进度效果"><a href="#页面加载进度效果" class="headerlink" title="页面加载进度效果"></a>页面加载进度效果</h3><ul><li>安装插件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/theme<span class="literal">-next-pace</span> source/lib/pace</span><br></pre></td></tr></table></figure><ul><li>编辑<code>主题配置文件</code>：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:可选样式列表</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure><h3 id="阅读进度条"><a href="#阅读进度条" class="headerlink" title="阅读进度条"></a>阅读进度条</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;#37c6c0&#x27;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure><h3 id="文章创建时间和更新时间"><a href="#文章创建时间和更新时间" class="headerlink" title="文章创建时间和更新时间"></a>文章创建时间和更新时间</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>很多内容参考了很多优秀博文，并根据自己实际情况进行了自己的博客进行了修改，感谢前辈们的珍贵经验，参考文章：</p><p><a href="http://theme-next.iissnan.com/getting-started.html">Next 使用文档</a></p><p><a href="https://zhuanlan.zhihu.com/p/28128674">hexo 的 next 主题个性化教程:打造炫酷网站</a></p><p><a href="https://www.jianshu.com/p/e17711e44e00">Hexo 使用攻略-添加分类及标签</a></p><p><a href="https://www.jianshu.com/p/efbeddc5eb19">Hexo+Next 个人博客主题优化</a></p><p><a href="http://qiujiaqi.cn/hexo/theme-optimization/">Hexo 博客 NexT 主题定制与优化</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Next主题 </tag>
            
            <tag> Hexo美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架(二)：配置文件详解与常用命令</title>
      <link href="/archives/a2423b27.html"/>
      <url>/archives/a2423b27.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本篇设置基于 NEXT 主题 7.7.2 版本！！</p></div><p>之前我们快速搭建了 Hexo 博客，并成功上传到了 GitHub 仓库，现在我们开始配置博客，对博客进行自定义。本篇主要是配置文件的详解，以及熟悉常用的一些 hexo 命令，可以帮我们更有效率的开发和管理博客。</p><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><p>这里所说的配置文件，是位于站点根目录下的 <code>_config.yml</code> 文件，可以直接用记事本打开进行编辑,当然我们还是选择使用 VScode 进行编辑。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321222422.png" alt="配置文件"></p><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>网站的个性化描述，大家需要根据自己的实际情况认真填写</p><table><thead><tr><th align="center">Setting</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">网站标题</td></tr><tr><td align="center">subtitle</td><td align="center">网站副标题</td></tr><tr><td align="center">description</td><td align="center">网站描述</td></tr><tr><td align="center">keywords</td><td align="center">网站关键字</td></tr><tr><td align="center">author</td><td align="center">网站作者</td></tr><tr><td align="center">language</td><td align="center">网站使用的语言，默认是<code>en</code> ，中文网站填<code>zh-CN</code></td></tr><tr><td align="center">Hans`zone</td><td align="center">网站使用的时区，默认为 <code>计算机的预设置</code>，可以不填</td></tr></tbody></table><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>关于博客文章 URL 的设置，一般不用进行更改</p><table><thead><tr><th align="center">Setting</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">网站的网址</td></tr><tr><td align="center">root</td><td align="center">网站的根目录， 也是存放文章的目录</td></tr><tr><td align="center">permalink</td><td align="center">文章的链接格式 ，默认为 <code>:year/:month/:day/:title/</code></td></tr><tr><td align="center">permalink_defaults</td><td align="center">永久链接中每个段的默认值</td></tr></tbody></table><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><p>关于文件夹的设置，也是一般不用进行更改</p><table><thead><tr><th align="center">Setting</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">source_dir</td><td align="center">资源文件夹 ，存放用户的资源文件，默认为 <code>source</code></td></tr><tr><td align="center">public_dir</td><td align="center">公用文件夹 ，存放生成的静态文件，默认为 <code>public</code></td></tr><tr><td align="center">tag_dir</td><td align="center">标签目录 ，默认为 <code>tags</code></td></tr><tr><td align="center">archive_dir</td><td align="center">档案目录 ，默认为 <code>archives</code></td></tr><tr><td align="center">category_dir</td><td align="center">分类目录 ，默认为 <code>categories</code></td></tr><tr><td align="center">code_dir</td><td align="center">代码目录 ，默认为 <code>downloads/code</code></td></tr><tr><td align="center">i18n_dir</td><td align="center">i18n 目录 ，默认为 <code>:lang</code></td></tr><tr><td align="center">skip_render</td><td align="center">储存站长验证文件，跳过指定文件的渲染</td></tr></tbody></table><h3 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h3><p>比较常用的写作设置，可以根据自己的写作习惯随时进行调整</p><table><thead><tr><th align="center">Setting</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">new_post_name</td><td align="center">文章的文件名格式，默认为 <code>:title.md</code></td></tr><tr><td align="center">default_layout</td><td align="center">预设的布局模板，默认为 <code>post</code></td></tr><tr><td align="center">titlecase</td><td align="center">标题是否使用首字母大写 ，默认为 <code>false</code></td></tr><tr><td align="center">external_link</td><td align="center">链接是否在新标签页中打开，默认为 <code>true</code></td></tr><tr><td align="center">filename_case</td><td align="center">将文件名转换为 <code>1</code> 小写 或 <code>2</code> 大写，默认为 <code>0</code></td></tr><tr><td align="center">render_drafts</td><td align="center">是否显示渲染草稿，默认为 <code>false</code></td></tr><tr><td align="center">post_asset_folder</td><td align="center">是否启用 Asset 文件夹，默认为 <code>false</code></td></tr><tr><td align="center">relative_link</td><td align="center">是否建立相对于根文件夹的链接，默认为 <code>false</code></td></tr><tr><td align="center">future</td><td align="center">是否显示未来文章，默认为 <code>true</code></td></tr><tr><td align="center">highlight</td><td align="center">代码块设置</td></tr></tbody></table><ul><li><p><strong>highlight</strong></p><table><thead><tr><th align="center">Setting</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">enable</td><td align="center">是否使用代码高亮 ，默认为 <code>true</code></td></tr><tr><td align="center">line_number</td><td align="center">是否显示行号 ，默认为 <code>true</code></td></tr><tr><td align="center">auto_detect</td><td align="center">是否自动检测语言 ，默认为 <code>false</code></td></tr><tr><td align="center">tab_replace</td><td align="center">tab 替代设置</td></tr></tbody></table></li></ul><h3 id="Home-page-setting"><a href="#Home-page-setting" class="headerlink" title="Home page setting"></a>Home page setting</h3><p>首页设置，可以自己决定每页显示的文章数量和显示文章的顺序</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">index_generator</td><td align="center">主页设置</td></tr></tbody></table><ul><li><p><strong>index_generator</strong></p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">path</td><td align="center">首页的根目录</td></tr><tr><td align="center">per_page</td><td align="center">每页显示文章的数量，默认为 <code>10</code></td></tr><tr><td align="center">order_by</td><td align="center">显示文章的顺序，默认为 <code>-date</code></td></tr></tbody></table></li></ul><h3 id="Category-amp-Tag"><a href="#Category-amp-Tag" class="headerlink" title="Category &amp; Tag"></a>Category &amp; Tag</h3><p>这里是关于分类和标签的配置</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">default_category</td><td align="center">预设分类，默认为 <code>uncategorized</code></td></tr><tr><td align="center">category_map</td><td align="center">分类别名</td></tr><tr><td align="center">tag_map</td><td align="center">标签别名</td></tr></tbody></table><h3 id="Date-Time-format"><a href="#Date-Time-format" class="headerlink" title="Date / Time format"></a>Date / Time format</h3><p>时间和日期的显示格式</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">date_format</td><td align="center">日期格式，默认为 <code>YYYY-MM-DD</code></td></tr><tr><td align="center">time_format</td><td align="center">时间格式，默认为 <code>HH:mm:ss</code></td></tr></tbody></table><h3 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h3><p>分页设置，可以自己决定单个页面上显示的文章数量和分页目录</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">per_page</td><td align="center">单个页面上显示的文章数量，默认为 <code>10</code> ，用 <code>0</code> 表示禁用分页</td></tr><tr><td align="center">pagination_dir</td><td align="center">分页目录，默认为 <code>page</code></td></tr></tbody></table><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><p>这里可以设置主题类型和插件，之后讲到更换博客主题时需要进行更改</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">theme</td><td align="center">theme</td></tr></tbody></table><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>这里是关于网站部署的配置，常用的有部署类型和部署地址</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">deploy</td><td align="center">网站部署配置</td></tr></tbody></table><ul><li><p><strong>deploy</strong></p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">type</td><td align="center">网站部署类型</td></tr><tr><td align="center">repo</td><td align="center">网站部署地址</td></tr></tbody></table></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h3><p><code>hexo init</code> 命令用于 **初始化 ** 本地文件夹为博客的根目录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [<span class="type">folder</span>]</span><br></pre></td></tr></table></figure><ul><li><code>folder</code> 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</li></ul><h3 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h3><p><code>hexo new</code> 命令用于 <strong>新建文章</strong> ，一般可以简写为 <code>hexo n</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [<span class="type">layout</span>] &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li><code>layout</code> 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li><li><code>title</code> 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li></ul><h3 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h3><p><code>hexo generate</code> 命令用于 <strong>生成静态文件</strong>，一般可以简写为 <code>hexo g</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价</li></ul><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h3><p><code>hexo server</code> 命令用于 <strong>启动本地服务器</strong>，一般可以简写为 <code>hexo s</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><ul><li><code>-p</code> 选项，指定服务器端口，默认为 4000</li><li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li><li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul><p><strong><em>说明：</em></strong> 运行本地服务器需要安装 hexo-server 插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-server</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h3><p><code>hexo deploy</code> 命令用于 **部署 ** 网站，一般可以简写为 <code>hexo d</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价</li></ul><p><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 部署到 GitHub 为例进行说明</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">自定义提交消息，默认为Site</span> <span class="attr">updated:</span> &#123;&#123; <span class="string">now(&#x27;YYYY-MM-DD</span> <span class="string">HH:mm:ss&#x27;)</span> &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><p><code>hexo clean</code> 命令用于 **清理缓存文件 **。网站显示异常的时候可以尝试此操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h3><h4 id="hexo-–safe"><a href="#hexo-–safe" class="headerlink" title="hexo –safe"></a>hexo –safe</h4><p><code>hexo --safe</code> 表示安全模式，用于禁用加载插件和脚本，安装新插件时遇到问题可以尝试此操作。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="literal">--safe</span></span><br></pre></td></tr></table></figure><h4 id="hexo-–debug"><a href="#hexo-–debug" class="headerlink" title="hexo –debug"></a>hexo –debug</h4><p><code>hexo --debug</code> 表示调试模式，用于将消息详细记录到终端和 <code>debug.log</code> 文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="literal">--debug</span></span><br></pre></td></tr></table></figure><h4 id="hexo-–silent"><a href="#hexo-–silent" class="headerlink" title="hexo –silent"></a>hexo –silent</h4><p><code>hexo --silent</code> 表示静默模式，用于静默输出到终端</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="literal">--silent</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>主要配置文件信息和常用命令就是这样了，</p><p>更多配置文件请参考官方文档：</p><p>配置：<a href="https://hexo.io/docs/configuration">https://hexo.io/docs/configuration</a></p><p>命令：<a href="https://hexo.io/docs">https://hexo.io/docs</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Hexo配置 </tag>
            
            <tag> Hexo命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：session</title>
      <link href="/archives/477f8de2.html"/>
      <url>/archives/477f8de2.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于-session"><a href="#关于-session" class="headerlink" title="关于 session"></a>关于 session</h2><p>session 是另一种记录客户状态的机制，与 cookie 保存在客户端浏览器不同，session 保存在服务器当中；<br>当客户端访问服务器时，服务器会生成一个 session 对象，对象中保存的是 key:value 值，同时服务器会将 key 传回给客户端的 cookie 当中；当用户第二次访问服务器时，就会把 cookie 当中的 key 传回到服务器中，最后服务器会吧 value 值返回给客户端。<br>因此上面的 key 则是全局唯一的标识，客户端和服务端依靠这个全局唯一的标识来访问会话信息数据。</p><h2 id="设置-session"><a href="#设置-session" class="headerlink" title="设置 session"></a>设置 session</h2><p>我们使用 express-session 模块来设置 session</p><h3 id="安装-express-session"><a href="#安装-express-session" class="headerlink" title="安装 express-session"></a>安装 express-session</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install express-session --save</span><br></pre></td></tr></table></figure><h3 id="引入-express-session-模块"><a href="#引入-express-session-模块" class="headerlink" title="引入 express-session 模块"></a>引入 express-session 模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const session=require(&quot;express-session&quot;);</span><br></pre></td></tr></table></figure><h3 id="设置-session-1"><a href="#设置-session-1" class="headerlink" title="设置 session"></a>设置 session</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session(options);</span><br></pre></td></tr></table></figure><p>如下列代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line">const session=require(&quot;express-session&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">//配置中间件</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">secret: &quot;keyboard cat&quot;,</span><br><span class="line"> resave: false,</span><br><span class="line"> saveUninitialized: true,</span><br><span class="line"> cookie: (&#x27;name&#x27;, &#x27;value&#x27;,&#123;maxAge:  5*60*1000,secure: false&#125;)</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/login&#x27;,function(req,res)&#123;</span><br><span class="line">//设置session</span><br><span class="line">req.session.userinfo=&#x27;张三&#x27;;</span><br><span class="line">res.send(&quot;登陆成功！&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/&#x27;,function(req,res)&#123;</span><br><span class="line">//获取session</span><br><span class="line">if(req.session.userinfo)&#123;</span><br><span class="line">res.send(&quot;hello &quot;+req.session.userinfo+&quot;，welcome&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">res.send(&quot;未登陆&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>在 session(option)中对 session 进行设置</p><h2 id="session-的常用方法"><a href="#session-的常用方法" class="headerlink" title="session 的常用方法"></a>session 的常用方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//设置session</span><br><span class="line">req.session.username=&quot;张三&quot;</span><br><span class="line"></span><br><span class="line">//获取session</span><br><span class="line">req.session.username</span><br><span class="line"></span><br><span class="line">//重新设置cookie的过期时间</span><br><span class="line">req.session.cookie.maxAge=1000;</span><br><span class="line"></span><br><span class="line">//销毁session</span><br><span class="line">req.session.destroy(function(err)&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以下演示通过销毁 session 的方式来退出登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line">const session=require(&quot;express-session&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">//配置中间件</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">secret: &quot;keyboard cat&quot;,</span><br><span class="line"> resave: false,</span><br><span class="line"> saveUninitialized: true,</span><br><span class="line"> cookie: (&#x27;name&#x27;, &#x27;value&#x27;,&#123;maxAge:  5*60*1000,</span><br><span class="line">secure: false,</span><br><span class="line">name: &quot;seName&quot;,</span><br><span class="line">resave: false&#125;)</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/login&#x27;,function(req,res)&#123;</span><br><span class="line">//设置session</span><br><span class="line">req.session.userinfo=&#x27;张三&#x27;;</span><br><span class="line">res.send(&quot;登陆成功！&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/loginOut&#x27;,function(req,res)&#123;</span><br><span class="line">//注销session</span><br><span class="line">req.session.destroy(function(err)&#123;</span><br><span class="line">res.send(&quot;退出登录！&quot;+err);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/&#x27;,function(req,res)&#123;</span><br><span class="line">//获取session</span><br><span class="line">if(req.session.userinfo)&#123;</span><br><span class="line">res.send(&quot;hello &quot;+req.session.userinfo+&quot;，welcome to index&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">res.send(&quot;未登陆&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>当我们进入到主页时，未显示任何信息，进入 login 路由后，自动设置 session，这是回到主页则显示 session 信息，之后进入 loginOut 路由已注销 session 信息，再回到首页显示为登陆。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：Express路由</title>
      <link href="/archives/258df3be.html"/>
      <url>/archives/258df3be.html</url>
      
        <content type="html"><![CDATA[<h3 id="Express-路由简介"><a href="#Express-路由简介" class="headerlink" title="Express 路由简介"></a>Express 路由简介</h3><p>路由表示应用程序端点 (URI) 的定义以及响应客户端请求的方式。它包含一个请求方时（methods）、路径（path）和路由匹配时的函数（callback）;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.methods(path, callback);</span><br></pre></td></tr></table></figure><h3 id="Express-路由方法"><a href="#Express-路由方法" class="headerlink" title="Express 路由方法"></a>Express 路由方法</h3><p>Express 方法源于 HTTP 方法之一，附加到 express 类的实例。它可请求的方法包括：</p><p>get、post、put、head、delete、options、trace、copy、lock、mkcol、move、purge、propfind、proppatch、unlock、report、mkactivity、checkout、merge、m-search、notify、subscribe、unsubscribe、patch、search 和 connect。</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>Express 路径包含三种表达形式，分别为字符串、字符串模式、正则表达式</p><h4 id="字符串路径"><a href="#字符串路径" class="headerlink" title="字符串路径"></a>字符串路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&quot;/login&quot;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;heng... women&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此路径地址将与/login 匹配</p><h4 id="字符串模式路径"><a href="#字符串模式路径" class="headerlink" title="字符串模式路径"></a>字符串模式路径</h4><p>此路由路径将与<code>acd</code>和相匹配<code>abcd</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab?cd&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ab?cd&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这条路线的路径将会匹配<code>abcd</code>，<code>abbcd</code>，<code>abbbcd</code>，等等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab+cd&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ab+cd&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这条路线的路径将会匹配<code>abcd</code>，<code>abxcd</code>，<code>abRANDOMcd</code>，<code>ab123cd</code>，等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab*cd&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ab*cd&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此路由路径将与<code>/abe</code>和相匹配<code>/abcde</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab(cd)?e&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ab(cd)?e&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="正则表达式路径"><a href="#正则表达式路径" class="headerlink" title="正则表达式路径"></a>正则表达式路径</h4><p>此路由路径将匹配其中带有“ a”的任何内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="regexp">/a/</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;/a/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这条路线的路径将匹配<code>butterfly</code>和<code>dragonfly</code>，但不<code>butterflyman</code>，<code>dragonflyman</code>等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="regexp">/.*fly$/</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;/.*fly$/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res)&#123;</span><br><span class="line">res.send(`&lt;h1&gt;主页&lt;/h1&gt;`);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(&quot;/login&quot;,function(req,res)&#123;</span><br><span class="line">res.send(“登录页面”);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(&quot;/registe&quot;,function(req,res)&#123;</span><br><span class="line">res.send(“注册页面”);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>输入<a href="http://127.0.0.1:8080/login%E5%92%8Chttp://127.0.0.1:8080/registe%E9%83%BD%E8%83%BD%E8%BF%9B%E5%85%A5%E4%B8%8D%E5%90%8C%E8%B7%AF%E7%94%B1%E3%80%82">http://127.0.0.1:8080/login和http://127.0.0.1:8080/registe都能进入不同路由。</a></p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><h4 id="路线参数"><a href="#路线参数" class="headerlink" title="路线参数"></a>路线参数</h4><p>路由参数被命名为 URL 段，用于捕获 URL 中在其位置处指定的值。捕获的值将填充到<code>req.params</code>对象中，并将路径中指定的 route 参数的名称作为其各自的键。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route path: /users/:userId/books/:bookId</span><br><span class="line">Request URL: http://localhost:3000/users/34/books/8989</span><br><span class="line">req.params: &#123; &quot;userId&quot;: &quot;34&quot;, &quot;bookId&quot;: &quot;8989&quot; &#125;</span><br></pre></td></tr></table></figure><p>要使用路由参数定义路由，只需在路由路径中指定路由参数，如下所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users/:userId/books/:bookId&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>路径参数的名称必须由“文字字符”（[A-Za-z0-9_]）组成。</p><p>由于连字符（<code>-</code>）和点（<code>.</code>）是按字面解释的，因此可以将它们与路由参数一起使用，以实现有用的目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Route path: /flights/:from-:to</span><br><span class="line">Request URL: http://localhost:3000/flights/LAX-SFO</span><br><span class="line">req.params: &#123; &quot;from&quot;: &quot;LAX&quot;, &quot;to&quot;: &quot;SFO&quot; &#125;</span><br><span class="line">Route path: /plantae/:genus.:species</span><br><span class="line">Request URL: http://localhost:3000/plantae/Prunus.persica</span><br><span class="line">req.params: &#123; &quot;genus&quot;: &quot;Prunus&quot;, &quot;species&quot;: &quot;persica&quot; &#125;</span><br></pre></td></tr></table></figure><p>要更好地控制可以由 route 参数匹配的确切字符串，可以在括号（<code>()</code>）后面附加一个正则表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route path: /user/:userId(\d+)</span><br><span class="line">Request URL: http://localhost:3000/user/42</span><br><span class="line">req.params: &#123;&quot;userId&quot;: &quot;42&quot;&#125;</span><br></pre></td></tr></table></figure><p>由于正则表达式通常是文字字符串的一部分，因此请确保<code>\</code>使用其他反斜杠对所有字符进行转义，例如<code>\\d+</code>。</p><p>在 Express 4.x 中，<a href="https://github.com/expressjs/express/issues/2495">不以常规方式解释正则表达式中</a><a href="https://github.com/expressjs/express/issues/2495">的<code>*</code>字符</a>。解决方法是使用<code>&#123;0,&#125;</code>代替<code>*</code>。这可能会在 Express 5 中修复。</p><h4 id="路线处理程序"><a href="#路线处理程序" class="headerlink" title="路线处理程序"></a>路线处理程序</h4><p>您可以提供行为类似于<a href="http://www.expressjs.com.cn/en/guide/using-middleware.html">中间件的</a>多个回调函数来处理请求。唯一的例外是这些回调可能会调用<code>next(&#39;route&#39;)</code>以绕过其余的路由回调。您可以使用此机制在路由上施加先决条件，然后在没有理由继续使用当前路由的情况下将控制权传递给后续路由。</p><p>路由处理程序可以采用函数，函数数组或二者组合的形式，如以下示例所示。</p><p>单个回调函数可以处理路由。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/example/a&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from A!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>多个回调函数可以处理一条路由（确保指定了<code>next</code>对象）。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(</span><br><span class="line">  <span class="string">&#x27;/example/b&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;the response will be sent by the next function ...&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from B!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>回调函数数组可以处理路由。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cb0 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CB0&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb1 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CB1&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb2 = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from C!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/example/c&#x27;</span>, [cb0, cb1, cb2])</span><br></pre></td></tr></table></figure><p>独立功能和功能数组的组合可以处理路由。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cb0 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CB0&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb1 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CB1&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(</span><br><span class="line">  <span class="string">&#x27;/example/d&#x27;</span>,</span><br><span class="line">  [cb0, cb1],</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;the response will be sent by the next function ...&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from D!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="应对方法"><a href="#应对方法" class="headerlink" title="应对方法"></a>应对方法</h4><p><code>res</code>下表中响应对象（）上的方法可以将响应发送到客户端，并终止请求-响应周期。如果从路由处理程序中未调用这些方法，则客户端请求将被挂起。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.download">res.download()</a></td><td>提示要下载的文件。</td></tr><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.end">res.end（）</a></td><td>结束响应过程。</td></tr><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.json">res.json（）</a></td><td>发送 JSON 响应。</td></tr><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.jsonp">res.jsonp（）</a></td><td>发送带有 JSONP 支持的 JSON 响应。</td></tr><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.redirect">res.redirect（）</a></td><td>重定向请求。</td></tr><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.render">res.render（）</a></td><td>渲染视图模板。</td></tr><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.send">res.send（）</a></td><td>发送各种类型的响应。</td></tr><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.sendFile">res.sendFile（）</a></td><td>将文件作为八位字节流发送。</td></tr><tr><td><a href="http://www.expressjs.com.cn/en/4x/api.html#res.sendStatus">res.sendStatus（）</a></td><td>设置响应状态代码，并将其字符串表示形式发送为响应正文。</td></tr></tbody></table><h4 id="app-route（）"><a href="#app-route（）" class="headerlink" title="app.route（）"></a>app.route（）</h4><p>您可以使用来为路由路径创建可链接的路由处理程序<code>app.route()</code>。由于路径是在单个位置指定的，因此创建模块化路由非常有帮助，减少冗余和错别字也很有帮助。有关路由的更多信息，请参见：<a href="http://www.expressjs.com.cn/en/4x/api.html#router">Router（）文档</a>。</p><p>这是使用定义的链式路由处理程序的示例<code>app.route()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">  .<span class="title function_">route</span>(<span class="string">&#x27;/book&#x27;</span>)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Get a random book&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">post</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Add a book&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">put</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Update the book&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="快速路由器"><a href="#快速路由器" class="headerlink" title="快速路由器"></a>快速路由器</h4><p>使用<code>express.Router</code>该类创建模块化的，可安装的路由处理程序。一个<code>Router</code>实例是一个完整的中间件和路由系统; 因此，它通常被称为“迷你应用程序”。</p><p>以下示例将路由器创建为模块，在其中加载中间件功能，定义一些路由，并将路由器模块安装在主应用程序的路径上。</p><p><code>birds.js</code>在 app 目录中创建一个名为以下内容的路由器文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// middleware that is specific to this router</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">timeLog</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time: &#x27;</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// define the home page route</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Birds home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// define the about route</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;About birds&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><p>然后，在应用程序中加载路由器模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> birds = <span class="built_in">require</span>(<span class="string">&#x27;./birds&#x27;</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/birds&#x27;</span>, birds)</span><br></pre></td></tr></table></figure><p>该应用程序现在将能够处理对<code>/birds</code>和的请求<code>/birds/about</code>，以及调用<code>timeLog</code>特定于该路线的中间件功能。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：ejs模板</title>
      <link href="/archives/c739ddf8.html"/>
      <url>/archives/c739ddf8.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>相比于 jade 模板引擎，ejs 对原 HTML 语言就未作出结构上的改变，只不过在其交互数据方面做出了些许修改，相比于 jade 更加简单易用。因此其学习成本是很低的。您也可参考 ejs 官网：<a href="https://ejs.bootcss.com/">https://ejs.bootcss.com/</a></p><h3 id="ejs-基本使用"><a href="#ejs-基本使用" class="headerlink" title="ejs 基本使用"></a>ejs 基本使用</h3><p>这里我们使用如下配置文件：</p><p>我们啊可以通过下面的方式实现基本的 ejs 操作：<br>app.js 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line">const ejs=require(&quot;ejs&quot;);</span><br><span class="line">const fs=require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">//引用ejs</span><br><span class="line">app.set(&#x27;views&#x27;,&quot;public&quot;);//设置视图的对应目录</span><br><span class="line">app.set(&quot;view engine&quot;,&quot;ejs&quot;);//设置默认的模板引擎</span><br><span class="line">app.engine(&#x27;ejs&#x27;, ejs.__express);//定义模板引擎</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res)&#123;</span><br><span class="line">res.render(&quot;index.ejs&quot;,&#123;title: &quot;&lt;h4&gt;express&lt;/h4&gt;&quot;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>ejs 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;% for(var i=0;i&lt;10;i++)&#123; %&gt;</span><br><span class="line">&lt;%= i %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 获取变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;datas&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>获取变量：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&lt;%- title %&gt;</span><br><span class="line">&lt;%= title %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时我们会得到如下图的结果：</p><p>由此可以知道：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% xxx %&gt;：里面写入的是js语法，</span><br><span class="line">&lt;%= xxx %&gt;：里面是服务端发送给ejs模板转义后的变量，输出为原html</span><br><span class="line">&lt;%- xxx %&gt;：里面也是服务端发送给ejs模板后的变量，不过他会把html输出来</span><br><span class="line">&lt;%# 注释标签，不执行、不输出内容</span><br></pre></td></tr></table></figure><p>同理 res.render()函数也是支持回调的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.render(&#x27;user&#x27;, &#123; name: &#x27;Tobi&#x27; &#125;, function(err, html) &#123;</span><br><span class="line">  console.log(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样我们即可将看到 heml 的内容。另外值得说明的是 ejs 模块也有 ejs.render()和 ejs.renderFile()方法，他在这里与 res.render()作用类似，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ejs.render(str, data, options);</span><br><span class="line"></span><br><span class="line">ejs.renderFile(filename, data, options, function(err, str)&#123;</span><br><span class="line">    // str =&gt; 输出绘制后的 HTML</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ejs-标签各种含义"><a href="#ejs-标签各种含义" class="headerlink" title="ejs 标签各种含义"></a>ejs 标签各种含义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;% &#x27;脚本&#x27; 标签，用于流程控制，无输出。</span><br><span class="line">&lt;%_ 删除其前面的空格符</span><br><span class="line">&lt;%= 输出数据到模板（输出是转义 HTML 标签）</span><br><span class="line">&lt;%- 输出非转义的数据到模板</span><br><span class="line">&lt;%# 注释标签，不执行、不输出内容</span><br><span class="line">&lt;%% 输出字符串 &#x27;&lt;%&#x27;</span><br><span class="line">%&gt; 一般结束标签</span><br><span class="line">-%&gt; 删除紧随其后的换行符</span><br><span class="line">_%&gt; 将结束标签后面的空格符删除</span><br></pre></td></tr></table></figure><p>以上就为 ejs 基本用法，往后对数据库操作就直接把 json 数据从服务器返送给模板引擎就行；</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> ejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：cookie加密</title>
      <link href="/archives/4bfa5187.html"/>
      <url>/archives/4bfa5187.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于-cookie-加密"><a href="#关于-cookie-加密" class="headerlink" title="关于 cookie 加密"></a>关于 cookie 加密</h2><p>cookie 加密是让客户端用户无法的获取 cookie 明文信息，是数据安全的重要部分；一般的我们可以在保存 cookie 时对 cookie 信息进行加密，或者在 res.cookie 中对 option 对象的 signed 属性设置设置成 true 即可。</p><h2 id="使用-signed-属性进行-cookie-加密"><a href="#使用-signed-属性进行-cookie-加密" class="headerlink" title="使用 signed 属性进行 cookie 加密"></a>使用 signed 属性进行 cookie 加密</h2><p>如下列代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line">const cookieParser = require(&quot;cookie-parser&quot;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line">app.use(cookieParser(&#x27;secret&#x27;));</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;主页&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//获取cookie</span><br><span class="line">app.use(function(req,res,next)&#123;</span><br><span class="line">console.log(req.signedCookies.name);</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置cookie</span><br><span class="line">app.use(function(req,res,next)&#123;</span><br><span class="line">console.log(res.cookie(&quot;name&quot;,&quot;zhangsan&quot;,&#123;httpOnly: true,maxAge: 200000,signed: true&#125;));</span><br><span class="line">res.end(&quot;cookie为：&quot;+req.signedCookies.name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p><strong>签名原理</strong><br>Express 用于对 cookie 签名，而 cookie-parser 则是实现对签名的解析。实质是把 cookie 设置的值和 cookieParser(‘secret’);中的 secret 进行 hmac 加密，之后和 cookie 值加“.”的方式拼接起来。<br>当 option 中 signed 设置为 true 后，底层会将 cookie 的值与“secret”进行 hmac 加密；</p><p><strong>如何解析</strong><br>cookie-parser 中间件在解析签名 cookie 时做了两件事：</p><ol><li>将签名 cookie 对应的原始值提取出来</li><li>验证签名 cookie 是否合法</li></ol><h2 id="直接对-cookie-值加密"><a href="#直接对-cookie-值加密" class="headerlink" title="直接对 cookie 值加密"></a>直接对 cookie 值加密</h2><p>node 为我们提供了一个核心安全模块“crypto”，它提供了很多安全相关的功能，如摘要运算、加密、电子签名等。<br>这是，我们便可很轻易的封装一个加密模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const crypto=require(&#x27;crypto&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports=&#123;</span><br><span class="line">//MD5封装</span><br><span class="line">MD5_SUFFIX:&#x27;s5w84&amp;&amp;d4d473885s2025s5*4s2&#x27;,</span><br><span class="line">md5:function(str)&#123;</span><br><span class="line">var obj=crypto.createHash(&#x27;md5&#x27;);</span><br><span class="line">obj.update(str);</span><br><span class="line">return obj.digest(&#x27;hex&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后只需要进行相应导入即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const common=require(&#x27;./MD5&#x27;);</span><br><span class="line"></span><br><span class="line">var str=&#x27;123456&#x27;;</span><br><span class="line">var str=common.md5(str+&#x27;s5w84&amp;&amp;d4d473885s2025s5*4s2&#x27;);</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure><p>设置 cookie 代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line">const cookieParser=require(&quot;cookie-parser&quot;);</span><br><span class="line">var cry = require(&#x27;./md5&#x27;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">var str=&#x27;hello-123&#x27;;</span><br><span class="line">var str=cry.md5(str+&#x27;s5w84&amp;&amp;d4d473885s2025s5*4s2&#x27;);</span><br><span class="line"></span><br><span class="line">//设置中间件</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">//获取加密cookie</span><br><span class="line">app.use(function(req,res,next)&#123;</span><br><span class="line">console.log(req.cookies.userName);</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置并加密cookie</span><br><span class="line">app.use(function(req,res,next)&#123;</span><br><span class="line">res.cookie(&quot;userName&quot;, str, &#123;maxAge: 5*60*1000, httpOnly: true&#125;);</span><br><span class="line">res.end(&quot;set ok&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>如果是在判断登录时，只需将用户输入的账号进行同样加密操作在进行比较即可知道账户是否正确。<br>crypto 所涉及的加密方式有很多，推荐大家都写模块引用，这样更方便后期的维护。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：中间件</title>
      <link href="/archives/5b5154c.html"/>
      <url>/archives/5b5154c.html</url>
      
        <content type="html"><![CDATA[<p>从字面意思，我们可以了解到它大概就是做中间代理操作，事实也是如此；大多数情况下，中间件就是在做接收到请求和发送响应中间的一系列操作。事实上，express 是一个路由和中间件的 web 框架，Express 应用程序基本上是一系列中间件函数的调用。</p><div class="mermaid">A[浏览器发送请求] --&gt; B(express 接受请求)B --&gt;|中间处理的过程| C[路由函数处理渲染]C --&gt; D[.res.render 渲染]</div><p>中间件函数可以执行以下任务：</p><ul><li>执行任何代码。</li><li>对请求和响应对象进行更改。</li><li>结束请求/响应循环。</li><li>调用堆栈中的下一个中间件函数。</li></ul><p>中间件也分为应用层中间件、路由中间件、内置中间件、错误处理中间件和第三方中间件。下面分别对以下进行说明：</p><h3 id="应用层中间件"><a href="#应用层中间件" class="headerlink" title="应用层中间件"></a>应用层中间件</h3><p>应用级中间键绑定到 app 对象使用 app.use 和 app.METHOD()-需要处理 http 请求的方法，例如 GET、PUT、POST，将之前的 get 或者 post 替换为 use 就行。<br>例如下面实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">//匹配路由之前的操作</span><br><span class="line">app.use(function(req,res,next())&#123;</span><br><span class="line">console.log(&quot;访问之前&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;主页&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>这时我们会发现 <a href="http://localhost:8080/">http://localhost:8080/</a> 地址一直在加载，但命令行里显示了“访问之前”，说明程序并不会同步执行，如果使用 next 来是路由继续向下匹配，那么就能又得到主页数据了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">//匹配路由之前的操作</span><br><span class="line">app.use(function(req,res,next)&#123;</span><br><span class="line">console.log(&quot;访问之前&quot;);</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;主页&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>当然也可以简化写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">app.use(function(req,res,next)&#123;</span><br><span class="line">console.log(&quot;访问之前&quot;);</span><br><span class="line">next();</span><br><span class="line">&#125;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;主页&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>因此，在进行路由匹配之前或再录又要继续向下执行时想做个操作，那么应用层中间件无疑是好的选择。</p><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><p>路由级中间件和应用级中间件类似，只不过他需要绑定 express.Router();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var router = express.Router()</span><br></pre></td></tr></table></figure><p>在匹配路由时，我们使用 router.use() 或 router.VERB() ,路由中间件结合多次 callback 可用于用户登录及用户状态检测。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line">var app = express();</span><br><span class="line">var router=express.Router();</span><br><span class="line"></span><br><span class="line">router.use(&quot;/&quot;,function(req,res,next)&#123;</span><br><span class="line">console.log(&quot;匹配前&quot;);</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.use(&quot;/user&quot;,function(req,res,next)&#123;</span><br><span class="line">console.log(&quot;匹配地址：&quot;,req.originalUrl);</span><br><span class="line">next();</span><br><span class="line">&#125;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;用户登录&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&quot;/&quot;,router);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>总之在检测用户登录和引导用户应该访问哪个页面是，路由中间件绝对好用。</p><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><p>顾名思义，它是指当我们匹配不到路由时所执行的操作。错误处理中间件和其他中间件基本一样，只不过其需要开发者提供 4 个自变量参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use((err, req, res, next) =&gt; &#123;</span><br><span class="line">        res.sendStatus(err.httpStatusCode).json(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一般情况下，我们把错误处理放在最下面，这样我们即可对错误进行集中处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res,next)&#123;</span><br><span class="line">const err=new Error(&#x27;Not Found&#x27;);</span><br><span class="line">res.send(&quot;主页&quot;);</span><br><span class="line">next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&quot;/user&quot;,function(err,req,res,next)&#123;</span><br><span class="line">console.log(&quot;用户登录&quot;);</span><br><span class="line">next(err);</span><br><span class="line">&#125;,function(req,res,next)&#123;</span><br><span class="line">res.send(&quot;用户登录&quot;);</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(function(req,res)&#123;</span><br><span class="line">res.status(404).send(&quot;未找到指定页面&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><h3 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h3><p>从版本 4.x 开始，Express 不再依赖 Content，也就是说 Express 以前的内置中间件作为单独模块，express.static 是 Express 的唯一内置中间件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express.static(root, [options]);</span><br></pre></td></tr></table></figure><p>通过 express.static 我们可以指定要加载的静态资源。</p><h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><p>形如之前我们的 body-parser，采用引入外部模块的方式来获得更多的应用操作。如后期的 cookie 和 session。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var app = express();</span><br><span class="line">var cookieParser = require(&#x27;cookie-parser&#x27;);</span><br></pre></td></tr></table></figure><p>以上就是关于 express 中间件类型，在实际项目中，中间件都是必不可少的，因此熟悉使用各种中间件会加快项目的开发效率。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> get请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：使用cookie</title>
      <link href="/archives/57b9b1ea.html"/>
      <url>/archives/57b9b1ea.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于-Cookie"><a href="#关于-Cookie" class="headerlink" title="关于 Cookie"></a>关于 Cookie</h2><p>在我们关闭一个登录过的网址并重新打开它后，我们的登录信息依然没有丢失；当我们浏览了商品后历史记录里出现了我们点击过的商品；当我们推回到首页后，推荐商品也为我们选出了相似物品；事实上当我们有过此类操作后，浏览器会将我们的操作信息保存到 cookie 上面。阿进而言之，cookie 就是储存在用户本地终端上的数据。</p><p><strong>Cookie 的特点</strong></p><ol><li>cookie 保存在浏览器本地，只要不过期关闭浏览器也会存在。</li><li>正常情况下 cookie 不加密，用户可轻松看到</li><li>用户可以删除或者禁用 cookie</li><li>cookie 可以被篡改</li><li>cookie 可用于攻击</li><li>cookie 存储量很小，大小一般是 4k</li><li>发送请求自动带上登录信息</li></ol><h2 id="Cookie-的安装及使用"><a href="#Cookie-的安装及使用" class="headerlink" title="Cookie 的安装及使用"></a>Cookie 的安装及使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install cookie-parser --save</span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const cookieParser=require(&quot;cookie-parser&quot;);</span><br></pre></td></tr></table></figure><h3 id="设置中间件"><a href="#设置中间件" class="headerlink" title="设置中间件"></a>设置中间件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(cookieParser());</span><br></pre></td></tr></table></figure><h3 id="设置-cookie"><a href="#设置-cookie" class="headerlink" title="设置 cookie"></a>设置 cookie</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(&quot;name&quot;,&#x27;zhangsan&#x27;,&#123;maxAge: 900000, httpOnly: true&#125;);</span><br><span class="line">//res.cookie(名称,值,&#123;配置信息&#125;)</span><br></pre></td></tr></table></figure><p>关于设置 cookie 的参数说明：</p><ol><li>domain: 域名</li><li>name=value：键值对，可以设置要保存的 Key/Value，注意这里的 name 不能和其他属性项的名字一样</li><li>Expires： 过期时间（秒），在设置的某个时间点后该 Cookie 就会失效，如 expires=Wednesday, 09-Nov-99 23:12:40 GMT。</li><li>maxAge： 最大失效时间（毫秒），设置在多少后失效 。</li><li>secure： 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效 。</li><li>Path： 表示 在那个路由下可以访问到 cookie。</li><li>httpOnly：是微软对 COOKIE 做的扩展。如果在 COOKIE 中设置了“httpOnly”属性，则通过程序（JS 脚本、applet 等）将无法读取到 COOKIE 信息，防止 XSS 攻击的产生 。</li><li>singed：表示是否签名 cookie, 设为 true 会对这个 cookie 签名，这样就需要用 res.signedCookies 而不是 res.cookies 访问它。被篡改的签名 cookie 会被服务器拒绝，并且 cookie 值会重置为它的原始值。</li></ol><h3 id="获取-cookie"><a href="#获取-cookie" class="headerlink" title="获取 cookie"></a>获取 cookie</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.cookies.name;</span><br></pre></td></tr></table></figure><p>下面是一个基础实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line">const cookieParser=require(&quot;cookie-parser&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">//设置中间件</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;首页&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置cookie</span><br><span class="line">app.get(&quot;/set&quot;,function(req,res)&#123;</span><br><span class="line">res.cookie(&quot;userName&quot;,&#x27;张三&#x27;,&#123;maxAge: 20000, httpOnly: true&#125;);</span><br><span class="line">res.send(&quot;设置cookie成功&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//获取cookie</span><br><span class="line">app.get(&quot;/get&quot;,function(req,res)&#123;</span><br><span class="line">console.log(req.cookies.userName);</span><br><span class="line">res.send(&quot;获取cookie成功，cookie为：&quot;+ req.cookies.userName);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>当访问 set 路由后会设置 cookie，当访问 get 路由后会获取到设置的 cookie 值。当然你也可以在其他页面继续获取当前 cookie，以实现 cookie 共享。</p><h2 id="多个二级域名共享-cookie"><a href="#多个二级域名共享-cookie" class="headerlink" title="多个二级域名共享 cookie"></a>多个二级域名共享 cookie</h2><p>只需要增加 res.cookie 中 option 对象的值，即可实现对相应路由下多个二级路由的 cookie 进行共享，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&quot;express&quot;);</span><br><span class="line">const cookieParser=require(&quot;cookie-parser&quot;);</span><br><span class="line"></span><br><span class="line">var app=express();</span><br><span class="line"></span><br><span class="line">//设置中间件</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;首页&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置cookie</span><br><span class="line">app.get(&quot;/set&quot;,function(req,res)&#123;</span><br><span class="line">res.cookie(&quot;userName&quot;,&#x27;张三&#x27;,&#123;maxAge: 200000, httpOnly: true,domain: &quot;ccc.com&quot;&#125;);</span><br><span class="line">res.send(&quot;设置cookie成功&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//获取cookie</span><br><span class="line">app.get(&quot;/get&quot;,function(req,res)&#123;</span><br><span class="line">console.log(req.cookies.userName);</span><br><span class="line">res.send(&quot;获取cookie成功，cookie为：&quot;+ req.cookies.userName);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>我们可以看到</p><p>不同的二级域名也能访问到相同的 cookie，只要满足 ccc.com 这个顶级域名就行。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：获取post参数</title>
      <link href="/archives/e21c4730.html"/>
      <url>/archives/e21c4730.html</url>
      
        <content type="html"><![CDATA[<h3 id="关于-POST-请求"><a href="#关于-POST-请求" class="headerlink" title="关于 POST 请求"></a>关于 POST 请求</h3><p>post 方法作为 http 请求很重要的一部分，几乎所有的网站都有用到它，与 get 不同，post 请求更像是在服务器上做修改操作，它一般用于数据资源的更新。<br>相比于 get 请求，post 所请求的数据会更加安全。上一章中我们发现 get 请求会在地址栏显示输入的用户名和密码(有中文时会转化为 BASE64 加密)，而 post 请求则会将数据放入 http 包的包体中，这使得别人无法直接看到用户名和密码！</p><h3 id="Express-如何设置-POST-请求"><a href="#Express-如何设置-POST-请求" class="headerlink" title="Express 如何设置 POST 请求"></a>Express 如何设置 POST 请求</h3><p>1.我们的知道，首先我们得知道在 form 表单进行 post 请求，enctype 属性一般设置为“application/x-www-form-urlencoded”，如果设置成 multipart/form-data，则多用于文件上传，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">&quot;#&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 设置解析 body 中间件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.urlencoded())</span><br></pre></td></tr></table></figure><p>3 获取 body 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.body.username</span><br></pre></td></tr></table></figure><p>登陆案例：</p><p>HTML:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;登陆&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;/login&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button&gt;登陆&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>APP.JS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var path = require(&#x27;path&#x27;)</span><br><span class="line">var app = express();</span><br><span class="line">var sqlQuery = require(&#x27;./lcMysql&#x27;)</span><br><span class="line"></span><br><span class="line">// view engine setup</span><br><span class="line">app.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br><span class="line">app.use(express.static(path.join(__dirname, &#x27;public&#x27;)));</span><br><span class="line">//解析post提交的数据</span><br><span class="line">app.use(express.urlencoded())</span><br><span class="line"></span><br><span class="line">//搜索首页</span><br><span class="line">app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">  res.render(&#x27;index.ejs&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//登陆页</span><br><span class="line">app.get(&#x27;/login&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">  res.render(&#x27;login&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">//处理登陆请求</span><br><span class="line">app.post(&#x27;/login&#x27;,async (req,res)=&gt;&#123;</span><br><span class="line">  //获取用户名和密码</span><br><span class="line">  let username = req.body.username</span><br><span class="line">  let password = req.body.password</span><br><span class="line">  //查询数据库是否由此用户名和密码</span><br><span class="line">  let sqlStr = &#x27;select * from user where username = ? and password = ?&#x27;;</span><br><span class="line">  let arr = [username,password];</span><br><span class="line">  let result = await sqlQuery(sqlStr,arr)</span><br><span class="line">  if(result.length == 0 )&#123;</span><br><span class="line">    res.send(&quot;登陆失败&quot;)</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    res.send(&quot;登陆成功&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">module.exports = app;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> post请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：获取get参数</title>
      <link href="/archives/c08bb6f8.html"/>
      <url>/archives/c08bb6f8.html</url>
      
        <content type="html"><![CDATA[<h3 id="关于-get-请求"><a href="#关于-get-请求" class="headerlink" title="关于 get 请求"></a>关于 get 请求</h3><p>一般在网站开发中，get 都用作数据获取和查询，类似于数据库中的查询操作，当服务器解析前台资源后即传输相应内容；而查询字符串是在 URL 上进行的，形如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/login?goods1=0001&amp;goods2=0002</span><br></pre></td></tr></table></figure><h3 id="获取前台-get-请求"><a href="#获取前台-get-请求" class="headerlink" title="获取前台 get 请求"></a>获取前台 get 请求</h3><p>通过 req.query 可以获得用户发送的 get 请求，之后通过 node 操作将相应数据返回给用户。</p><p>如果发送的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/login?goods1=0001&amp;goods2=0002</span><br></pre></td></tr></table></figure><p>响应的话则通过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.query</span><br></pre></td></tr></table></figure><p>他会获取到全部数据，或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req.query.goods1</span><br><span class="line">req.query.goods2</span><br></pre></td></tr></table></figure><p>来单独或去每一个数据。总之不同的需求对应不同的业务，大家按自己的需要来获取；</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面通过一个实例来对获取 get 参数进行一个总结：</p><p>HTML:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://localhost:8080/login&quot; method=&quot;get&quot;&gt;</span><br><span class="line">用户：</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;user&quot; id=&quot;user&quot; placeholder=&quot;用户名&quot;/&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">密码：</span><br><span class="line">&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; placeholder=&quot;密码&quot;/&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>NODE:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;,function(req,res)&#123;</span><br><span class="line">res.send(&quot;主页&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&quot;/login&quot;,function(req,res)&#123;</span><br><span class="line">console.log(req.query);</span><br><span class="line">res.send(&quot;登录路由，user为：&quot;+req.query.user+&quot;==&gt;   password为：&quot;+req.query.password);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><p>当在 html 页面中输入用户和密码提交后，就能得到想要的传输数据；<br>总之，虽然获取 get 参数并不复杂，但使用频率却相当的高，对于任何技术我们都应该秉持认真的态度去了解和学习它。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
            <tag> get请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架：Express介绍和安装</title>
      <link href="/archives/26f3bff6.html"/>
      <url>/archives/26f3bff6.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ndoe.js，一个基于 javsscript 运行环境的服务器语言，它的出现使得 javascript 有能力去实现服务器操作。在 gitHub 上 ndoe.js 的 star 数已接近 6 万，可见其受欢迎程度；而基于 node.js 的 Express 则把原先的许多操作变的简单灵活，一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。</p><p>express 官方网址：<a href="http://www.expressjs.com.cn/">www.expressjs.com.cn</a></p><h3 id="Express-的安装方式"><a href="#Express-的安装方式" class="headerlink" title="Express 的安装方式"></a>Express 的安装方式</h3><p>Express 的安装可直接使用 npm 包管理器上的项目，在安装 npm 之前可先安装淘宝镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这样我们使用 cnpm 的来代替 npm，这使得下载速度提高很多；其次你需要在你项目目录下运行以下指令来初始化 npm，期间所有提示按 enter 键即可，这会生成 package.json，它是用于描述项目文件的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm init</span><br></pre></td></tr></table></figure><p>再输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>这下项目目录中又会多出一个叫 node_modules 文件夹，里面是 node.js 为我们提供的模块，当然现在没有。接下来便是真正的安装 express 了，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install express --save</span><br></pre></td></tr></table></figure><p>这时，我们看到 node_modules 文件夹多了许多不同版本的应用文件夹，接下来执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --version</span><br></pre></td></tr></table></figure><p>查看 express 是否安装成功，如果显示版本号，则安装正确。</p><h3 id="Express-脚手架的安装"><a href="#Express-脚手架的安装" class="headerlink" title="Express 脚手架的安装"></a>Express 脚手架的安装</h3><p>安装 Express 脚手架有两种方式：</p><h4 id="使用-express-generator-安装"><a href="#使用-express-generator-安装" class="headerlink" title="使用 express-generator 安装"></a>使用 express-generator 安装</h4><p>使用命令行进入项目目录，依次执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i express-generator</span><br></pre></td></tr></table></figure><p>可通过 express -h 查看命令行的指令含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express -h</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: express [options] [dir]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">    --version        输出版本号</span><br><span class="line">-e, --ejs            添加对 ejs 模板引擎的支持</span><br><span class="line">    --pug            添加对 pug 模板引擎的支持</span><br><span class="line">    --hbs            添加对 handlebars 模板引擎的支持</span><br><span class="line">-H, --hogan          添加对 hogan.js 模板引擎的支持</span><br><span class="line">-v, --view &lt;engine&gt;  添加对视图引擎（view） &lt;engine&gt; 的支持 (ejs|hbs|hjs|jade|pug|twig|vash) （默认是 jade 模板引擎）</span><br><span class="line">    --no-view        创建不带视图引擎的项目</span><br><span class="line">-c, --css &lt;engine&gt;   添加样式表引擎 &lt;engine&gt; 的支持 (less|stylus|compass|sass) （默认是普通的 css 文件）</span><br><span class="line">    --git            添加 .gitignore</span><br><span class="line">-f, --force          强制在非空目录下创建</span><br><span class="line">-h, --help           输出使用方法</span><br></pre></td></tr></table></figure><p>创建了一个名为 myapp 的 Express 应用，并使用 ejs 模板引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --view=ejs app</span><br></pre></td></tr></table></figure><p>进入 app，并安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myapp</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><strong>在 Windows 下，使用以下命令启 Express 应用：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set DEBUG=app:* &amp; npm start</span><br></pre></td></tr></table></figure><p><strong>在 MacOS 或 Linux 下，使用以下命令启 Express 应用：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=app:* npm start</span><br></pre></td></tr></table></figure><h4 id="使用-express-命令-来快速从创建一个项目目录"><a href="#使用-express-命令-来快速从创建一个项目目录" class="headerlink" title="使用 express 命令 来快速从创建一个项目目录"></a>使用 express 命令 来快速从创建一个项目目录</h4><p>express 项目文件夹的名字 -e 如 使用命令行进入项目目录，依次执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">express app -e</span><br><span class="line">cd app</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>这时，你也可以看到在 app 文件夹下的文件结构；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bin: 启动目录 里面包含了一个启动文件 www 默认监听端口是 3000 (直接node www执行即可)</span><br><span class="line">node_modules：依赖的模块包</span><br><span class="line">public：存放静态资源</span><br><span class="line">routes：路由操作</span><br><span class="line">views：存放ejs模板引擎</span><br><span class="line">app.js：主文件</span><br><span class="line">package.json：项目描述文件</span><br></pre></td></tr></table></figure><h3 id="第一个-Express-应用“Hello-World”"><a href="#第一个-Express-应用“Hello-World”" class="headerlink" title="第一个 Express 应用“Hello World”"></a>第一个 Express 应用“Hello World”</h3><p>在这里，我们不使用 npm 构建的脚手架，而是向最开始那样直接在主目录中新建一个 app.js 文件。</p><p>在 app.js 中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);     //引入express模块</span><br><span class="line">var app= express();     //express()是express模块顶级函数</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;,function(req,res)&#123;      //访问根路径时输出hello world</span><br><span class="line">    res.send(`&lt;h1 style=&#x27;color: blue&#x27;&gt;hello world&lt;/h1&gt;`);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);       //设置访问端口号</span><br></pre></td></tr></table></figure><p>命令行进入项目文件夹后，键入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>即已开启服务器，接下来只需在浏览器中运行 <a href="http://localhost:8080/">http://localhost:8080/</a> 就可以访问到服务器得到响应后的数据</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫总结笔记</title>
      <link href="/archives/7e878b19.html"/>
      <url>/archives/7e878b19.html</url>
      
        <content type="html"><![CDATA[<p>这段时间对 Node 爬虫进行了一些学习和实战，可以自己爬取一些页面了，这里简单总结一下。</p><h2 id="爬虫介绍"><a href="#爬虫介绍" class="headerlink" title="爬虫介绍"></a>爬虫介绍</h2><p>通过模拟浏览器的请求，服务器就会根据我们的请求返回我们想要的数据，将数据解析出来，并且进行保存。</p><h2 id="爬虫流程"><a href="#爬虫流程" class="headerlink" title="爬虫流程"></a>爬虫流程</h2><h4 id="目标：确定你想要获取的数据"><a href="#目标：确定你想要获取的数据" class="headerlink" title="目标：确定你想要获取的数据"></a>目标：确定你想要获取的数据</h4><ol><li>确定想要的数据在什么页面上（一般详细的数据会在详情页）</li><li>确定在哪些页面可以链接到这些页面（一般分类列表页面会有详情页的链接数据）</li><li>寻找页面之间和数据之间的规律</li></ol><h4 id="分析页面"><a href="#分析页面" class="headerlink" title="分析页面"></a>分析页面</h4><ol><li>获取数据的方式（正则，cherrio）</li><li>分析数据是通过 ajax 请求的数据，还是 html 里自带的数据</li><li>如果是通过 AJAX 请求的数据，那么需要获取 ajax 请求的链接，一般请求到的数据都为 JSON 格式数据，那么就会比较容易解析。</li><li>如何数据在 HTML 里面，那么就用 cherrio 通过选择器将内容选中</li></ol><h4 id="编写单个数据获取的案例"><a href="#编写单个数据获取的案例" class="headerlink" title="编写单个数据获取的案例"></a>编写单个数据获取的案例</h4><ol><li>解析出分类页的链接地址</li><li>解析出列表页的链接地址</li><li>解析出详情页的链接地址</li><li>解析详情页里面想要获取的数据</li><li>将数据进行保存到本地或者是数据库</li></ol><h4 id="如果遇到阻碍进行反爬虫对抗"><a href="#如果遇到阻碍进行反爬虫对抗" class="headerlink" title="如果遇到阻碍进行反爬虫对抗"></a>如果遇到阻碍进行反爬虫对抗</h4><ol><li>User-Agent 是否是正常浏览器的信息</li><li>将请求头设置成跟浏览器一样的内容</li><li>因为爬虫的爬取速度过快，会导致封号。1 那么可以降低速度进行解决，2 可以使用代理进行解决</li><li>如果设置需要凭证，那么可以采用无界浏览器真实模拟。</li></ol><h2 id="请求数据的库"><a href="#请求数据的库" class="headerlink" title="请求数据的库"></a>请求数据的库</h2><p>request，axios：通过库，帮助我们快速实现 HTTP 请求包的打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="title function_">get</span>(</span><br><span class="line">  <span class="string">&#x27;请求地址&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    请求头字段: <span class="string">&#x27;请求头的value值&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    处理返回的内容</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>axios 优势会更明显，前后端通杀，前后端调用的方式一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;请求地址&#x27;</span>, 参数对象).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>axios 获取图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://bit.ly/2mTM3nY&#x27;</span>,</span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  response.<span class="property">data</span>.<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;ada_lovelace.jpg&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>puppeteer:完全模拟浏览器</p><p>打开浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="attr">headless</span>:<span class="literal">true</span>,<span class="comment">//是否是无界面浏览器</span></span><br><span class="line">    <span class="attr">slowMo</span>:<span class="number">250</span>,<span class="comment">//调试时可以减慢操作速度</span></span><br><span class="line">    <span class="attr">defaultViewport</span>:&#123;</span><br><span class="line">        <span class="attr">width</span>:<span class="number">1200</span>,<span class="comment">//设置视窗的宽高</span></span><br><span class="line">        <span class="attr">height</span>:<span class="number">800</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">3000</span>，<span class="comment">//默认超时3秒</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> browser =<span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(options);</span><br></pre></td></tr></table></figure><p>打开新标签页</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br></pre></td></tr></table></figure><p>获取所有浏览器中的页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pages = <span class="keyword">await</span> browser.<span class="title function_">pages</span>()</span><br></pre></td></tr></table></figure><p>关闭浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.<span class="title function_">close</span>()</span><br></pre></td></tr></table></figure><p>将页面跳转至</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="title function_">goto</span>(url)</span><br></pre></td></tr></table></figure><p>获取页面的对象,并进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="keyword">await</span> page.$(selector)</span><br><span class="line"><span class="keyword">let</span> input = <span class="keyword">await</span> page.$(selector)</span><br><span class="line"><span class="comment">//点击按钮</span></span><br><span class="line">btn.<span class="title function_">click</span>()</span><br><span class="line"><span class="comment">//聚焦到输入框</span></span><br><span class="line">input.<span class="title function_">forcus</span>()</span><br></pre></td></tr></table></figure><p>在页面上写入内容或者键盘按键</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">type</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">press</span>(<span class="string">&#x27;ArrowLeft&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">down</span>(<span class="string">&#x27;Shift&#x27;</span>)</span><br></pre></td></tr></table></figure><p>设置鼠标的移动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">down</span>()</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">move</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">mouse</span>.<span class="title function_">up</span>()</span><br></pre></td></tr></table></figure><p>截获页面请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line">page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">request</span>) =&gt;</span> &#123;</span><br><span class="line">  request.<span class="title function_">url</span>() <span class="comment">//可以获取请求的网址，request，包含了所有的请求信息</span></span><br><span class="line">  <span class="keyword">if</span> (你想要的条件) &#123;</span><br><span class="line">    request.<span class="title function_">continue</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    request.<span class="title function_">abort</span>([errorCode])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取浏览器的信息和内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">page.$eval(selector, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;)</span><br><span class="line">page.$$eval(selectors, <span class="function">(<span class="params">items</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> items</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node爬虫 </tag>
            
            <tag> 笔记总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Puppeteer学习笔记</title>
      <link href="/archives/f36d08b9.html"/>
      <url>/archives/f36d08b9.html</url>
      
        <content type="html"><![CDATA[<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><p>对 Puppeteer 进行了一个练习，记录一下笔记代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// puppeteer.launch实例开启浏览器，可以传入一个options对象，可以配置为无界面浏览器，也可以配置为有界面浏览器</span></span><br><span class="line">  <span class="comment">// 无界面浏览器性能更好</span></span><br><span class="line">  <span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="comment">// 设置视窗宽高</span></span><br><span class="line">    <span class="attr">defaultViewport</span>: &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">1920</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">1080</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置为有界面，无界面为true</span></span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 设置每个每个步骤的延迟时间</span></span><br><span class="line">    <span class="attr">slowMo</span>: <span class="number">300</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(options)</span><br><span class="line">  <span class="comment">// 打开新页面</span></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">  <span class="comment">// 访问页面</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://www.dytt8.net/index.htm&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取页面对象</span></span><br><span class="line">  <span class="comment">// elementHandles = await page.$$(&quot;#menu li a&quot;);</span></span><br><span class="line">  <span class="comment">// // 点击页面对象进行跳转</span></span><br><span class="line">  <span class="comment">// elementHandles[2].click()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过表单输入进行搜索</span></span><br><span class="line">  <span class="title class_">InputEle</span> = <span class="keyword">await</span> page.$(<span class="string">&#x27;.searchl .formhue&#x27;</span>)</span><br><span class="line">  <span class="comment">// 让光标聚焦到搜索框</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">InputEle</span>.<span class="title function_">focus</span>()</span><br><span class="line">  <span class="comment">// 在搜索框输入内容</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">type</span>(<span class="string">&#x27;蝙蝠侠&#x27;</span>)</span><br><span class="line">  <span class="comment">// 添加一个绑定事件来取消掉点击时候触发广告</span></span><br><span class="line">  <span class="keyword">await</span> page.$eval(<span class="string">&#x27;.bd3rl .search&#x27;</span>, <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> (event.<span class="property">cancelBubble</span> = <span class="literal">true</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 点击按钮搜索</span></span><br><span class="line">  <span class="keyword">let</span> btn = <span class="keyword">await</span> page.$(<span class="string">&#x27;.searchr input[name = &quot;Submit&quot;]&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> btn.<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// 截屏</span></span><br><span class="line">  <span class="comment">// await page.screenshot(&#123;path:&#x27;screenshot.png&#x27;&#125;)</span></span><br><span class="line">  <span class="comment">// $$eval函数使我们的回调函数可以运行在浏览器中,并且可以通过浏览器的方式进行输出</span></span><br><span class="line">  <span class="comment">// let elements =await page.$$eval(&#x27;#menu li a&#x27;,(elements) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   // 创建一个数组收集元素的信息，这里收集的是地址和url</span></span><br><span class="line">  <span class="comment">//   let eles = []</span></span><br><span class="line">  <span class="comment">//   elements.forEach(function(item,i)&#123;</span></span><br><span class="line">  <span class="comment">//     if(item.getAttribute(&#x27;href&#x27;)!=&#x27;#&#x27;)&#123;</span></span><br><span class="line">  <span class="comment">//     var eleObj = &#123;</span></span><br><span class="line">  <span class="comment">//       href: item.getAttribute(&#x27;href&#x27;),</span></span><br><span class="line">  <span class="comment">//       text: item.innerText</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//     eles.push(eleObj)</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//     console.log(eleObj);</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">//   return eles</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="comment">// 浏览器的内容可以监听控制台输出</span></span><br><span class="line">  <span class="comment">// page.on(&#x27;console&#x27;,function(eventMsg)&#123;</span></span><br><span class="line">  <span class="comment">//   // console.log(eventMsg.text());</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="comment">// 打开国内页面</span></span><br><span class="line">  <span class="comment">// let gnPage = await browser.newPage()</span></span><br><span class="line">  <span class="comment">// await gnPage.goto(elements[2].href)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423143733.png" alt="node演示"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423143739.png" alt="node演示"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423143742.png" alt="图片演示"></p><h2 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码"></a>实战代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标：抓取https://sobooks.cc/网站下 所有电子书的书名和下载链接</span></span><br><span class="line"><span class="comment">// 实现思路：</span></span><br><span class="line"><span class="comment">// 1.进入网站，获取整个网站的列表页的页数</span></span><br><span class="line"><span class="comment">// 2.获取列表页所有的连接</span></span><br><span class="line"><span class="comment">// 3.进入每个电子书的详情页获取下载电子书的网盘地址</span></span><br><span class="line"><span class="comment">// 4.将获取的数据保存到book.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标地址：</span></span><br><span class="line"><span class="keyword">let</span> httpUrl = <span class="string">&#x27;https://sobooks.cc/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器</span></span><br><span class="line">;(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 配置options</span></span><br><span class="line">  <span class="keyword">let</span> debugOptions = &#123;</span><br><span class="line">    <span class="comment">// 设置视窗宽高</span></span><br><span class="line">    <span class="attr">defaultViewport</span>: &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">1400</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">720</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置为有界面，无界面为true</span></span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 设置每个每个步骤的延迟时间</span></span><br><span class="line">    <span class="attr">slowMo</span>: <span class="number">300</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> options = &#123; <span class="attr">headless</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="comment">// 启动浏览器</span></span><br><span class="line">  <span class="keyword">let</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(options)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">millSeconds</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功执行延迟函数，延迟时间：&#x27;</span> + millSeconds)</span><br><span class="line">      &#125;, millSeconds)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAllNum</span>(<span class="params">link</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(link)</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 监听请求事件，并对请求进行拦截</span></span><br><span class="line">    page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">interceptedRequest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过URL模块对请求的地址进行解析</span></span><br><span class="line">      <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(interceptedRequest.<span class="title function_">url</span>())</span><br><span class="line">      <span class="keyword">if</span> (urlObj.<span class="property">hostname</span> == <span class="string">&#x27;googleads.g.doubleclick.net&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是谷歌的广告太慢了</span></span><br><span class="line">        interceptedRequest.<span class="title function_">abort</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.<span class="title function_">continue</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取总页数</span></span><br><span class="line">    <span class="keyword">let</span> pageNum = <span class="keyword">await</span> page.$eval(</span><br><span class="line">      <span class="string">&#x27;.pagination li:last-child span&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// let text  = element.innerHTML.split(&#x27; &#x27;)[1]</span></span><br><span class="line">        <span class="keyword">let</span> text = element.<span class="property">innerHTML</span></span><br><span class="line">          .<span class="title function_">substring</span>(<span class="number">1</span>, element.<span class="property">innerHTML</span>.<span class="property">length</span> - <span class="number">2</span>)</span><br><span class="line">          .<span class="title function_">trim</span>()</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> pageNum</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// let pageNum = await getAllNum()</span></span><br><span class="line">  <span class="comment">// console.log(pageNum);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进入列表页</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">pageList</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pageListUrl = <span class="string">&#x27;https://sobooks.cc/page/&#x27;</span> + num</span><br><span class="line">    <span class="comment">// 打开一个新页面</span></span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在新页面中访问列表页地址</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(pageListUrl)</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 监听请求事件，并对请求进行拦截</span></span><br><span class="line">    page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">interceptedRequest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过URL模块对请求的地址进行解析</span></span><br><span class="line">      <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(interceptedRequest.<span class="title function_">url</span>())</span><br><span class="line">      <span class="keyword">if</span> (urlObj.<span class="property">hostname</span> == <span class="string">&#x27;googleads.g.doubleclick.net&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是谷歌的广告太慢了</span></span><br><span class="line">        interceptedRequest.<span class="title function_">abort</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.<span class="title function_">continue</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> arrPage = <span class="keyword">await</span> page.$$eval(</span><br><span class="line">      <span class="string">&#x27;.card .card-item .thumb-img&gt;a&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">elements</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = []</span><br><span class="line">        elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, i</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            <span class="attr">href</span>: element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>),</span><br><span class="line">            <span class="attr">title</span>: element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;title&#x27;</span>),</span><br><span class="line">          &#125;</span><br><span class="line">          arr.<span class="title function_">push</span>(obj)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    page.<span class="title function_">close</span>()</span><br><span class="line">    <span class="comment">// 通过获取的数组的地址和标题请求详情页</span></span><br><span class="line">    arrPage.<span class="title function_">forEach</span>(<span class="keyword">async</span> (pageObj, i) =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">500</span> * i)</span><br><span class="line">      <span class="title function_">getPageInfo</span>(pageObj)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPageInfo</span>(<span class="params">pageObj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(pageObj.<span class="property">href</span>)</span><br><span class="line">    <span class="comment">// 截取谷歌请求</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 监听请求事件，并对请求进行拦截</span></span><br><span class="line">    page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">interceptedRequest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过URL模块对请求的地址进行解析</span></span><br><span class="line">      <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(interceptedRequest.<span class="title function_">url</span>())</span><br><span class="line">      <span class="keyword">if</span> (urlObj.<span class="property">hostname</span> == <span class="string">&#x27;googleads.g.doubleclick.net&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是谷歌的广告太慢了</span></span><br><span class="line">        interceptedRequest.<span class="title function_">abort</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.<span class="title function_">continue</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> eleA = <span class="keyword">await</span> page.$(<span class="string">&#x27;.dltable tr:nth-child(3) a:last-child&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> aHref = <span class="keyword">await</span> eleA.<span class="title function_">getProperty</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    aHref = aHref.<span class="property">_remoteObject</span>.<span class="property">value</span></span><br><span class="line">    aHref = aHref.<span class="title function_">split</span>(<span class="string">&#x27;?url=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">`&#123;\n&quot;title&quot;:&quot;<span class="subst">$&#123;pageObj.title&#125;</span>&quot;,\n&quot;href&quot;:&quot;<span class="subst">$&#123;aHref&#125;</span>&quot;\n&#125;\n`</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;book.txt&#x27;</span>, content, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在写入数据：&#x27;</span> + pageObj.<span class="property">title</span>)</span><br><span class="line">      page.<span class="title function_">close</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">spider</span>(<span class="params">link</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> allPageNum = <span class="keyword">await</span> <span class="title function_">getAllNum</span>(link)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功获取页面总数：&#x27;</span> + allPageNum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= allPageNum; i++) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">4000</span> * i) <span class="comment">// 每个页面延迟3秒</span></span><br><span class="line">      <span class="title function_">pageList</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">spider</span>(httpUrl)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423170716.png" alt="node演示"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> &#123; fsRead, fsWrite, fsDir &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./rw&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="comment">// 目标：下载电子书</span></span><br><span class="line"><span class="comment">// 目标地址：</span></span><br><span class="line"><span class="keyword">let</span> httpUrl = <span class="string">&#x27;https://sobooks.cc/&#x27;</span></span><br><span class="line"><span class="comment">// 浏览器</span></span><br><span class="line">;(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 配置options</span></span><br><span class="line">  <span class="keyword">let</span> debugOptions = &#123;</span><br><span class="line">    <span class="comment">// 设置视窗宽高</span></span><br><span class="line">    <span class="attr">defaultViewport</span>: &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">1400</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">800</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置为有界面，无界面为true</span></span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 设置每个每个步骤的延迟时间</span></span><br><span class="line">    <span class="attr">slowMo</span>: <span class="number">300</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> options = &#123; <span class="attr">headless</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="comment">// 启动浏览器</span></span><br><span class="line">  <span class="keyword">let</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(debugOptions)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">millSeconds</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功执行延迟函数，延迟时间：&#x27;</span> + millSeconds)</span><br><span class="line">      &#125;, millSeconds)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">parseTxt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 读取文本内容</span></span><br><span class="line">    <span class="keyword">let</span> textContent = <span class="keyword">await</span> <span class="title function_">fsRead</span>(<span class="string">&#x27;./book.txt&#x27;</span>)</span><br><span class="line">    <span class="comment">// 正则匹配字符串</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/(\&#123;.*?\&#125;)/gi</span>s</span><br><span class="line">    <span class="keyword">var</span> tempRes</span><br><span class="line">    <span class="keyword">let</span> bookArr = []</span><br><span class="line">    <span class="keyword">while</span> ((tempRes = reg.<span class="title function_">exec</span>(textContent))) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配结果</span></span><br><span class="line">      <span class="keyword">let</span> jsonStr = tempRes[<span class="number">1</span>]</span><br><span class="line">      <span class="comment">// 将字符串解析成对象</span></span><br><span class="line">      <span class="keyword">let</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr)</span><br><span class="line">      <span class="comment">// 获取连接属性</span></span><br><span class="line">      <span class="comment">// let bookHreg = jsonObj.href;</span></span><br><span class="line">      <span class="keyword">await</span> bookArr.<span class="title function_">push</span>(jsonObj)</span><br><span class="line">      <span class="comment">// downloadBook(jsonObj)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bookArr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> bookArr = <span class="keyword">await</span> <span class="title function_">parseTxt</span>()</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">downloadBook</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 根据索引值下载电子书</span></span><br><span class="line">    <span class="keyword">if</span> (index == bookArr.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;下载完成&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> bookObj = bookArr[index]</span><br><span class="line">    index++</span><br><span class="line">    <span class="comment">// 打开新页面下载</span></span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(bookObj.<span class="property">href</span>)</span><br><span class="line">    <span class="comment">// 因为是JS渲染出来的内容，并不是页面请求回来就有的内容，而是js通过ajax访问后台才渲染回来的所以我们需要做一个等待操作</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">waitForSelector</span>(<span class="string">&#x27;#table_files tbody .even a&#x27;</span>, &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="comment">// 找到下载链接对象，</span></span><br><span class="line">    <span class="keyword">let</span> elementAHref = <span class="keyword">await</span> page.$eval(</span><br><span class="line">      <span class="string">&#x27;#table_files tbody .even a&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="title function_">bookLinkPage</span>(elementAHref, bookObj.<span class="property">title</span>)</span><br><span class="line">    page.<span class="title function_">close</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bookLinkPage</span>(<span class="params">link, title</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 监听请求事件，并对请求进行拦截</span></span><br><span class="line">    page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">interceptedRequest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过URL模块对请求的地址进行解析</span></span><br><span class="line">      <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(interceptedRequest.<span class="title function_">url</span>())</span><br><span class="line">      <span class="keyword">if</span> (urlObj.<span class="property">hostname</span> == <span class="string">&#x27;u066.164-ctc-dd.tv002.com&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;截获下载地址：&#x27;</span> + urlObj.<span class="property">href</span>)</span><br><span class="line">        interceptedRequest.<span class="title function_">abort</span>()</span><br><span class="line">        <span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./book/&#x27;</span> + title + <span class="string">&#x27;.epub&#x27;</span>)</span><br><span class="line">        axios.<span class="title function_">get</span>(urlObj.<span class="property">href</span>, &#123; <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">          res.<span class="property">data</span>.<span class="title function_">pipe</span>(ws)</span><br><span class="line">          ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载完成：&#x27;</span> + title)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 下完一本再下另一本</span></span><br><span class="line">        <span class="title function_">downloadBook</span>()</span><br><span class="line">        page.<span class="title function_">close</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.<span class="title function_">continue</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://590m.com&#x27;</span> + link)</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">waitForSelector</span>(<span class="string">&#x27;.btn.btn-outline-secondary.fs--1&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> btn = <span class="keyword">await</span> page.$(<span class="string">&#x27;.btn.btn-outline-secondary.fs--1&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> btn.<span class="title function_">click</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">downloadBook</span>()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>这个下载代码好像还有点问题，主要是有广告页和验证码弹出来。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node爬虫实战</title>
      <link href="/archives/b07ae32c.html"/>
      <url>/archives/b07ae32c.html</url>
      
        <content type="html"><![CDATA[<p>这几天对 Node 编写小爬虫进行了学习，这里记录一下实战的代码。</p><h2 id="爬取网页信息"><a href="#爬取网页信息" class="headerlink" title="爬取网页信息"></a>爬取网页信息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> &#123; fsRead, fsWrite, fsDir &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./rw&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> httpUrl = <span class="string">&#x27;https://www.1905.com/vod/list/n_1_t_1/o3p1.html&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">req</span>(<span class="params">link</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(link).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取起始页面的所有分类地址</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getClassUrl</span>(<span class="params">link</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">req</span>(link)</span><br><span class="line">  <span class="comment">// 解析HTML内容</span></span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/&lt;span class=&quot;search-index-L&quot;&gt;类型(.*?)&lt;div class=&quot;grid-12x&quot;&gt;/gi</span>s</span><br><span class="line">  <span class="keyword">let</span> result = reg.<span class="title function_">exec</span>(data)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// console.log(result);</span></span><br><span class="line">  <span class="keyword">let</span> reg1 = <span class="regexp">/&lt;a href=&quot;javascript\:void\(0\);&quot; onclick=&quot;location\.href=&#x27;(.*?)&#x27;;return false;&quot; .*?&gt;(.*?)&lt;\/a&gt;/gi</span>s</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ((result2 = reg1.<span class="title function_">exec</span>(result))) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result2[<span class="number">2</span>] != <span class="string">&#x27;全部&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">className</span>: result2[<span class="number">2</span>],</span><br><span class="line">        <span class="attr">link</span>: result2[<span class="number">1</span>],</span><br><span class="line">      &#125;</span><br><span class="line">      arr.<span class="title function_">push</span>(obj)</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fsDir</span>(<span class="string">&#x27;./movies/&#x27;</span> + result2[<span class="number">2</span>])</span><br><span class="line">      <span class="title function_">getMovie</span>(result2[<span class="number">1</span>], result2[<span class="number">2</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(arr);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取分类里的电影连接</span></span><br><span class="line"><span class="comment">// 根据电影连接获取电影的详细信息</span></span><br><span class="line"><span class="comment">// 通过分类获取页面中的连接</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getMovie</span>(<span class="params">link, movieType</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">req</span>(link)</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/&lt;a class=&quot;pic-pack-outer&quot; target=&quot;\_blank&quot; href=&quot;(.*?)&quot; .*?&gt;/gi</span>s</span><br><span class="line">  <span class="keyword">var</span> res9</span><br><span class="line">  <span class="keyword">var</span> arrList = []</span><br><span class="line">  <span class="keyword">while</span> ((res9 = reg.<span class="title function_">exec</span>(data))) &#123;</span><br><span class="line">    arrList.<span class="title function_">push</span>(res9[<span class="number">1</span>])</span><br><span class="line">    <span class="title function_">parsePage</span>(res9[<span class="number">1</span>], movieType)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(&quot;分类：&quot; + movieType);</span></span><br><span class="line">  <span class="comment">// console.log(arrList);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">parsePage</span>(<span class="params">url, movieType</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(url);</span></span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">req</span>(url)</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/&lt;h1 class=&quot;playerBox-info-name playerBox-info-cnName&quot;&gt;(.*?)&lt;\/h1&gt;.*?id=&quot;playerBoxIntroCon&quot;&gt;(.*?)&lt;a .*?导演.*?data-hrefexp=&quot;fr=vodplay\_ypzl\_dy&quot;&gt;(.*?)&lt;\/a&gt;/gi</span>s</span><br><span class="line">  <span class="keyword">let</span> res3 = reg.<span class="title function_">exec</span>(data)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">let</span> movie = &#123;</span><br><span class="line">    <span class="attr">name</span>: res3[<span class="number">1</span>],</span><br><span class="line">    <span class="attr">brief</span>: res3[<span class="number">2</span>],</span><br><span class="line">    <span class="attr">daoyan</span>: res3[<span class="number">3</span>],</span><br><span class="line">    <span class="attr">movieUrl</span>: url,</span><br><span class="line">    movieType,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(movie)</span><br><span class="line">  <span class="title function_">fsWrite</span>(<span class="string">&#x27;./movies/&#x27;</span> + movieType + <span class="string">&#x27;/&#x27;</span> + res3[<span class="number">1</span>] + <span class="string">&#x27;json&#x27;</span>, str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getClassUrl</span>(httpUrl)</span><br></pre></td></tr></table></figure><h2 id="爬取表情包"><a href="#爬取表情包" class="headerlink" title="爬取表情包"></a>爬取表情包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 将延迟函数封装成promise对象（防止请求速度过快下载失败）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">millSeconds</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;成功执行延迟函数，延迟时间：&#x27;</span> + millSeconds)</span><br><span class="line">    &#125;, millSeconds)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取HTML文档的内容</span></span><br><span class="line"><span class="comment">// 获取页面总数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">pageNum</span>(<span class="params">link</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(link)</span><br><span class="line">  <span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(res.<span class="property">data</span>)</span><br><span class="line">  <span class="keyword">let</span> btnLength = $(<span class="string">&#x27;.pagination li&#x27;</span>).<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> allNum = $(<span class="string">&#x27;.pagination li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">eq</span>(btnLength - <span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    .<span class="title function_">text</span>()</span><br><span class="line">  <span class="keyword">return</span> allNum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取页面</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getListPage</span>(<span class="params">pageNum</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> httpUrl = <span class="string">`https://www.doutula.com/article/list/?page=<span class="subst">$&#123;pageNum&#125;</span>`</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(httpUrl)</span><br><span class="line">  <span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(res.<span class="property">data</span>)</span><br><span class="line">  $(<span class="string">&#x27;#home .col-sm-9&gt;a&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">i, element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pageUrl = $(element).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> title = $(element).<span class="title function_">find</span>(<span class="string">&#x27;.random_title&#x27;</span>).<span class="title function_">text</span>()</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/(.*?)\d/gi</span>s</span><br><span class="line">    title = reg.<span class="title function_">exec</span>(title)[<span class="number">1</span>]</span><br><span class="line">    fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./img/&#x27;</span> + title, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建：&#x27;</span> + <span class="string">&#x27;./img/&#x27;</span> + title)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">parsePage</span>(pageUrl, title)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进入表情包页面</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">parsePage</span>(<span class="params">link, title</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(link)</span><br><span class="line">  <span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(res.<span class="property">data</span>)</span><br><span class="line">  $(<span class="string">&#x27;.pic-content img&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">i, element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> imgUrl = $(element).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> b = url.<span class="title function_">parse</span>(imgUrl)</span><br><span class="line">    <span class="keyword">let</span> name = path.<span class="title function_">parse</span>(b.<span class="property">pathname</span>)</span><br><span class="line">    <span class="comment">// 创建路径名字</span></span><br><span class="line">    <span class="keyword">let</span> filePath = <span class="string">`./img/<span class="subst">$&#123;title&#125;</span>/<span class="subst">$&#123;name.base&#125;</span>/`</span></span><br><span class="line">    <span class="comment">// 创建写入流</span></span><br><span class="line">    <span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(filePath.<span class="title function_">trim</span>())</span><br><span class="line">    axios.<span class="title function_">get</span>(imgUrl, &#123; <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      res.<span class="property">data</span>.<span class="title function_">pipe</span>(ws)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在下载表情：&#x27;</span> + filePath)</span><br><span class="line">      <span class="comment">// 监听事件，关闭写入流</span></span><br><span class="line">      res.<span class="property">data</span>.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> ws.<span class="title function_">close</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始爬取所有页面</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">spider</span>(<span class="params">link</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> allPageNum = <span class="keyword">await</span> <span class="title function_">pageNum</span>(link)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= allPageNum; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">4000</span> * i) <span class="comment">// 每个页面延迟3秒</span></span><br><span class="line">    <span class="title function_">getListPage</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">spider</span>(<span class="string">&#x27;https://www.doutula.com/article/list/?page=1&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="爬取音乐"><a href="#爬取音乐" class="headerlink" title="爬取音乐"></a>爬取音乐</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 目标：下载音乐</span></span><br><span class="line"><span class="comment">// 1.获取音乐相关的信息，通过信息获取下载地址</span></span><br><span class="line"><span class="comment">// 2.通过获取音乐列表获取音乐信息</span></span><br><span class="line"><span class="comment">// 3.通过音乐的分类页获取音乐列表</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPage</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> httpUrl = <span class="string">&#x27;http://www.app-echo.com/api/recommend/sound-day?page=&#x27;</span> + num</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(httpUrl)</span><br><span class="line">  <span class="comment">// console.log(res.data.list);</span></span><br><span class="line">  <span class="keyword">let</span> list = res.<span class="property">data</span>.<span class="property">list</span></span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, i</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> title = item.<span class="property">sound</span>.<span class="property">name</span></span><br><span class="line">    <span class="keyword">let</span> musicUrl = item.<span class="property">sound</span>.<span class="property">source</span></span><br><span class="line">    <span class="keyword">let</span> fileName = path.<span class="title function_">parse</span>(musicUrl).<span class="property">name</span></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">`<span class="subst">$&#123;title&#125;</span>,<span class="subst">$&#123;musicUrl&#125;</span>.<span class="subst">$&#123;fileName&#125;</span>\n`</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;music.txt&#x27;</span>, content, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;写入完成:&#x27;+ title);</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// console.log(path.parse(musicUrl));</span></span><br><span class="line">    <span class="title function_">download</span>(musicUrl, fileName)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">link, fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(link, &#123; <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./music/&#x27;</span> + fileName + <span class="string">&#x27;.mp3&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  res.<span class="property">data</span>.<span class="title function_">pipe</span>(ws)</span><br><span class="line">  res.<span class="property">data</span>.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    ws.<span class="title function_">close</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 爬一页意思一下就行了</span></span><br><span class="line"><span class="title function_">getPage</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="心得总结"><a href="#心得总结" class="headerlink" title="心得总结"></a>心得总结</h2><p>编写爬虫主要是通过 <code>axios</code> 来进行发送请求，在这个过程中，我们要分析网页结构，和网站信息，来提取我们需要的信息，进行一个爬取。在这个过程中，大部分都是异步完成的，要记得加 <code>await</code> 。</p><p>在没有 <code>cheerio</code> 模块的时候，我们通过正则匹配来进行抓取，有了 <code>cheerio</code> 模块我们可以像使用 <code>jquery</code> 一样方便的来获取页面中的元素。</p><p>当然过程中也使用了 Node 的一些核心模块，包括 url 的解析，path 路径的解析，文件的读写，还有 <code>stream</code> 的操作等等，这次爬虫的小实战，也算是对前几天的学习的一个综合运用。</p><p>妈妈再也不用担心斗图斗不过别人啦！</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423134324.png" alt="爬取表情包"></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node爬虫 </tag>
            
            <tag> 实战代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Puppeteer的入门教程和实践</title>
      <link href="/archives/8737131e.html"/>
      <url>/archives/8737131e.html</url>
      
        <content type="html"><![CDATA[<h2 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h2><h4 id="出现的背景"><a href="#出现的背景" class="headerlink" title="出现的背景"></a>出现的背景</h4><p>Chrome59(linux、macos)、 Chrome60(windows)之后，Chrome 自带<a href="https://developers.google.com/web/updates/2017/04/headless-chrome">headless(无界面)模式</a>很方便做自动化测试或者爬虫。但是如何和 headless 模式的 Chrome 交互则是一个问题。通过启动 Chrome 时的命令行参数仅能实现简易的启动时初始化操作。Selenium、Webdriver 等是一种解决方案，但是往往依赖众多，不够扁平。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200422204027.png" alt="Puppeteer"></p><p>Puppeteer 是谷歌官方出品的一个通过 DevTools 协议控制 headless Chrome 的 Node 库。可以通过 Puppeteer 的提供的 api 直接控制 Chrome 模拟大部分用户操作来进行 UI Test 或者作为爬虫访问页面来收集数据。</p><p><a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/#/">中文文档</a></p><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><ul><li>生成页面 PDF。</li><li>抓取 SPA（单页应用）并生成预渲染内容。</li><li>自动提交表单，进行 UI 测试，键盘输入等。</li><li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的 Chrome 中执行测试。</li><li>捕获网站的 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference">timeline trace</a>，用来帮助分析性能问题。</li><li>测试浏览器扩展。</li></ul><h4 id="环境和安装"><a href="#环境和安装" class="headerlink" title="环境和安装"></a>环境和安装</h4><p>Puppeteer 本身依赖 6.4 以上的 Node，但是为了异步超级好用的<a href="http://es6.ruanyifeng.com/#docs/async">async/await</a>，推荐使用 7.6 版本以上的 Node。另外 headless Chrome 本身对服务器依赖的库的版本要求比较高，centos 服务器依赖偏稳定，v6 很难使用 headless Chrome，提升依赖版本可能出现各种服务器问题（包括且不限于无法使用 ssh），最好使用高版本服务器。</p><p>Puppeteer 因为是一个 npm 的包，所以安装很简单：</p><blockquote><p>npm i puppeteer</p></blockquote><p>或者</p><blockquote><p>yarn add puppeteer</p></blockquote><p>Puppeteer 安装时自带一个最新版本的 Chromium，可以通过设置环境变量或者 npm config 中的 PUPPETEER_SKIP_CHROMIUM_DOWNLOAD 跳过下载。如果不下载的话，启动时可以通过 puppeteer.launch([options])配置项中的 executablePath 指定 Chromium 的位置。</p><h4 id="使用和例子"><a href="#使用和例子" class="headerlink" title="使用和例子"></a>使用和例子</h4><p>Puppeteer 类似其他框架，通过操作 Browser 实例来操作浏览器作出相应的反应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require(&#x27;puppeteer&#x27;);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  const browser = await puppeteer.launch();</span><br><span class="line">  const page = await browser.newPage();</span><br><span class="line">  await page.goto(&#x27;http://rennaiqian.com&#x27;);</span><br><span class="line">  await page.screenshot(&#123;path: &#x27;example.png&#x27;&#125;);</span><br><span class="line">  await page.pdf(&#123;path: &#x27;example.pdf&#x27;, format: &#x27;A4&#x27;&#125;);</span><br><span class="line">  await browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>上述代码通过 puppeteer 的 launch 方法生成了一个 browser 的实例，对应于浏览器，launch 方法可以传入配置项，比较有用的是在本地调试时传入{headless:false}可以关闭 headless 模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const browser = await puppeteer.launch(&#123;headless:false&#125;)</span><br></pre></td></tr></table></figure><p>browser.newPage 方法可以打开一个新选项卡并返回选项卡的实例 page，通过 page 上的各种方法可以对页面进行常用操作。上述代码就进行了截屏和打印 pdf 的操作。</p><p>一个很强大的方法是 page.evaluate(pageFunction, …args)，可以向页面注入我们的函数，这样就有了无限可能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require(&#x27;puppeteer&#x27;);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  const browser = await puppeteer.launch();</span><br><span class="line">  const page = await browser.newPage();</span><br><span class="line">  await page.goto(&#x27;http://rennaiqian.com&#x27;);</span><br><span class="line"></span><br><span class="line">  // Get the &quot;viewport&quot; of the page, as reported by the page.</span><br><span class="line">  const dimensions = await page.evaluate(() =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      width: document.documentElement.clientWidth,</span><br><span class="line">      height: document.documentElement.clientHeight,</span><br><span class="line">      deviceScaleFactor: window.devicePixelRatio</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  console.log(&#x27;Dimensions:&#x27;, dimensions);</span><br><span class="line">  await browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>需要注意的是 evaluate 方法中是无法直接使用外部的变量的，需要作为参数传入，想要获得执行的结果也需要 return 出来。因为是一个开源一个多月的项目，现在项目很活跃，所以使用时自行查找<a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md">api</a>才能保证参数、使用方法不会错。</p><h4 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h4><ol><li>关掉无界面模式，有时查看浏览器显示的内容是很有用的。使用以下命令可以启动完整版浏览器：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const browser = await puppeteer.launch(&#123;headless: false&#125;)</span><br></pre></td></tr></table></figure><ol><li>减慢速度，slowMo 选项以指定的毫秒减慢 Puppeteer 的操作。这是另一个看到发生了什么的方法：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const browser = await puppeteer.launch(&#123;</span><br><span class="line">  headless:false,</span><br><span class="line">  slowMo:250</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.捕获 console 的输出,通过监听 console 事件。在 page.evaluate 里调试代码时这也很方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page.on(&#x27;console&#x27;, msg =&gt; console.log(&#x27;PAGE LOG:&#x27;, ...msg.args));</span><br><span class="line">await page.evaluate(() =&gt; console.log(`url is $&#123;location.href&#125;`));</span><br></pre></td></tr></table></figure><p>4.启动详细日志记录，所有公共 API 调用和内部协议流量都将通过 puppeteer 命名空间下的 debug 模块进行记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Basic verbose logging</span><br><span class="line"> env DEBUG=&quot;puppeteer:*&quot; node script.js</span><br><span class="line"> # Debug output can be enabled/disabled by namespace</span><br><span class="line"> env DEBUG=&quot;puppeteer:*,-puppeteer:protocol&quot; node script.js # everything BUT protocol messages</span><br><span class="line"> env DEBUG=&quot;puppeteer:session&quot; node script.js # protocol session messages (protocol messages to targets)</span><br><span class="line"> env DEBUG=&quot;puppeteer:mouse,puppeteer:keyboard&quot; node script.js # only Mouse and Keyboard API calls</span><br><span class="line"> # Protocol traffic can be rather noisy. This example filters out all Network domain messages</span><br><span class="line"> env DEBUG=&quot;puppeteer:*&quot; env DEBUG_COLORS=true node script.js 2&gt;&amp;1 | grep -v &#x27;&quot;Network&#x27;</span><br></pre></td></tr></table></figure><h4 id="爬虫实践"><a href="#爬虫实践" class="headerlink" title="爬虫实践"></a>爬虫实践</h4><p>很多网页通过 user-agent 来判断设备，可以通过 page.emulate(options)来进行模拟。options 有两个配置项，一个为 userAgent，另一个为 viewport 可以设置宽度(width)、高度(height)、屏幕缩放(deviceScaleFactor)、是否是移动端(isMobile)、有无 touch 事件(hasTouch)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require(&#x27;puppeteer&#x27;);</span><br><span class="line">const devices = require(&#x27;puppeteer/DeviceDescriptors&#x27;);</span><br><span class="line">const iPhone = devices[&#x27;iPhone 6&#x27;];</span><br><span class="line"></span><br><span class="line">puppeteer.launch().then(async browser =&gt; &#123;</span><br><span class="line">  const page = await browser.newPage();</span><br><span class="line">  await page.emulate(iPhone);</span><br><span class="line">  await page.goto(&#x27;https://www.example.com&#x27;);</span><br><span class="line">  // other actions...</span><br><span class="line">  await browser.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述代码则模拟了 iPhone6 访问某网站，其中 devices 是 puppeteer 内置的一些常见设备的模拟参数。</p><p>很多网页需要登录，有两种解决方案：</p><ol><li>让 puppeteer 去输入账号密码 常用方法：点击可以使用 page.click(selector[, options])方法，也可以选择聚焦 page.focus(selector)。 输入可以使用 page.type(selector, text[, options])输入指定的字符串，还可以在 options 中设置 delay 缓慢输入更像真人一些。也可以使用 keyboard.down(key[, options])来一个字符一个字符的输入。</li><li>如果是通过 cookie 判断登录状态的可以通过 page.setCookie(…cookies)，想要维持 cookie 可以定时访问。</li></ol><p><strong>Tip：有些网站需要扫码，但是相同域名的其他网页却有登录，就可以尝试去可以登录的网页登录完利用 cookie 访问跳过扫码。</strong></p><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require(&#x27;puppeteer&#x27;);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  const browser = await puppeteer.launch(&#123;headless: false&#125;);</span><br><span class="line">  const page = await browser.newPage();</span><br><span class="line">  await page.goto(&#x27;https://baidu.com&#x27;);</span><br><span class="line">  await page.type(&#x27;#kw&#x27;, &#x27;puppeteer&#x27;, &#123;delay: 100&#125;);</span><br><span class="line">  page.click(&#x27;#su&#x27;)</span><br><span class="line">  await page.waitFor(1000);</span><br><span class="line">  const targetLink = await page.evaluate(() =&gt; &#123;</span><br><span class="line">    return [...document.querySelectorAll(&#x27;.result a&#x27;)].filter(item =&gt; &#123;</span><br><span class="line">      return item.innerText &amp;&amp; item.innerText.includes(&#x27;Puppeteer的入门和实践&#x27;)</span><br><span class="line">    &#125;).toString()</span><br><span class="line">  &#125;);</span><br><span class="line">  await page.goto(targetLink);</span><br><span class="line">  await page.waitFor(1000);</span><br><span class="line">  browser.close();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200422205218.png" alt="code"></p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://www.jianshu.com/p/2f04f9d665ce">Puppeteer 的入门教程和实践</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node爬取数据到数据库练习</title>
      <link href="/archives/1567847a.html"/>
      <url>/archives/1567847a.html</url>
      
        <content type="html"><![CDATA[<p>这里爬取了一个 api 接口里面的所有数据到本地。</p><h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h2><p>建表：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200428164045.png" alt="image-20200428164044158"></p><p>字段：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200428164400.png" alt="image-20200428164359391"></p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><p>请求 <code>axios</code> <code>mysql</code> 模块需要先 <code>npm install</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// *********************************//</span></span><br><span class="line"><span class="comment">// ******** 封装网络请求 ************//</span></span><br><span class="line"><span class="comment">// *********************************//</span></span><br><span class="line"><span class="comment">// 数据请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://XXXXXXXXXXXXXX&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">instance</span>(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取首页数据：multidata，data</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHomeMultidata</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/multidata&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHomeGoods</span>(<span class="params">type, page</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      type,</span><br><span class="line">      page,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取详情页数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDetail</span>(<span class="params">iid</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/detail&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      iid,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRecommend</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/recommend&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取分类页数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCategory</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSubcategory</span>(<span class="params">maitKey</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/subcategory&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      maitKey,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCategoryDetail</span>(<span class="params">miniWallkey, type</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/subcategory/detail&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      miniWallkey,</span><br><span class="line">      type,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待函数,防止访问速度过快造成的数据读取失败</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">millSeconds</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;成功执行延迟函数，延迟时间：&#x27;</span> + millSeconds)</span><br><span class="line">    &#125;, millSeconds)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// *********************************//</span></span><br><span class="line"><span class="comment">// ********** 连接数据库 ************//</span></span><br><span class="line"><span class="comment">// *********************************//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sqlOptions = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;mall&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> con = mysql.<span class="title function_">createConnection</span>(sqlOptions)</span><br><span class="line">con.<span class="title function_">connect</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// *********************************//</span></span><br><span class="line"><span class="comment">// ********* 开始爬取数据 ***********//</span></span><br><span class="line"><span class="comment">// *********************************//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 爬取首页Multidata数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">homeMultidata</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getHomeMultidata</span>()</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">  <span class="comment">// 写入数据</span></span><br><span class="line">  <span class="keyword">let</span> srtSql = <span class="string">&#x27;insert into home_multidata (data) values (?)&#x27;</span></span><br><span class="line">  con.<span class="title function_">query</span>(srtSql, data, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 爬取首页data数据，因为三个分类（pop.sell，new）存在页数不同的问题，这里我分成2个函数来写，本来想加个判断的，这样能用，就先这样写着吧</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">homeDataPop</span>(<span class="params">thisType</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环一下页数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> page = <span class="number">1</span>; page &lt;= <span class="number">50</span>; page++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * page)</span><br><span class="line">    <span class="keyword">let</span> type = thisType</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getHomeGoods</span>(type, page)</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="keyword">let</span> arr = [type, page, data]</span><br><span class="line">    <span class="keyword">let</span> srtSql = <span class="string">&#x27;insert into home_data (type,page,data) values (?,?,?)&#x27;</span></span><br><span class="line">    con.<span class="title function_">query</span>(srtSql, arr, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(type + <span class="string">&#x27;，第&#x27;</span> + page + <span class="string">&#x27;页，数据写入成功&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">homeDataSell</span>(<span class="params">sell</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环一下页数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> page = <span class="number">1</span>; page &lt;= <span class="number">20</span>; page++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * page)</span><br><span class="line">    <span class="keyword">let</span> type = sell</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getHomeGoods</span>(type, page)</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="keyword">let</span> arr = [type, page, data]</span><br><span class="line">    <span class="keyword">let</span> srtSql = <span class="string">&#x27;insert into home_data (type,page,data) values (?,?,?)&#x27;</span></span><br><span class="line">    con.<span class="title function_">query</span>(srtSql, arr, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(type + <span class="string">&#x27;，第&#x27;</span> + page + <span class="string">&#x27;页，数据写入成功&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取detail详情页的数据，还是分开来写，里面好像有很多重复的数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">detailDataPop</span>(<span class="params">thisType</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环一下页数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> page = <span class="number">1</span>; page &lt;= <span class="number">50</span>; page++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * page)</span><br><span class="line">    <span class="keyword">let</span> type = thisType</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getHomeGoods</span>(type, page)</span><br><span class="line">    <span class="keyword">let</span> iidList = res.<span class="property">data</span>.<span class="property">list</span></span><br><span class="line">    iidList.<span class="title function_">forEach</span>(<span class="keyword">async</span> (item, i) =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * i)</span><br><span class="line">      <span class="keyword">let</span> iid = item.<span class="property">iid</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getDetail</span>(iid)</span><br><span class="line">      <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">      <span class="keyword">let</span> arr = [iid, data]</span><br><span class="line">      <span class="keyword">let</span> srtSql = <span class="string">&#x27;insert into detail (iid,data) values (?,?)&#x27;</span></span><br><span class="line">      con.<span class="title function_">query</span>(srtSql, arr, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(iid + <span class="string">&#x27;，数据写入成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">detailDataSell</span>(<span class="params">sell</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环一下页数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> page = <span class="number">1</span>; page &lt;= <span class="number">20</span>; page++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * page)</span><br><span class="line">    <span class="keyword">let</span> type = sell</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getHomeGoods</span>(type, page)</span><br><span class="line">    <span class="keyword">let</span> iidList = res.<span class="property">data</span>.<span class="property">list</span></span><br><span class="line">    iidList.<span class="title function_">forEach</span>(<span class="keyword">async</span> (item, i) =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * i)</span><br><span class="line">      <span class="keyword">let</span> iid = item.<span class="property">iid</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getDetail</span>(iid)</span><br><span class="line">      <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">      <span class="keyword">let</span> arr = [iid, data]</span><br><span class="line">      <span class="keyword">let</span> srtSql = <span class="string">&#x27;insert into detail (iid,data) values (?,?)&#x27;</span></span><br><span class="line">      con.<span class="title function_">query</span>(srtSql, arr, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(iid + <span class="string">&#x27;，数据写入成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取recommend数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">recommendData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getRecommend</span>()</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">  <span class="comment">// 写入数据</span></span><br><span class="line">  <span class="keyword">let</span> srtSql = <span class="string">&#x27;insert into recommend (data) values (?)&#x27;</span></span><br><span class="line">  con.<span class="title function_">query</span>(srtSql, data, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取分类页数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">categoryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getCategory</span>()</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">  <span class="comment">// 写入数据</span></span><br><span class="line">  <span class="keyword">let</span> srtSql = <span class="string">&#x27;insert into category (data) values (?)&#x27;</span></span><br><span class="line">  con.<span class="title function_">query</span>(srtSql, data, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取Subcategory数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">subcategoryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getCategory</span>()</span><br><span class="line">  <span class="keyword">let</span> list = res.<span class="property">data</span>.<span class="property">category</span>.<span class="property">list</span></span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="keyword">async</span> (item, i) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * i)</span><br><span class="line">    <span class="keyword">let</span> maitKey = item.<span class="property">maitKey</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getSubcategory</span>(maitKey)</span><br><span class="line">    <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">    <span class="keyword">let</span> arr = [maitKey, data]</span><br><span class="line">    <span class="keyword">let</span> srtSql = <span class="string">&#x27;insert into subcategory (maitKey,data) values (?,?)&#x27;</span></span><br><span class="line">    con.<span class="title function_">query</span>(srtSql, arr, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(maitKey + <span class="string">&#x27;，数据写入成功&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取CategoryDetail数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">categoryDetailData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getCategory</span>()</span><br><span class="line">  <span class="keyword">let</span> list = res.<span class="property">data</span>.<span class="property">category</span>.<span class="property">list</span></span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="keyword">async</span> (item, i) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * i)</span><br><span class="line">    <span class="keyword">let</span> miniWallkey = item.<span class="property">miniWallkey</span></span><br><span class="line">    <span class="keyword">let</span> types = [<span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;sell&#x27;</span>]</span><br><span class="line">    types.<span class="title function_">forEach</span>(<span class="keyword">async</span> (type, i) =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">200</span> * i)</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getCategoryDetail</span>(miniWallkey, type)</span><br><span class="line">      <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res)</span><br><span class="line">      <span class="keyword">let</span> arr = [miniWallkey, type, data]</span><br><span class="line">      <span class="keyword">let</span> srtSql =</span><br><span class="line">        <span class="string">&#x27;insert into subcategory_detail (miniWallkey,type,data) values (?,?,?)&#x27;</span></span><br><span class="line">      con.<span class="title function_">query</span>(srtSql, arr, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息：&#x27;</span> + err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(miniWallkey + <span class="string">&#x27;，数据写入成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全部写入完成&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 爬取数据</span></span><br><span class="line"><span class="comment">// homeMultidata()</span></span><br><span class="line"><span class="comment">// homeDataPop(&#x27;pop&#x27;)</span></span><br><span class="line"><span class="comment">// homeDataPop(&#x27;new&#x27;)</span></span><br><span class="line"><span class="comment">// homeDataSell(&#x27;sell&#x27;)</span></span><br><span class="line"><span class="comment">// detailDataPop(&#x27;pop&#x27;)</span></span><br><span class="line"><span class="comment">// detailDataPop(&#x27;new&#x27;)</span></span><br><span class="line"><span class="comment">// detailDataSell(&#x27;sell&#x27;)</span></span><br><span class="line"><span class="comment">// recommendData()</span></span><br><span class="line"><span class="comment">// categoryData()</span></span><br><span class="line"><span class="comment">// subcategoryData()</span></span><br><span class="line"><span class="comment">// categoryDetailData()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> Node </category>
          
          <category> Node爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node爬虫 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node爬取数据到数据库实战代码笔记</title>
      <link href="/archives/1212afb3.html"/>
      <url>/archives/1212afb3.html</url>
      
        <content type="html"><![CDATA[<p>这个网站有反爬机制，使用 axios 请求直接返回 403，用 puppeteer 爬取也会很快就给你报超时，我就爬取了 80 多条数据，就请求不下来了。这里记录一下我的代码,基本和之前的代码差不多，只是多做了一些处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标：抓取https://sobooks.cc/网站下 所有电子书的书名和下载链接</span></span><br><span class="line"><span class="comment">// 实现思路：</span></span><br><span class="line"><span class="comment">// 1.进入网站，获取整个网站的列表页的页数</span></span><br><span class="line"><span class="comment">// 2.获取列表页所有的连接</span></span><br><span class="line"><span class="comment">// 3.进入每个电子书的详情页获取下载电子书的网盘地址</span></span><br><span class="line"><span class="comment">// 4.将获取的数据保存到book.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标地址：</span></span><br><span class="line"><span class="keyword">let</span> httpUrl = <span class="string">&#x27;https://sobooks.cc/&#x27;</span></span><br><span class="line"><span class="keyword">let</span> sqlOptions = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;book&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> con = mysql.<span class="title function_">createConnection</span>(sqlOptions)</span><br><span class="line">con.<span class="title function_">connect</span>()</span><br><span class="line"><span class="comment">// 浏览器</span></span><br><span class="line">;(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 配置options</span></span><br><span class="line">  <span class="keyword">let</span> debugOptions = &#123;</span><br><span class="line">    <span class="comment">// 设置视窗宽高</span></span><br><span class="line">    <span class="attr">defaultViewport</span>: &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">1400</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">720</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置为有界面，无界面为true</span></span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 设置每个每个步骤的延迟时间</span></span><br><span class="line">    <span class="attr">slowMo</span>: <span class="number">300</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> options = &#123; <span class="attr">headless</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="comment">// 启动浏览器</span></span><br><span class="line">  <span class="keyword">let</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(options)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">millSeconds</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功执行延迟函数，延迟时间：&#x27;</span> + millSeconds)</span><br><span class="line">      &#125;, millSeconds)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAllNum</span>(<span class="params">link</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(link)</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 监听请求事件，并对请求进行拦截</span></span><br><span class="line">    page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">interceptedRequest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过URL模块对请求的地址进行解析</span></span><br><span class="line">      <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(interceptedRequest.<span class="title function_">url</span>())</span><br><span class="line">      <span class="keyword">if</span> (urlObj.<span class="property">hostname</span> == <span class="string">&#x27;googleads.g.doubleclick.net&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是谷歌的广告太慢了</span></span><br><span class="line">        interceptedRequest.<span class="title function_">abort</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.<span class="title function_">continue</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取总页数</span></span><br><span class="line">    <span class="keyword">let</span> pageNum = <span class="keyword">await</span> page.$eval(</span><br><span class="line">      <span class="string">&#x27;.pagination li:last-child span&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> text = element.<span class="property">innerHTML</span></span><br><span class="line">          .<span class="title function_">substring</span>(<span class="number">1</span>, element.<span class="property">innerHTML</span>.<span class="property">length</span> - <span class="number">2</span>)</span><br><span class="line">          .<span class="title function_">trim</span>()</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> pageNum</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进入列表页</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">pageList</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pageListUrl = <span class="string">&#x27;https://sobooks.cc/page/&#x27;</span> + num</span><br><span class="line">    <span class="comment">// 打开一个新页面</span></span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="comment">// 在新页面中访问列表页地址</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(pageListUrl)</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 监听请求事件，并对请求进行拦截</span></span><br><span class="line">    page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">interceptedRequest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过URL模块对请求的地址进行解析</span></span><br><span class="line">      <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(interceptedRequest.<span class="title function_">url</span>())</span><br><span class="line">      <span class="keyword">if</span> (urlObj.<span class="property">hostname</span> == <span class="string">&#x27;googleads.g.doubleclick.net&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是谷歌的广告太慢了</span></span><br><span class="line">        interceptedRequest.<span class="title function_">abort</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.<span class="title function_">continue</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> arrPage = <span class="keyword">await</span> page.$$eval(</span><br><span class="line">      <span class="string">&#x27;.card .card-item .thumb-img&gt;a&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">elements</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = []</span><br><span class="line">        elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, i</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            <span class="attr">href</span>: element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>),</span><br><span class="line">            <span class="attr">title</span>: element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;title&#x27;</span>),</span><br><span class="line">          &#125;</span><br><span class="line">          arr.<span class="title function_">push</span>(obj)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    page.<span class="title function_">close</span>()</span><br><span class="line">    <span class="comment">// 通过获取的数组的地址和标题请求详情页</span></span><br><span class="line">    arrPage.<span class="title function_">forEach</span>(<span class="keyword">async</span> (pageObj, i) =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">500</span> * i)</span><br><span class="line">      <span class="title function_">getPageInfo</span>(pageObj)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPageInfo</span>(<span class="params">pageObj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(pageObj.<span class="property">href</span>)</span><br><span class="line">    <span class="comment">// 截取谷歌请求</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setRequestInterception</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 监听请求事件，并对请求进行拦截</span></span><br><span class="line">    page.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">interceptedRequest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过URL模块对请求的地址进行解析</span></span><br><span class="line">      <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(interceptedRequest.<span class="title function_">url</span>())</span><br><span class="line">      <span class="keyword">if</span> (urlObj.<span class="property">hostname</span> == <span class="string">&#x27;googleads.g.doubleclick.net&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是谷歌的广告太慢了</span></span><br><span class="line">        interceptedRequest.<span class="title function_">abort</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.<span class="title function_">continue</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> eleA = <span class="keyword">await</span> page.$(<span class="string">&#x27;.dltable tr:nth-child(3) a:last-child&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> aHref = <span class="keyword">await</span> eleA.<span class="title function_">getProperty</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    aHref = aHref.<span class="property">_remoteObject</span>.<span class="property">value</span></span><br><span class="line">    <span class="comment">// 书籍链接地址</span></span><br><span class="line">    <span class="keyword">let</span> bookUrl = pageObj.<span class="property">href</span></span><br><span class="line">    <span class="comment">// 书籍下载地址</span></span><br><span class="line">    <span class="keyword">let</span> download = aHref.<span class="title function_">split</span>(<span class="string">&#x27;?url=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 书籍名字</span></span><br><span class="line">    <span class="keyword">let</span> bookname = pageObj.<span class="property">title</span></span><br><span class="line">    <span class="comment">// 分类</span></span><br><span class="line">    <span class="keyword">let</span> cataory = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;.meta .muted:nth-child(1) a&#x27;</span>, <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> cataory = element.<span class="property">innerHTML</span></span><br><span class="line">      <span class="keyword">return</span> cataory</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 作者</span></span><br><span class="line">    <span class="keyword">let</span> author = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;.meta .muted:nth-child(2) a&#x27;</span>, <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> author = element.<span class="property">innerHTML</span></span><br><span class="line">      <span class="keyword">return</span> author</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 书籍图片</span></span><br><span class="line">    <span class="keyword">let</span> bookimg = <span class="keyword">await</span> page.$eval(</span><br><span class="line">      <span class="string">&#x27;.article-content .bookpic img&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> bookimg = element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> bookimg</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 浏览次数</span></span><br><span class="line">    <span class="keyword">let</span> viewcount = <span class="keyword">await</span> page.$eval(</span><br><span class="line">      <span class="string">&#x27;.article-content .bookinfo li:nth-child(3)&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> viewcount = element.<span class="property">innerHTML</span></span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/&lt;strong&gt;浏览：&lt;\/strong&gt;(.*?)次/gi</span>s</span><br><span class="line">        viewcount = reg.<span class="title function_">exec</span>(viewcount)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> viewcount</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 标签</span></span><br><span class="line">    <span class="keyword">let</span> tag = <span class="keyword">await</span> page.$$eval(</span><br><span class="line">      <span class="string">&#x27;.article-content .bookinfo li:nth-child(4) a&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">elements</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = []</span><br><span class="line">        elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, i</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> tag = element.<span class="property">innerHTML</span></span><br><span class="line">          arr.<span class="title function_">push</span>(tag)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 时间</span></span><br><span class="line">    <span class="keyword">let</span> pubtime = <span class="keyword">await</span> page.$eval(</span><br><span class="line">      <span class="string">&#x27;.article-content .bookinfo li:nth-child(5)&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pubtime = element.<span class="property">innerHTML</span>.<span class="title function_">split</span>(<span class="string">&#x27;&lt;strong&gt;时间：&lt;/strong&gt;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> pubtime</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 简介</span></span><br><span class="line">    <span class="keyword">let</span> brief = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;.article-content&gt;p&#x27;</span>, <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> brief = element.<span class="property">innerHTML</span></span><br><span class="line">      <span class="keyword">return</span> brief</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> infoList = [</span><br><span class="line">      bookname,</span><br><span class="line">      author,</span><br><span class="line">      viewcount,</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;tag&#125;</span>`</span>,</span><br><span class="line">      pubtime,</span><br><span class="line">      bookimg,</span><br><span class="line">      cataory,</span><br><span class="line">      brief,</span><br><span class="line">      bookUrl,</span><br><span class="line">      download,</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// 插入数据库</span></span><br><span class="line">    <span class="keyword">let</span> strSql =</span><br><span class="line">      <span class="string">&#x27;insert into book (bookname,author,viewcount,tag,pubtime,bookimg,cataory,brief,bookUrl,download) values (?,?,?,?,?,?,?,?,?,?)&#x27;</span></span><br><span class="line">    con.<span class="title function_">query</span>(strSql, infoList, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">spider</span>(<span class="params">link</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> allPageNum = <span class="keyword">await</span> <span class="title function_">getAllNum</span>(link)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功获取页面总数：&#x27;</span> + allPageNum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= allPageNum; i++) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">4000</span> * i) <span class="comment">// 每个页面延迟3秒</span></span><br><span class="line">      <span class="title function_">pageList</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">spider</span>(httpUrl)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200427181748.png" alt="b2dd5cb1d44b978a4ddb35e1556f4df"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> Node </category>
          
          <category> Node爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node爬虫 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cheerio</title>
      <link href="/archives/a0f8eb24.html"/>
      <url>/archives/a0f8eb24.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>cheerio 是 jquery 核心功能的一个快速灵活而又简洁的实现，主要是为了用在服务器端需要对 DOM 进行操作的地方</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>cheerio 是 nodejs 的抓取页面模块，为服务器特别定制的，快速、灵活、实施的 jQuery 核心实现。适合各种 Web 爬虫程序。</p><p>让你在服务器端和 html 愉快的玩耍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var cheerio = require(&#x27;cheerio&#x27;),</span><br><span class="line">  $ = cheerio.load(&#x27;&lt;h2 class = &quot;title&quot;&gt;Hello world&lt;/h2&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">$(&#x27;h2.title&#x27;).text(&#x27;Hello there!&#x27;);</span><br><span class="line">$(&#x27;h2&#x27;).addClass(&#x27;welcome&#x27;);</span><br><span class="line"></span><br><span class="line">$.html();</span><br><span class="line">//=&gt; &lt;h2 class = &quot;title welcome&quot;&gt;Hello there!&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><strong>熟悉的语法*</strong>：cheerio 实现了 jQuery 的一个子集，去掉了 jQuery 中所有与 DOM 不一致或者是用来填浏览器的坑的东西，重现了 jQuery 最美妙的 API</li><li><strong>快到没朋友</strong>：cheerio 使用了及其简洁而又标准的 DOM 模型， 因此对文档的转换，操作，渲染都极其的高效。基本的端到端测试显示它的速度至少是 JSDOM 的 8 倍</li><li><strong>极其灵活</strong>：cheerio 使用了<a href="https://link.jianshu.com/?t=https://github.com/FB55">@FB55</a>编写的非常兼容的<a href="https://link.jianshu.com/?t=https://github.com/fb55/htmlparser2">htmlparser2</a>，因此它可以解析几乎所有的 HTML 和 XML</li></ul><h3 id="关于-JSDOM"><a href="#关于-JSDOM" class="headerlink" title="关于 JSDOM"></a>关于 JSDOM</h3><p>cheerio 产生的原因是出于对 JSDOM 的失望，主要体现在以下三点：</p><ul><li><strong>JSDOM 的解析规则太过于严格</strong>：JSDOM 的解析器无法处理现在许多的流行网站的内容</li><li><strong>JSDOM 太慢了</strong>：解析大的网站甚至可以产生可察觉的延迟</li><li><strong>JSDOM 太过于重量级</strong>：JSDOM 的目标是提供与浏览器一样的 DOM 环境，但是我们往往不需要这样。我们需要的只是一种简单，熟悉的方式来操作我们的 HTML</li></ul><h3 id="什么时候你应该用-JSDOM"><a href="#什么时候你应该用-JSDOM" class="headerlink" title="什么时候你应该用 JSDOM"></a>什么时候你应该用 JSDOM</h3><p>cheerio 并非万能，当你需要一个浏览器一样的环境时，你最好还是用 JSDOM，尤其是你需要进行自动化的功能测试时</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>后面的例子中用到的 HTML 模板如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;fruits&quot;&gt;</span><br><span class="line">  &lt;li class=&quot;apple&quot;&gt;Apple&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;orange&quot;&gt;Orange&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;pear&quot;&gt;Pear&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h4 id="解析-html（load）"><a href="#解析-html（load）" class="headerlink" title="解析 html（load）"></a>解析 html（load）</h4><p>首先你需要先加载你的 HTML。jQuery 会自动完成这一步，因为 jQuery 操作的 DOM 是固定的。但是在使用 cheerio 时我们要手动加载我们的 HTML 文档</p><p>首选的方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var cheerio = require(&#x27;cheerio&#x27;),</span><br><span class="line">$ = cheerio.load(&#x27;&lt;ul id = &quot;fruits&quot;&gt;...&lt;/ul&gt;&#x27;);</span><br></pre></td></tr></table></figure><p>其次，直接把 HTML 字符串作为上下文也是可以的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ = require(&#x27;cheerio&#x27;);</span><br><span class="line">$(&#x27;ul&#x27;, &#x27;&lt;ul id = &quot;fruits&quot;&gt;...&lt;/ul&gt;&#x27;);</span><br></pre></td></tr></table></figure><p>或者把 HTML 字符串作为 root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ = require(&#x27;cheerio&#x27;);</span><br><span class="line">$(&#x27;li&#x27;, &#x27;ul&#x27;, &#x27;&lt;ul id = &quot;fruits&quot;&gt;...&lt;/ul&gt;&#x27;);</span><br></pre></td></tr></table></figure><p>如果你需要自定义一些解析选项，你可以多传递一个对象给 load 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ = cheerio.load(&#x27;&lt;ul id = &quot;fruits&quot;&gt;...&lt;/ul&gt;&#x27;, &#123;</span><br><span class="line">  ignoreWhitespace: true,</span><br><span class="line">  xmlMode: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更多的解析选项可以参考<a href="https://link.jianshu.com/?t=https://github.com/fb55/domhandler">domhandler</a>和<a href="https://link.jianshu.com/?t=https://github.com/fb55/htmlparser2/wiki/Parser-options">parser-options</a></p><h4 id="选择器（selectors）"><a href="#选择器（selectors）" class="headerlink" title="选择器（selectors）"></a>选择器（selectors）</h4><p>cheerio 的选择器几乎和 jQuery 一模一样，所以语法上十分相像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$( selector, [context], [root] )</span><br></pre></td></tr></table></figure><p><strong>selector</strong>在<strong>context</strong>的范围内搜索，<strong>context</strong>的范围又包含在<strong>root</strong>的范围内。<strong>selector</strong>和<strong>context</strong>可以是一个字符串，DOM 元素，DOM 数组或者 cheerio 实例。<strong>root</strong>一般是一个 HTML 文档字符串</p><p>选择器是文档遍历和操作的起点。如同在 jQuery 中一样，它是选择元素节点最重要的方法，但是在 jQuery 中选择器建立在 CSS 选择器标准库上。cheerio 的选择器实现了大部分的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.apple&#x27;, &#x27;#fruits&#x27;).text()</span><br><span class="line">//=&gt; Apple</span><br><span class="line"></span><br><span class="line">$(&#x27;ul .pear&#x27;).attr(&#x27;class&#x27;)</span><br><span class="line">//=&gt; pear</span><br><span class="line"></span><br><span class="line">$(&#x27;li[class=orange]&#x27;).html()</span><br><span class="line">//=&gt; &lt;li class = &quot;orange&quot;&gt;Orange&lt;/li&gt;</span><br></pre></td></tr></table></figure><h4 id="属性操作（atrributes）"><a href="#属性操作（atrributes）" class="headerlink" title="属性操作（atrributes）"></a>属性操作（atrributes）</h4><p>用来获取和更改属性的方法：</p><p><strong>.attr(name, value)</strong></p><p>这个方法用来获取和设置属性。获取第一个符合匹配的元素的属性值。如果某个属性值被设置成 null，那么该属性会被移除。你也可以把<strong>map</strong>和<strong>function</strong>作为参数传递进去，就像在 jQuery 中一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;ul&#x27;).attr(&#x27;id&#x27;)</span><br><span class="line">//=&gt; fruits</span><br><span class="line"></span><br><span class="line">$(&#x27;.apple&#x27;).attr(&#x27;id&#x27;, &#x27;favorite&#x27;).html()</span><br><span class="line">//=&gt; &lt;li class = &quot;apple&quot; id = &quot;favorite&quot;&gt;Apple&lt;/li&gt;</span><br></pre></td></tr></table></figure><blockquote><p>更多信息请查看 <a href="https://link.jianshu.com/?t=http://api.jquery.com/attr/">http://api.jquery.com/attr/</a></p></blockquote><p><strong>.removeAtrr(name)</strong></p><p>移除名为 name 的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.pear&#x27;).removeAttr(&#x27;class&#x27;).html()</span><br><span class="line">//=&gt; &lt;li&gt;Pear&lt;/li&gt;</span><br></pre></td></tr></table></figure><p><strong>.hasClass(className)</strong></p><p>检查元素是否含有此类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.pear&#x27;).hasClass(&#x27;pear&#x27;)</span><br><span class="line">//=&gt; true</span><br><span class="line"></span><br><span class="line">$(&#x27;apple&#x27;).hasClass(&#x27;fruit&#x27;)</span><br><span class="line">//=&gt; false</span><br><span class="line"></span><br><span class="line">$(&#x27;li&#x27;).hasClass(&#x27;pear&#x27;)</span><br><span class="line">//=&gt; true</span><br></pre></td></tr></table></figure><p><strong>.addClass(className)</strong></p><p>添加类名到所有的匹配元素，可以用函数作为参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.pear&#x27;).addClass(&#x27;fruit&#x27;).html()</span><br><span class="line">//=&gt; &lt;li class = &quot;pear fruit&quot;&gt;Pear&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">$(&#x27;.apple&#x27;).addClass(&#x27;fruit red&#x27;).html()</span><br><span class="line">//=&gt; &lt;li class = &quot;apple fruit red&quot;&gt;Apple&lt;/li&gt;</span><br></pre></td></tr></table></figure><blockquote><p>参见 <a href="https://link.jianshu.com/?t=http://api.jquery.com/addClass/">http://api.jquery.com/addClass/</a></p></blockquote><p><strong>.remoteClass([className])</strong></p><p>移除一个或者多个（空格分隔）的类名，如果 className 为空，则所有的类名都会被移除，可以传递函数作为参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.pear&#x27;).removeClass(&#x27;pear&#x27;).html()</span><br><span class="line">//=&gt; &lt;li class = &quot;&quot;&gt;Pear&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">$(&#x27;.apple&#x27;).addClass(&#x27;red&#x27;).removeClass().html()</span><br><span class="line">//=&gt; &lt;li class = &quot;&quot;&gt;Apple&lt;/li&gt;</span><br></pre></td></tr></table></figure><blockquote><p>参见 <a href="https://link.jianshu.com/?t=http://api.jquery.com/removeClass/">http://api.jquery.com/removeClass/</a></p></blockquote><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><strong>.find(selector)</strong></p><p>在当前元素集合中选择符合选择器规则的元素集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#fruits&#x27;).find(&#x27;li&#x27;).length</span><br><span class="line">//=&gt; 3</span><br></pre></td></tr></table></figure><p><strong>.parent()</strong></p><p>获取元素集合第一个元素的父元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.pear&#x27;).parent().attr(&#x27;id&#x27;)</span><br><span class="line">//=&gt; fruits</span><br></pre></td></tr></table></figure><p><strong>.next()</strong></p><p>选择当前元素的下一个兄弟元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.apple&#x27;).next().hasClass(&#x27;orange&#x27;)</span><br><span class="line">//=&gt; true</span><br></pre></td></tr></table></figure><p><strong>.prev()</strong></p><p>同**.next()**相反</p><p><strong>.siblings()</strong></p><p>获取元素集合中第一个元素的所有兄弟元素，不包含它自己</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.pear&#x27;).siblings().length</span><br><span class="line">//=&gt; 2</span><br></pre></td></tr></table></figure><p><strong>.children( selector )</strong></p><p><strong>.each( function(index, element) )</strong></p><p>遍历函数返回 false 即可终止遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var fruits = [];</span><br><span class="line"></span><br><span class="line">$(&#x27;li&#x27;).each(function(i, elem) &#123;</span><br><span class="line">  fruits[i] = $(this).text();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fruits.join(&#x27;, &#x27;);</span><br><span class="line">//=&gt; Apple, Orange, Pear</span><br></pre></td></tr></table></figure><p><strong>.map( function(index, element) )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;li&#x27;).map(function(i, el) &#123;</span><br><span class="line">  // this === el</span><br><span class="line">  return $(this).attr(&#x27;class&#x27;);</span><br><span class="line">&#125;).get().join(&#x27;, &#x27;);</span><br><span class="line">//=&gt; apple, orange, pear</span><br></pre></td></tr></table></figure><p><strong>.filter( selector )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;li&#x27;).filter(&#x27;.orange&#x27;).attr(&#x27;class&#x27;);</span><br><span class="line">//=&gt; orange</span><br></pre></td></tr></table></figure><p><strong>.filter( function(index) )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;li&#x27;).filter(function(i, el) &#123;</span><br><span class="line">  // this === el</span><br><span class="line">  return $(this).attr(&#x27;class&#x27;) === &#x27;orange&#x27;;</span><br><span class="line">&#125;).attr(&#x27;class&#x27;)</span><br><span class="line">//=&gt; orange</span><br></pre></td></tr></table></figure><p><strong>.first()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#fruits&#x27;).children().first().text()</span><br><span class="line">//=&gt; Apple</span><br></pre></td></tr></table></figure><p><strong>.last()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#fruits&#x27;).children().last().text()</span><br><span class="line">//=&gt; Pear</span><br></pre></td></tr></table></figure><p><strong>.eq( i )</strong></p><p>缩小元素集合，可以用负数表示倒数第 i 个元素被保留</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;li&#x27;).eq(0).text()</span><br><span class="line">//=&gt; Apple</span><br><span class="line"></span><br><span class="line">$(&#x27;li&#x27;).eq(-1).text()</span><br><span class="line">//=&gt; Pear</span><br></pre></td></tr></table></figure><h4 id="操作-DOM"><a href="#操作-DOM" class="headerlink" title="操作 DOM"></a>操作 DOM</h4><p>操作 DOM 结构的方法</p><p><strong>.append( content, [content, …] )</strong></p><p><strong>.prepend( content, [content, …] )</strong></p><p><strong>.after( content, [content, …] )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.apple&#x27;).after(&#x27;&lt;li class = &quot;plum&quot;&gt;Plum&lt;/li&gt;&#x27;)</span><br><span class="line">$.html()</span><br><span class="line">//=&gt;  &lt;ul id = &quot;fruits&quot;&gt;</span><br><span class="line">//      &lt;li class = &quot;apple&quot;&gt;Apple&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;plum&quot;&gt;Plum&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;orange&quot;&gt;Orange&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;pear&quot;&gt;Pear&lt;/li&gt;</span><br><span class="line">//    &lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>.before( content, [content, …] )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.apple&#x27;).before(&#x27;&lt;li class = &quot;plum&quot;&gt;Plum&lt;/li&gt;&#x27;)</span><br><span class="line">$.html()</span><br><span class="line">//=&gt;  &lt;ul id = &quot;fruits&quot;&gt;</span><br><span class="line">//      &lt;li class = &quot;plum&quot;&gt;Plum&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;apple&quot;&gt;Apple&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;orange&quot;&gt;Orange&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;pear&quot;&gt;Pear&lt;/li&gt;</span><br><span class="line">//    &lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>.remove( [selector] )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.pear&#x27;).remove()</span><br><span class="line">$.html()</span><br><span class="line">//=&gt;  &lt;ul id = &quot;fruits&quot;&gt;</span><br><span class="line">//      &lt;li class = &quot;apple&quot;&gt;Apple&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;orange&quot;&gt;Orange&lt;/li&gt;</span><br><span class="line">//    &lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>.replaceWith( content )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var plum = $(&#x27;&lt;li class = &quot;plum&quot;&gt;Plum&lt;/li&gt;&#x27;)</span><br><span class="line">$(&#x27;.pear&#x27;).replaceWith(plum)</span><br><span class="line">$.html()</span><br><span class="line">//=&gt; &lt;ul id = &quot;fruits&quot;&gt;</span><br><span class="line">//     &lt;li class = &quot;apple&quot;&gt;Apple&lt;/li&gt;</span><br><span class="line">//     &lt;li class = &quot;orange&quot;&gt;Orange&lt;/li&gt;</span><br><span class="line">//     &lt;li class = &quot;plum&quot;&gt;Plum&lt;/li&gt;</span><br><span class="line">//   &lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>.empty()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;ul&#x27;).empty()</span><br><span class="line">$.html()</span><br><span class="line">//=&gt;  &lt;ul id = &quot;fruits&quot;&gt;&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>.html( [htmlString] )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.orange&#x27;).html()</span><br><span class="line">//=&gt; Orange</span><br><span class="line"></span><br><span class="line">$(&#x27;#fruits&#x27;).html(&#x27;&lt;li class = &quot;mango&quot;&gt;Mango&lt;/li&gt;&#x27;).html()</span><br><span class="line">//=&gt; &lt;li class=&quot;mango&quot;&gt;Mango&lt;/li&gt;</span><br></pre></td></tr></table></figure><p><strong>.text( [textString] )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.orange&#x27;).text()</span><br><span class="line">//=&gt; Orange</span><br><span class="line"></span><br><span class="line">$(&#x27;ul&#x27;).text()</span><br><span class="line">//=&gt;  Apple</span><br><span class="line">//    Orange</span><br><span class="line">//    Pear</span><br></pre></td></tr></table></figure><h4 id="解析和渲染"><a href="#解析和渲染" class="headerlink" title="解析和渲染"></a>解析和渲染</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.html()</span><br><span class="line">//=&gt;  &lt;ul id = &quot;fruits&quot;&gt;</span><br><span class="line">//      &lt;li class = &quot;apple&quot;&gt;Apple&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;orange&quot;&gt;Orange&lt;/li&gt;</span><br><span class="line">//      &lt;li class = &quot;pear&quot;&gt;Pear&lt;/li&gt;</span><br><span class="line">//    &lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>输出包含自己在内的 HTML（outer HTML）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.html(&#x27;.pear&#x27;)</span><br><span class="line">//=&gt; &lt;li class = &quot;pear&quot;&gt;Pear&lt;/li&gt;</span><br></pre></td></tr></table></figure><h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><p><strong>.toArray()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;li&#x27;).toArray()</span><br><span class="line">//=&gt; [ &#123;...&#125;, &#123;...&#125;, &#123;...&#125; ]</span><br></pre></td></tr></table></figure><p><strong>.clone()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var moreFruit = $(&#x27;#fruits&#x27;).clone()</span><br></pre></td></tr></table></figure><h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><p><strong>$.root()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.root().append(&#x27;&lt;ul id=&quot;vegetables&quot;&gt;&lt;/ul&gt;&#x27;).html();</span><br><span class="line">//=&gt; &lt;ul id=&quot;fruits&quot;&gt;...&lt;/ul&gt;&lt;ul id=&quot;vegetables&quot;&gt;&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>$.contains( container, contained )</strong></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node.js模块 </tag>
            
            <tag> cheerio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node学习总结笔记</title>
      <link href="/archives/44b2b83c.html"/>
      <url>/archives/44b2b83c.html</url>
      
        <content type="html"><![CDATA[<p>Node：一门后端语言（服务器端的程序语言），能够连接数据库存取数据，能够接受和处理网络请求（服务器的响应，发送请求去获取数据），单线程事件驱动，异步执行，不等待，提高 IO（input 和 ouput）的处理速度和效率。</p><p>服务器：本质上是一台 PC 主机（linux 系统，windows 系统），部署了后端语言的执行环境，并且能够长时间提供网络服务。</p><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>node 本身提供了事件对象，帮助我们快速订阅者模式，或者观察者模式，或者事件模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//事件的订阅</span><br><span class="line">event.on(‘林俊杰演唱会’，()=&gt;&#123;订阅门票&#125;)</span><br><span class="line">//事件的触发</span><br><span class="line">event.emit(‘林俊杰演唱会’)</span><br></pre></td></tr></table></figure><h3 id="读写事件"><a href="#读写事件" class="headerlink" title="读写事件"></a>读写事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.readfile(&#x27;path&#x27;,读取配置,(err,data)=&gt;&#123;&#125;)</span><br><span class="line">fs.writeFile(&#x27;path&#x27;,写入数据，写入配置，()=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="读写的-promise-封装"><a href="#读写的-promise-封装" class="headerlink" title="读写的 promise 封装"></a>读写的 promise 封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fsRead</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path, &#123; <span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">//console.log(err)</span></span><br><span class="line">        <span class="comment">//失败执行的内容</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//console.log(data)</span></span><br><span class="line">        <span class="comment">//成功执行的内容</span></span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//console.log(456)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fsWrite</span>(<span class="params">path, content</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(path, content, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">      err</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">//console.log(&quot;写入内容出错&quot;)</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(err)</span><br><span class="line">        <span class="comment">//console.log(&quot;写入内容成功&quot;)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fsDir</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdir</span>(path, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功创建目录&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; fsRead, fsWrite, fsDir &#125;</span><br></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(async function()&#123;</span><br><span class="line">let data = await fsRead(&#x27;path&#x27;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="网络请求数据"><a href="#网络请求数据" class="headerlink" title="网络请求数据"></a>网络请求数据</h3><p>request,axios:效率比较高，单局限性比较大</p><p>puppeteer:效率低，局限性比较小</p><p>重点掌握的是：页面的分析，数据存放的位置，以及响应内容。</p><h3 id="网络响应数据"><a href="#网络响应数据" class="headerlink" title="网络响应数据"></a>网络响应数据</h3><p>http.createServer：就可以创建 1 个服务器去监听某个端口，并且通过请求事件来处理每个发送过来的请求。</p><p>server.on(‘request’,(req,res)=&gt;{</p><p>​ req:请求数据都会放在请求对象里</p><p>​ res：能够做出响应对象</p><p>})</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>根据不同的路径去响应不同的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环匹配正则路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">reqEvent</span>) &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> regStr = key</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(regStr, <span class="string">&#x27;igs&#x27;</span>)</span><br><span class="line">  <span class="comment">//console.log(regStr,reg)</span></span><br><span class="line">  <span class="keyword">if</span> (reg.<span class="title function_">test</span>(req.<span class="property">url</span>)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reqEvent</span>[key](req, res)</span><br><span class="line">    resState = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>会有个固定样式和结构的 HTML 模板，根据请求的数据不同，显示页面内容。例如新闻网站</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">options, path</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(path, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span>, <span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        data = <span class="title function_">replaceArr</span>(data, options)</span><br><span class="line">        data = <span class="title function_">replaceVar</span>(data, options)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http静态服务器实现</title>
      <link href="/archives/44b2b83c.html"/>
      <url>/archives/44b2b83c.html</url>
      
        <content type="html"><![CDATA[<h3 id="静态服务器定义"><a href="#静态服务器定义" class="headerlink" title="静态服务器定义"></a>静态服务器定义</h3><p>能够根据需要请求的文件，原封不动的将服务器磁盘中的数据直接返回给到浏览器。</p><ol><li>根据设定的目录，判断用户是否请求的文件时静态文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//解析路径</span><br><span class="line">let urlObj = path.parse(req.url)</span><br><span class="line">//判断是否请求静态文件</span><br><span class="line">urlObj.dir==&#x27;/static&#x27;</span><br></pre></td></tr></table></figure><ol><li>从磁盘读取静态文件并返回</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//根据请求的后缀名，返回文件的类型</span><br><span class="line">res.setHeader(&quot;content-type&quot;,getContentType(urlObj.ext))</span><br><span class="line">//从服务器磁盘中读取文件，并输出到响应对象中</span><br><span class="line">let rs = fs.createReadStream(&#x27;./static/&#x27;+urlObj.base)</span><br><span class="line">rs.pipe(res)</span><br></pre></td></tr></table></figure><ol><li>如何 根据后缀名返回文件类型</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function getContentType(extName)&#123;</span><br><span class="line">    switch(extName)&#123;</span><br><span class="line">        case &quot;.jpg&quot;:</span><br><span class="line">            return &quot;image/jpeg&quot;;</span><br><span class="line">        case &quot;.html&quot;:</span><br><span class="line">            return &quot;text/html;charset=utf-8&quot;;</span><br><span class="line">        case &quot;.js&quot;:</span><br><span class="line">            return &quot;text/javascript;charset=utf-8&quot;;</span><br><span class="line">        case &quot;.json&quot;:</span><br><span class="line">            return &quot;text/json;charset=utf-8&quot;;</span><br><span class="line">        case &quot;.gif&quot;:</span><br><span class="line">            return &quot;image/gif&quot;;</span><br><span class="line">        case &quot;.css&quot;:</span><br><span class="line">            return &quot;text/css&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整案例"><a href="#完整案例" class="headerlink" title="完整案例"></a>完整案例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">//引入http模块</span><br><span class="line">let http = require(&#x27;http&#x27;);</span><br><span class="line">//创建server对象</span><br><span class="line">let server = http.createServer()</span><br><span class="line">//引入path模块</span><br><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line">//引入文件模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">//监听客户端发送过来的请求</span><br><span class="line">//req请求对象包含了请求的相关的信息</span><br><span class="line">//res对象用于响应内容，可以通过这个对象帮助我们快速实现HTTP响应</span><br><span class="line">server.on(&#x27;request&#x27;,function(req,res)&#123;</span><br><span class="line">    //解析路径</span><br><span class="line">    let urlObj = path.parse(req.url)</span><br><span class="line">    //识别请求的路径</span><br><span class="line">    //console.log(urlObj)</span><br><span class="line">    //进入首页，返回首页的内容</span><br><span class="line">    if(req.url==&quot;/&quot;)&#123;</span><br><span class="line">        res.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;)</span><br><span class="line">        res.end(`&lt;link rel=&quot;stylesheet&quot; href=&quot;./static/style.css&quot;&gt;&lt;h1&gt;首页&lt;/h1&gt;&lt;img src=&#x27;./static/cxk.jpg&#x27;&gt;`)</span><br><span class="line">    &#125;else if(urlObj.dir==&#x27;/static&#x27;)&#123;</span><br><span class="line">        res.setHeader(&quot;content-type&quot;,getContentType(urlObj.ext))</span><br><span class="line">        let rs = fs.createReadStream(&#x27;./static/&#x27;+urlObj.base)</span><br><span class="line">        rs.pipe(res)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        res.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;)</span><br><span class="line">        res.end(&quot;&lt;h1&gt;404页面找不到&lt;/h1&gt;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">function getContentType(extName)&#123;</span><br><span class="line">    switch(extName)&#123;</span><br><span class="line">        case &quot;.jpg&quot;:</span><br><span class="line">            return &quot;image/jpeg&quot;;</span><br><span class="line">        case &quot;.html&quot;:</span><br><span class="line">            return &quot;text/html;charset=utf-8&quot;;</span><br><span class="line">        case &quot;.js&quot;:</span><br><span class="line">            return &quot;text/javascript;charset=utf-8&quot;;</span><br><span class="line">        case &quot;.json&quot;:</span><br><span class="line">            return &quot;text/json;charset=utf-8&quot;;</span><br><span class="line">        case &quot;.gif&quot;:</span><br><span class="line">            return &quot;image/gif&quot;;</span><br><span class="line">        case &quot;.css&quot;:</span><br><span class="line">            return &quot;text/css&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//启动服务器，监听服务端口</span><br><span class="line">server.listen(80,function()&#123;</span><br><span class="line">    console.log(&quot;服务已启动：http:127.0.0.1&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node中核心模块fs模块和输入输出</title>
      <link href="/archives/3b45b587.html"/>
      <url>/archives/3b45b587.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Node.js 中赋予了 JavaScript 很多在浏览器中没有的能力，譬如：文件读写，创建 http 服务器等等，今天我们就来看看在 node 中怎样用 JavaScript 进行文件的读写操作。</p><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><ol><li>我们新建一个<code>hello.txt</code>，并且在里面写入：<code>hello， node.js!!</code> ，如图：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420172716.png" alt="node演示"></p><ol><li>我们在<code>hello.txt</code>同级目录下创建一个<code>hello.js</code>文件，我们在这个 js 文件中利用 Node 提供的文件操作 API, 读取<code>hello.txt</code>文件中的内容。</li></ol><ul><li>node 中对文件相关的操作需要依赖 fs 模块，这个是 node 中内置模块之一，我们需要引入。fs–file system。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>()</span><br><span class="line"><span class="comment">// 读文件。 readFile函数接受两个参数：读取文件路径，回调函数（error，data两个参数），</span></span><br><span class="line">读取文件成功：data为文件内容，error为<span class="literal">null</span>，读取失败：error为错误对象，data为<span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>最后我们<code>hello.js</code>中的代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 导入文件模块</span></span><br><span class="line"><span class="comment">// node读写文件也有同步和异步的接口</span></span><br><span class="line"><span class="comment">// 同步的方式</span></span><br><span class="line"><span class="keyword">var</span> content = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;hello.txt&#x27;</span>, &#123; <span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><p>在这里可以说一下，我们读取回来的默认是二进制的内容，所以需要调用<code>toString()</code>方法进行转换。最后，终端可以看到结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420172746.png" alt="node演示"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你也可以直接加上编码，这样就不需要再调用toString()方法了</span></span><br><span class="line"><span class="keyword">var</span> content = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;hello.txt&#x27;</span>, &#123; <span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><p>上面是采用同步的方式来读取文件，我们也可以使用异步的方式来进行读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;hello.txt&#x27;</span>, &#123; <span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  err,</span></span><br><span class="line"><span class="params">  data</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;456&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420174039.png" alt="node演示"></p><p>可以看到我们刚才在<code>hello.txt</code>中写入的文本<code>hello, node.js!!</code>已经打印出来。看到这里是不是觉得很牛叉，JavaScript 居然可以用来读取文件内容，完全颠覆了我们以前对 JavaScript 的理解，然而这一切都得归功于 Node.js。</p><p>但是如果我们需要读取多个文件的时候，就会出现一个嵌套回调的问题，我们可以对他进行一个简单的封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fsRead</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path, &#123; <span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 失败执行的内容</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 成功执行的内容</span></span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装成一个 promise 对象后，我们就可以解决掉回调的问题，也可以直接使用<code>.then</code> 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w1 = <span class="title function_">fsRead</span>(<span class="string">&#x27;hello.txt&#x27;</span>)</span><br><span class="line">w1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420181803.png" alt="node演示"></p><p>我们在读取多个文件的时候也可以这样使用<code>async await</code> 的方法。我们现在有 3 个文件：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420181928.png" alt="文件目录"></p><p>他们的内容分别是<code>hello:hello2</code> ,<code>hell2:hello3</code> ，<code>hello3:我们最终读取的文件</code>, 这样的话我们必须依次读取文件才能读取到最后的文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> file2 = <span class="keyword">await</span> <span class="title function_">fsRead</span>(<span class="string">&#x27;hello.txt&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> file3 = <span class="keyword">await</span> <span class="title function_">fsRead</span>(file2.<span class="title function_">trim</span>() + <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> file3Content = <span class="keyword">await</span> <span class="title function_">fsRead</span>(file3.<span class="title function_">trim</span>() + <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(file3Content)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">readList</span>()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420182156.png" alt="node演示"></p><p>注意：这里我使用了 vscode 编辑器，根据我的代码风格，编辑器每次都会自动在代码末尾添加一行空行，这会导致输出的时候会多出一个空格来，所以我使用了<code>trim()</code>方法去掉空格。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420184901.png" alt="自动换行"></p><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><p>我们新建一个文件<code>write.js</code>中写入下面这行代码，并在同级目录下新建一个<code>test.txt</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(</span><br><span class="line">  <span class="string">&#x27;test.txt&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;今天晚上吃什么&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">flag</span>: <span class="string">&#x27;w&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入出错&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 写文件。writeFile接受三个参数：写入文件路径，写入内容，回调函数。</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420185843.png" alt="node演示"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420190020.png" alt="写入成功"></p><p>但是这样的话，我们再继续写入的话，会发现原先的内容会被覆盖掉：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420190241.png" alt="写入覆盖"></p><p>而我们本来的目的应该是，在后面追加一个内容，这时候我们只需要修改<code>flag</code>为<code>a</code> 就好！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;红烧肉&#x27;</span>, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  err</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入出错&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420190551.png" alt="追加内容"></p><p>但是这也是一个异步的操作，有时候我们也会出现一些问题，不然就必须嵌套，比如我们希望得到的是一个对话，今晚吃啥，红烧肉，红烧肉不好吃：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420191023.png" alt="同步异步问题"></p><p>但是我们得到的并不是一个我们想要的结果。我们可以进行一个封装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fsWrite</span>(<span class="params">path, content</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(path, content, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">      err</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;写入出错&#x27;);</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;写入成功&#x27;);</span></span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们我们就可以达到之前预期的效果了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">writeList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fsWrite</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;1:早餐吃什么？\n&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fsWrite</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;2:午餐吃什么？\n&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fsWrite</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;3:晚餐吃什么？\n&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420191639.png" alt="node演示"></p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>以下为删除文件的语法格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(path, callback)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数使用说明如下：</p><ul><li><strong>path</strong> - 文件路径。</li><li><strong>callback</strong> - 回调函数，没有参数。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>input.txt 文件内容为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">site</span>: blog.<span class="property">juanertu</span>.<span class="property">com</span></span><br></pre></td></tr></table></figure><p>接下来我们创建 file.js 文件，代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;准备删除文件！&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;input.txt&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件删除成功！&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node file.js</span><br><span class="line">准备删除文件！</span><br><span class="line">文件删除成功！</span><br></pre></td></tr></table></figure><p>再去查看 input.txt 文件，发现已经不存在了。而且回收站也找不到这个文件，所以没事别瞎删……</p><hr><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>以下为创建目录的语法格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(path[, options], callback)</span><br></pre></td></tr></table></figure><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><p>参数使用说明如下：</p><ul><li><strong>path</strong> - 文件路径。</li><li>options 参数可以是：<ul><li><strong>recursive</strong> - 是否以递归的方式创建目录，默认为 false。</li><li><strong>mode</strong> - 设置目录权限，默认为 0777。</li></ul></li><li><strong>callback</strong> - 回调函数，没有参数。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// tmp 目录必须存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建目录 /tmp/test/&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;/tmp/test/&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目录创建成功。&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js</span><br><span class="line">目录创建成功。</span><br></pre></td></tr></table></figure><p>可以添加 recursive: true 参数，不管创建的目录 /tmp 和 /tmp/test 是否存在：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;/tmp/a/apple&#x27;</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420202827.png" alt="node演示"></p><h2 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>以下为读取目录的语法格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readdir</span>(path, callback)</span><br></pre></td></tr></table></figure><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><p>参数使用说明如下：</p><ul><li><strong>path</strong> - 文件路径。</li><li><strong>callback</strong> - 回调函数，回调函数带有两个参数 err, files，err 为错误信息，files 为 目录下的文件数组列表。</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;../day02&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, files</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420200550.png" alt="读取目录"></p><p>我们还可以进行一些操作：</p><p>首先我们新建一个<code>rw.js</code> 文件，里面放着我们之前封装好的读取和写入函数，并导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fsRead</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path, &#123; <span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 失败执行的内容</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 成功执行的内容</span></span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fsWrite</span>(<span class="params">path, content</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(path, content, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">      err</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;写入出错&#x27;);</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;写入成功&#x27;);</span></span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  fsRead,</span><br><span class="line">  fsWrite,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>index.js</code> 文件中引入，我们要的操作就是读取<code>test</code>文件夹中的文件，并将这些文件的内容全部写入到<code>all.txt</code> 文件中来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> &#123; fsRead, fsWrite &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./rw&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txtPath = <span class="string">&#x27;all.txt&#x27;</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;../day02&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, files</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files)</span><br><span class="line">    files.<span class="title function_">forEach</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">fileName, i</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> content = <span class="keyword">await</span> <span class="title function_">fsRead</span>(<span class="string">&#x27;../day02/&#x27;</span> + fileName)</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fsWrite</span>(txtPath, content)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420202133.png" alt="读取与写入"></p><hr><h2 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>以下为删除目录的语法格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(path, callback)</span><br></pre></td></tr></table></figure><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><p>参数使用说明如下：</p><ul><li><strong>path</strong> - 文件路径。</li><li><strong>callback</strong> - 回调函数，没有参数。</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>接下来我们创建 file.js 文件，代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 执行前创建一个空的 /tmp/test 目录</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;准备删除目录 /tmp/test&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;/tmp/test&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取 /tmp 目录&#x27;</span>)</span><br><span class="line">  fs.<span class="title function_">readdir</span>(<span class="string">&#x27;/tmp/&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, files</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    files.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(file)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入readline模块</span></span><br><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建readline接口实例</span></span><br><span class="line"><span class="keyword">var</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">  <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">  <span class="attr">output</span>: process.<span class="property">stdout</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// question方法</span></span><br><span class="line">rl.<span class="title function_">question</span>(<span class="string">&#x27;今天晚上吃什么？&#x27;</span>, <span class="keyword">function</span> (<span class="params">answer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;答案：&#x27;</span> + answer)</span><br><span class="line">  <span class="comment">// 不加close，则程序不会结束</span></span><br><span class="line">  rl.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// close事件监听</span></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 结束程序</span></span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420204051.png" alt="node演示"></p><p>这样的话，我们就可以通过提问的方式来创建一个文件：</p><p>首先为了避免嵌套的问题，我们还是先对其进行封装一下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lcQuestion</span>(<span class="params">question</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    r1.<span class="title function_">question</span>(question, <span class="keyword">function</span> (<span class="params">answer</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(answer)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就正式开始操作，比如我准备简历一个 json 文件，包含我的网站信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> &#123; fsRead, fsWrite &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./rw&#x27;</span>)</span><br><span class="line"><span class="comment">// 导入readline</span></span><br><span class="line"><span class="keyword">let</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="comment">//创建readline接口实例</span></span><br><span class="line"><span class="keyword">var</span> r1 = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">  <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">  <span class="attr">output</span>: process.<span class="property">stdout</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lcQuestion</span>(<span class="params">question</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    r1.<span class="title function_">question</span>(question, <span class="keyword">function</span> (<span class="params">answer</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(answer)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createJson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="keyword">await</span> <span class="title function_">lcQuestion</span>(<span class="string">&#x27;您的网站名称？&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> link = <span class="keyword">await</span> <span class="title function_">lcQuestion</span>(<span class="string">&#x27;您的网站地址？&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> description = <span class="keyword">await</span> <span class="title function_">lcQuestion</span>(<span class="string">&#x27;您的网站描述？&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> content = <span class="keyword">await</span> <span class="string">`&#123;</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;<span class="subst">$&#123;name&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">  &quot;link&quot;: &quot;<span class="subst">$&#123;link&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">  &quot;description&quot;: &quot;<span class="subst">$&#123;description&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fsWrite</span>(<span class="string">&#x27;site.json&#x27;</span>, content)</span><br><span class="line">  <span class="keyword">await</span> r1.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br><span class="line">r1.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 结束</span></span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">createJson</span>()</span><br></pre></td></tr></table></figure><p>运行：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420210150.png" alt="node演示"></p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>到了这里，我们是不是对 node 有了一个基本的了解，知道 node 是干什么的，而且知道正是由于 node.js，我们的 JavaScript 才有了无限的可能，使得 JavaScript 不单单局限在浏览器窗口，俗话说得好：‘能用 JavaScript 来实现的，最终都会用 JavaScript 来实现’。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> fs模块 </tag>
            
            <tag> Node核心模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node核心模块-os和path</title>
      <link href="/archives/741e0ba.html"/>
      <url>/archives/741e0ba.html</url>
      
        <content type="html"><![CDATA[<p>Node.js 中的<code>path</code> 模块提供了一些路径操作的 API。<code>os</code> 模块提供了一些操作系统相关信息的 API。具体可以参考 Node.js 的官方 API 文档。这里只是简要说明。</p><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><h3 id="1-path-extname"><a href="#1-path-extname" class="headerlink" title="1.path.extname"></a>1.path.extname</h3><p><code>path.extname()</code> 获取文件（可以是一个路径文件）的扩展名，演示如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(<span class="string">&#x27;hello.txt&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421150938.png" alt="node演示"></p><h3 id="2、path-resolve"><a href="#2、path-resolve" class="headerlink" title="2、path.resolve"></a>2、path.resolve</h3><ul><li><code>path.resolve([...paths])</code> 把一个路径或路径片段的序列解析为一个绝对路径。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;/baz&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;c:\baz\bar&#x27;</span></span><br></pre></td></tr></table></figure><p>给定的路径的序列是“从右往左”被处理的，后面每个 <code>path</code> 被依次解析，直到构造完成一个绝对路径。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421151854.png" alt="path.resolve"></p><h3 id="3、path-join"><a href="#3、path-join" class="headerlink" title="3、path.join"></a>3、path.join</h3><ul><li><code>path.join([...paths])</code> 方法使用平台特定的分隔符吧全部给定的 <code>path</code> 片段拼接到一起，并规范化生成的路径。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>(__dirname)</span><br><span class="line">path.<span class="title function_">join</span>(__filename)</span><br></pre></td></tr></table></figure><p>这里简单说一下 这几个路径的意思：</p><blockquote><p>__dirname: 获得当前执行文件所在目录的完整目录名</p><p>__filename: 获得当前执行文件的带有完整绝对路径的文件名</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421154524.png" alt="node演示"></p><h3 id="4、path-parse"><a href="#4、path-parse" class="headerlink" title="4、path.parse"></a>4、path.parse</h3><ul><li><code>path.parse([...options])</code> 方法可以解析路径，可以吧路径信息解析出来，解析出根路径，目录，扩展名，文件名称，文件名，扩展名。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> info = path.<span class="title function_">parse</span>(__filename)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421154846.png" alt="image-20200421154845635"></p><h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><h3 id="1、os-cpus"><a href="#1、os-cpus" class="headerlink" title="1、os.cpus"></a>1、os.cpus</h3><ul><li><code>os.cpus</code> 获取操作系统的 CPU 信息。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(os.<span class="title function_">cpus</span>())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421155112.png" alt="image-20200421155111334"></p><h3 id="2、os-totalmem"><a href="#2、os-totalmem" class="headerlink" title="2、os.totalmem"></a>2、os.totalmem</h3><ul><li><code>os.totalmem()</code> 获取内存信息。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(os.<span class="title function_">totalmem</span>())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421155518.png" alt="node演示"></p><h3 id="3、os-arch"><a href="#3、os-arch" class="headerlink" title="3、os.arch"></a>3、os.arch</h3><ul><li><code>os.arch()</code> 返回操作系统的 CPU 架构</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(os.<span class="title function_">arch</span>())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421155645.png" alt="node演示"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>更多详细信息请直接参考：</p><ul><li><a href="http://nodejs.cn/api/os.html">Node.js 中文文档-os 操作系统</a></li><li><a href="http://nodejs.cn/api/path.html">Node.js 中文文档-path 路径</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node核心模块 </tag>
            
            <tag> os </tag>
            
            <tag> path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node核心模块-http</title>
      <link href="/archives/8c9422d9.html"/>
      <url>/archives/8c9422d9.html</url>
      
        <content type="html"><![CDATA[<p>开启一个本地服务器需要 Node.js 中<code>http</code>核心模块</p><ol><li>http–模块提供了搭建本地服务器的 API,首先我们在项目中引入；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><p>引入之后我们利用 http.createServer()方法得到一个服务器实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>() <span class="comment">// createServer()方法返回一个server实例，所以我们需要一个变量来接收</span></span><br></pre></td></tr></table></figure><ol><li>经过以上两步，我们已经搭建好了一个服务器实例，然后我们给服务器实例绑定接收<code>request</code>的事情处理函数，代码如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>) <span class="comment">// 获取到请求的路径（请求路径永远以“/”开头）</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 给服务器绑定接收请求的处理事件，当服务器接收到客户端发送的请求后，会调用后面的处理函数，处理函数接收两个参数：请求信息对象，响应信息对象。</span></span><br></pre></td></tr></table></figure><ol><li>绑定监听端口号，开启服务器。代码如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器开启成功，可以通过访问http://127.0.0.1:3000/来获取数据~~&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// server.listen()用来绑定监听的端口号，可以传入第二个参数，当服务器开启成功后，触发后面的回调函数</span></span><br></pre></td></tr></table></figure><p>好了，经过这简单的操作是不是已经完成了一个服务器的简单搭建，接下来我们来实现一个需求：</p><ul><li>当我们访问“<a href="http://127.0.0.1:3000/login%E2%80%9D">http://127.0.0.1:3000/login”</a>, 服务器返回 “login page”</li><li>当我们访问“<a href="http://127.0.0.1:3000/register%E2%80%9D">http://127.0.0.1:3000/register”</a>, 服务器返回 “register page”</li><li>当我们访问“<a href="http://127.0.0.1:3000/%E2%80%9D">http://127.0.0.1:3000/”</a>, 服务器返回 “index page”</li><li>当我们访问“<a href="http://127.0.0.1:3000/product%E2%80%9D">http://127.0.0.1:3000/product”</a>, 服务器返回 <strong>产品信息列表</strong></li></ul><p>我们实现这个需求，只需要在绑定服务器监听的事件处理函数中获取到用户的请求路径，然后根据不同路径返回不同数据即可，这个也不难。详情代码看下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url = req.<span class="property">url</span> <span class="comment">//得到请求的路径 （请求的路径永远以‘/’开头）</span></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;index page&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;login page&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/register&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;register page&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/product&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;iphone X&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">8888</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;iphone 7&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">4320</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// 响应的数据类型必须是字符串或者二进制数据</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;404 NOT found&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功了，，可以访问http://127.0.0.1:3000/啦&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="设置状态码和响应头"><a href="#设置状态码和响应头" class="headerlink" title="设置状态码和响应头"></a>设置状态码和响应头</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="写入内容"><a href="#写入内容" class="headerlink" title="写入内容"></a>写入内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">write</span>(fileData)</span><br></pre></td></tr></table></figure><h3 id="结束响应"><a href="#结束响应" class="headerlink" title="结束响应"></a>结束响应</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node核心模块 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node原生fs模块的promise封装</title>
      <link href="/archives/a26302a1.html"/>
      <url>/archives/a26302a1.html</url>
      
        <content type="html"><![CDATA[<p>将原生的 fs 模块进行了简单的 promise 封装，可以快速的使用 async_await 模式。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 读</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path, &#123; <span class="attr">flag</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 失败执行的内容</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 成功执行的内容</span></span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">write</span>(<span class="params">path, content</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(path, content, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">      err</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;写入出错&#x27;);</span></span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;写入成功&#x27;);</span></span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mkdir</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdir</span>(path, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rename</span>(<span class="params">oldPath, newPath</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">rename</span>(oldPath, newPath, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readdir</span>(<span class="params">path, options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readdir</span>(path, options, <span class="keyword">function</span> (<span class="params">err, files</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(files)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  read,</span><br><span class="line">  write,</span><br><span class="line">  mkdir,</span><br><span class="line">  rename,</span><br><span class="line">  readdir,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已经上传到了 <code>npm</code> 可直接使用 <code>npm install nodefstool</code> 进行安装！</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js之Stream(流)</title>
      <link href="/archives/46f06641.html"/>
      <url>/archives/46f06641.html</url>
      
        <content type="html"><![CDATA[<h2 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream(流)"></a>Stream(流)</h2><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对 http 服务器发起请求的 request 对象就是一个 Stream，还有 stdout（标准输出）。</p><p>Node.js，Stream 有四种流类型：</p><ul><li><strong>Readable</strong> - 可读操作。</li><li><strong>Writable</strong> - 可写操作。</li><li><strong>Duplex</strong> - 可读可写操作.</li><li><strong>Transform</strong> - 操作被写入数据，然后读出结果。</li></ul><p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：</p><ul><li><strong>data</strong> - 当有数据可读时触发。</li><li><strong>end</strong> - 没有更多的数据可读时触发。</li><li><strong>error</strong> - 在接收和写入过程中发生错误时触发。</li><li><strong>finish</strong> - 所有数据已被写入到底层系统时触发。</li></ul><p>本教程会为大家介绍常用的流操作。</p><hr><h2 id="从流中读取数据"><a href="#从流中读取数据" class="headerlink" title="从流中读取数据"></a>从流中读取数据</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.createWriteStream(path[, options])</span><br></pre></td></tr></table></figure><p>创建 read.txt 文件，内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.juanertu.com</span><br></pre></td></tr></table></figure><p>创建 main.js 文件, 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;read.txt&#x27;</span>, &#123; <span class="attr">flags</span>: <span class="string">&#x27;r&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开文件&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取结束&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420215148.png" alt="读取流"></p><hr><h2 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.createWriteStream(path[, options])</span><br></pre></td></tr></table></figure><p>创建 <code>index.js </code>文件, 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;write.txt&#x27;</span>, &#123; <span class="attr">flags</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">ws.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件打开&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">ws.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件准备写入&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件关闭&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;你真是一个美好的人类&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件正在写入&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 文件写入完成</span></span><br><span class="line">ws.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure><p>以上程序会将 data 变量的数据写入到 <code>write.txt </code>文件中。代码执行结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200420213938.png" alt="写入流"></p><h2 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h2><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p><p>我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢的实现了大文件的复制过程。</p><p>以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中。</p><p>设置 input.txt 文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">博客地址：blog.juanertu.com</span><br><span class="line">管道流操作实例</span><br></pre></td></tr></table></figure><p>创建 main.js 文件, 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> readerStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">var</span> writerStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;output.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道读写操作</span></span><br><span class="line"><span class="comment">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span></span><br><span class="line">readerStream.<span class="title function_">pipe</span>(writerStream)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;程序执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><p>代码执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">程序执行完毕</span><br></pre></td></tr></table></figure><p>查看 output.txt 文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat output.txt</span><br><span class="line">博客地址：blog.juanertu.com</span><br><span class="line">管道流操作实例</span><br></pre></td></tr></table></figure><hr><h2 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h2><p>链式是通过连接输出流到另外一个流并创建多个流操作链的机制。链式流一般用于管道操作。</p><p>接下来我们就是用管道和链式来压缩和解压文件。</p><p>创建 compress.js 文件, 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 input.txt 文件为 input.txt.gz</span></span><br><span class="line">fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(zlib.<span class="title function_">createGzip</span>())</span><br><span class="line">  .<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt.gz&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件压缩完成。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>代码执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node compress.js</span><br><span class="line">文件压缩完成。</span><br></pre></td></tr></table></figure><p>执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。</p><p>接下来，让我们来解压该文件，创建 decompress.js 文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解压 input.txt.gz 文件为 input.txt</span></span><br><span class="line">fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt.gz&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(zlib.<span class="title function_">createGunzip</span>())</span><br><span class="line">  .<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件解压完成。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>代码执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node decompress.js</span><br><span class="line">文件解压完成。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Stream </tag>
            
            <tag> 文件流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js事件循环</title>
      <link href="/archives/ae8398fc.html"/>
      <url>/archives/ae8398fc.html</url>
      
        <content type="html"><![CDATA[<h2 id="Node-js-事件循环"><a href="#Node-js-事件循环" class="headerlink" title="Node.js 事件循环"></a>Node.js 事件循环</h2><p>Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</p><p>Node.js 几乎每一个 API 都是支持回调函数的。</p><p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p><p>Node.js 单线程类似进入一个 while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">开启进程</span><br><span class="line">开启线程</span><br><span class="line">初始化数据，<span class="variable language_">window</span>/<span class="variable language_">document</span>/location...</span><br><span class="line"><span class="title function_">whild</span>(<span class="params"><span class="literal">true</span></span>)&#123;</span><br><span class="line">    初始化事件列表</span><br><span class="line">    根据事件修改数据</span><br><span class="line">    根据数据去渲染页面</span><br><span class="line">    <span class="keyword">if</span>(count===<span class="number">0</span>)&#123;</span><br><span class="line">        运行js代码</span><br><span class="line">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;skyblue&quot;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">456</span>)</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h2><p>Node.js 使用事件驱动模型，当 web server 接收到请求，就把它关闭然后进行处理，然后去服务下一个 web 请求。</p><p>当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。</p><p>这个模型非常高效可扩展性非常强，因为 webserver 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式 IO 或者事件驱动 IO）</p><p>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。</p><p>Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>()</span><br></pre></td></tr></table></figure><p>以下程序绑定事件处理程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定事件及事件的处理程序</span></span><br><span class="line">eventEmitter.<span class="title function_">on</span>(<span class="string">&#x27;eventName&#x27;</span>, eventHandler)</span><br></pre></td></tr></table></figure><p>我们可以通过程序触发事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">eventEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;eventName&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>创建 main.js 文件，代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建事件处理程序</span></span><br><span class="line"><span class="keyword">var</span> connectHandler = <span class="keyword">function</span> <span class="title function_">connected</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发 data_received 事件</span></span><br><span class="line">  eventEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;data_received&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定 connection 事件处理程序</span></span><br><span class="line">eventEmitter.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, connectHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用匿名函数绑定 data_received 事件</span></span><br><span class="line">eventEmitter.<span class="title function_">on</span>(<span class="string">&#x27;data_received&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据接收成功。&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发 connection 事件</span></span><br><span class="line">eventEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;connection&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;程序执行完毕。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接下来让我们执行以上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">连接成功。</span><br><span class="line">数据接收成功。</span><br><span class="line">程序执行完毕。</span><br></pre></td></tr></table></figure><hr><h2 id="Node-应用程序是如何工作的？"><a href="#Node-应用程序是如何工作的？" class="headerlink" title="Node 应用程序是如何工作的？"></a>Node 应用程序是如何工作的？</h2><p>在 Node 应用程序中，执行异步操作的函数将回调函数作为最后一个参数， 回调函数接收错误对象作为第一个参数。</p><p>接下来让我们来重新看下前面的实例，创建一个 input.txt ,文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">博客地址：blog.juanertu.com</span><br></pre></td></tr></table></figure><p>创建 main.js 文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;input.txt&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;程序执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以上程序中 fs.readFile() 是异步函数用于读取文件。 如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。</p><p>如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出。</p><p>执行以上代码，执行结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">程序执行完毕</span><br><span class="line">博客地址：blog.<span class="property">juanertu</span>.<span class="property">com</span></span><br></pre></td></tr></table></figure><p>接下来我们删除 input.txt 文件，执行结果如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">程序执行完毕</span><br><span class="line"><span class="title class_">Error</span>: <span class="variable constant_">ENOENT</span>, open <span class="string">&#x27;input.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>因为文件 input.txt 不存在，所以输出了错误信息。</p><h2 id="Node-js-EventEmitter"><a href="#Node-js-EventEmitter" class="headerlink" title="Node.js EventEmitter"></a>Node.js EventEmitter</h2><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p><p>Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。</p><hr><h2 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h2><p>events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。</p><p>你可以通过 require(“events”);来访问该模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>()</span><br></pre></td></tr></table></figure><p>EventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发。</p><p>下面我们用一个简单的例子说明 EventEmitter 的用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//event.js 文件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>).<span class="property">EventEmitter</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line">event.<span class="title function_">on</span>(<span class="string">&#x27;some_event&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;some_event 事件触发&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  event.<span class="title function_">emit</span>(<span class="string">&#x27;some_event&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p>运行这段代码，1 秒后控制台输出了 **’some_event 事件触发’**。其原理是 event 对象注册了事件 some_event 的一个监听器，然后我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用 some_event 的监听器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node event.<span class="property">js</span></span><br><span class="line">some_event 事件触发</span><br></pre></td></tr></table></figure><p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。</p><p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p><p>让我们以下面的例子解释这个过程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//event.js 文件</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>()</span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;someEvent&#x27;</span>, <span class="keyword">function</span> (<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listener1&#x27;</span>, arg1, arg2)</span><br><span class="line">&#125;)</span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;someEvent&#x27;</span>, <span class="keyword">function</span> (<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listener2&#x27;</span>, arg1, arg2)</span><br><span class="line">&#125;)</span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;someEvent&#x27;</span>, <span class="string">&#x27;arg1 参数&#x27;</span>, <span class="string">&#x27;arg2 参数&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行以上代码，运行的结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node event.<span class="property">js</span></span><br><span class="line">listener1 arg1 参数 arg2 参数</span><br><span class="line">listener2 arg1 参数 arg2 参数</span><br></pre></td></tr></table></figure><p>以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。</p><p>运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是 EventEmitter 最简单的用法。</p><p>EventEmitter 提供了多个属性，如 <strong>on</strong> 和 <strong>emit</strong>。<strong>on</strong> 函数用于绑定事件函数，<strong>emit</strong> 属性用于触发一个事件。接下来我们来具体看下 EventEmitter 的属性介绍。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js模块化的理解</title>
      <link href="/archives/f5f1da44.html"/>
      <url>/archives/f5f1da44.html</url>
      
        <content type="html"><![CDATA[<p>Node.js 采用的是 CommonJs 规范，在 NodeJS 中，一般将代码合理拆分到不同的 JS 文件中，每一个文件就是一个模块，而文件路径就是模块名。 在编写每个模块时，都有 require、exports、module 三个预先定义好的变量可供使用。</p><blockquote><p>Node.js 中模块的分类：</p></blockquote><ul><li>核心模块（已经封装好的内置模块）；</li><li>自己定义的模块；</li><li>第三方的模块（npm 下载下来的）；</li></ul><h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><p><code>require</code>函数用来在一个模块中引入另外一个模块。传入一个模块名，返回一个模块导出对象。用法：<code>let cc = require(&quot;模块名&quot;)</code> ，其中模块名可以用绝对路径也可以用相对路径,模块的后缀名.js 可以省略。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cc1 = <span class="built_in">require</span>(<span class="string">&#x27;./main.js&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> cc2 = <span class="built_in">require</span>(<span class="string">&#x27;home/src/main.js&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> cc3 = <span class="built_in">require</span>(<span class="string">&#x27;./main&#x27;</span>)</span><br></pre></td></tr></table></figure><p>require()函数用两个作用：</p><ul><li>执行导入的模块中的代码；</li><li>返回导入模块中的接口对象；</li></ul><h2 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h2><p><code>exports</code>对象用来导出当前模块的公共方法或属性，别的模块通过<code>require</code>函数使用当前模块时得到的就是当前模块的<code>exports</code>对象。用法：<code>exports.name</code>,name 为导出的对象名。例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(++i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">导出一个add方法供其他模块使用</span><br></pre></td></tr></table></figure><blockquote><p>其实 exports 类似于 ES6 中的 export 的用法，用来导出一个指定名字的对象。</p></blockquote><h2 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h2><p><code>module.exports</code>用来导出一个默认对象，没有指定对象名，常见于修改模块的原始导出对象。比如原本模块导出的是一个对象，我们可以通过 module.exports 修改为导出一个函数。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块的初始化"><a href="#模块的初始化" class="headerlink" title="模块的初始化"></a>模块的初始化</h2><p>一个模块中的 JS 代码仅在模块<strong>第一次被使用时</strong>执行一次，并且在使用的过程中进行<strong>初始化</strong>，之后缓存起来便于后续继续使用。</p><h3 id="主模块"><a href="#主模块" class="headerlink" title="主模块"></a>主模块</h3><p>通过命令行参数传递给 NodeJS 以启动程序的模块被称为主模块。主模块负责调度组成整个程序的其它模块完成工作。例如通过以下命令启动程序时，main.js 就是主模块。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js // 运行main.js启动程序，main.js称为主模块</span><br></pre></td></tr></table></figure><p>完整实例：</p><p>在项目中我们有个<code>hello.js</code>文件，里面定义了一个求和的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> ++a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = add</span><br></pre></td></tr></table></figure><p>我们在项目的主模块 <code>main.js</code>中引入<code>hello.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add1 = <span class="built_in">require</span>(<span class="string">&#x27;./hello&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> add2 = <span class="built_in">require</span>(<span class="string">&#x27;./hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add1.<span class="title function_">add</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add2.<span class="title function_">add</span>())</span><br></pre></td></tr></table></figure><p>该程序运行的结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> node main.js</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们可以看到<code>hello.js</code>并没有别引入两次而初始化两次，说明模块只会在执行的过程中被初始化一次。</p><h2 id="module-exports-和-exports-的区别"><a href="#module-exports-和-exports-的区别" class="headerlink" title="module.exports 和 exports 的区别"></a>module.exports 和 exports 的区别</h2><p>Node 中，每个模块都有一个<code>exports</code>接口对象，我们需要把公共的方法或者字符串挂载在这个接口对象中，其他的模块才可以使用。</p><blockquote><p>Node.js 中只有模块作用域，默认两个模块之间的变量，方法互不冲突，互不影响，这样就导致一个问题，我们怎样使用加载进来的模块中的方法呢？这就需要在另外一个模块<code>exports</code>接口对象中挂载模块中公共的方法。</p></blockquote><h3 id="exports-1"><a href="#exports-1" class="headerlink" title="exports"></a>exports</h3><p>我们在<code>a.js</code>中有以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let foo = &#x27;hello&#x27;</span><br><span class="line">function add (x, y) &#123;</span><br><span class="line">  return x+y</span><br><span class="line">&#125;</span><br><span class="line">exports.add = add // 在接口对象中挂载公共的add方法</span><br><span class="line">exports.foo = foo // 在接口对象中挂载foo属性</span><br></pre></td></tr></table></figure><p>此时，在<code>b.js</code>中如果需要使用<code>add</code>方法,只需引入<code>a.js</code>即可。<code>b.js</code>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a = require(&#x27;./a.js&#x27;)  // a.js和b.js在同级目录下，注意：同级目录必须加“./”</span><br><span class="line"></span><br><span class="line">console.log(a.add(20,30)) // 使用a.js中的add方法</span><br></pre></td></tr></table></figure><p>相反，如果我们没有在<code>a.js</code>exports 接口对象中挂载 add 方法，那么这里就得不到结果。</p><h3 id="module-exports-1"><a href="#module-exports-1" class="headerlink" title="module.exports"></a>module.exports</h3><p>对于上面的例子，我们同样可以利用<code>module.exports</code>来写，只需把暴露的方式改成如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">add</span> = add</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">foo</span> = foo</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也可以用对象的方式</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  add,</span><br><span class="line">  foo,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Node 中每个模块都有一个<code>module</code>对象，<code>module</code>对象中的有一个<code>exports</code>属性为一个接口对象，我们需要把模块之间公共的方法或属性挂载在这个接口对象中，方便其他的模块使用这些公共的方法或属性。</li><li>Node 中每个模块的最后，都会<code>return: module.exports</code>。</li><li>Node 中每个模块都会把<code>module.exports</code>指向的对象赋值给一个变量<code>exports</code>，也就是说：<code>exports = module.exports</code>。</li><li><code>module.exports = XXX</code>，表示当前模块导出一个单一成员，结果就是 XXX。</li><li>如果需要导出多个成员时必须使用<code>exports.add = XXX; exports.foo = XXX;</code>或者使用<code>module.exports.add = XXX; module.export.foo = XXX;</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node.js模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node核心模块-url</title>
      <link href="/archives/19fc55fb.html"/>
      <url>/archives/19fc55fb.html</url>
      
        <content type="html"><![CDATA[<p><code>url</code> 核心模块在为我们解析 url 地址的时候提供了非常方便的 API，常见包括有查询字符串的 url 地址解析，我们可以简单了解下 <code>url</code> 模块。</p><h2 id="url-parse"><a href="#url-parse" class="headerlink" title="url.parse"></a>url.parse</h2><p><code>url.parse()</code> 方法可以解析一个 url 地址，通过传入的第二个参数 <code>true</code> 把包含有查询字符串的 <code>query</code> 转换成对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> obj = url.<span class="title function_">parse</span>(<span class="string">&#x27;http://www.baidu.com?name=cc&amp;age=24&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421161116.png" alt="node演示"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="comment">// 传入第二个参数，将query字符串转换成对象</span></span><br><span class="line"><span class="keyword">let</span> obj = url.<span class="title function_">parse</span>(<span class="string">&#x27;http://www.baidu.com?name=cc&amp;age=24&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421162233.png" alt="node演示"></p><h2 id="url-resolve"><a href="#url-resolve" class="headerlink" title="url.resolve"></a>url.resolve</h2><p><code>url.resolve()</code> 方法解析相对于基 URL 的目标 URL。第一个参数：基 URL，第二个参数：目标 URL。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="comment">// 第二个参数前面的 / 表示根路径，如果省略则取代基URL的最后一个子地址。</span></span><br><span class="line"><span class="keyword">let</span> urlStr = url.<span class="title function_">resolve</span>(<span class="string">&#x27;http://blog.juanertu.com/&#x27;</span>, <span class="string">&#x27;/tags&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(urlStr)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200421170314.png" alt="node演示"></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Node核心模块 </tag>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(十)：class类中constructor和name问题</title>
      <link href="/archives/b2cd753e.html"/>
      <url>/archives/b2cd753e.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">x</span> + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">y</span> + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">x</span> + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">y</span> + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码定义了一个“类”，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而<code>this</code>关键字则代表实例对象。也就是说，ES5 的构造函数<code>Point</code>，对应 ES6 的<code>Point</code>类的构造方法。</p><p>ES6 的类，完全可以看作构造函数的另一种写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Point</span> <span class="comment">// &quot;function&quot;</span></span><br><span class="line"><span class="title class_">Point</span> === <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p><p>使用的时候，也是直接对类使用<code>new</code>命令，跟构造函数的用法完全一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">  <span class="title function_">doStuff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stuff&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Bar</span>()</span><br><span class="line">b.<span class="title function_">doStuff</span>() <span class="comment">// &quot;stuff&quot;</span></span><br></pre></td></tr></table></figure><p>构造函数的<code>prototype</code>属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。</p><h2 id="constructor-方法"><a href="#constructor-方法" class="headerlink" title="constructor 方法"></a>constructor 方法</h2><p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，定义了一个空的类<code>Point</code>，JavaScript 引擎会自动为它添加一个空的<code>constructor</code>方法。</p><p><code>constructor</code>方法默认返回实例对象（即<code>this</code>），完全可以指定返回另外一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>() <span class="keyword">instanceof</span> <span class="title class_">Foo</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>constructor</code>函数返回一个全新的对象，结果导致实例对象不是<code>Foo</code>类的实例。</p><p>类必须使用<code>new</code>调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>()</span><br><span class="line"><span class="comment">// TypeError: Class constructor Foo cannot be invoked without &#x27;new&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h2><p>由于本质上，ES6 的类只是 ES5 的构造函数的一层包装，所以函数的许多特性都被<code>Class</code>继承，包括<code>name</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;&#125;</span><br><span class="line"><span class="title class_">Point</span>.<span class="property">name</span> <span class="comment">// &quot;Point&quot;</span></span><br></pre></td></tr></table></figure><p><code>name</code>属性总是返回紧跟在<code>class</code>关键字后面的类名。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(九)：Proxy</title>
      <link href="/archives/16f8f18e.html"/>
      <url>/archives/16f8f18e.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Proxy 用于修改某些操作的默认行为，可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p><p>ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p>Proxy 对象的所有用法，都是上面这种形式，不同的只是<code>handler</code>参数的写法。其中，<code>new Proxy()</code>表示生成一个<code>Proxy</code>实例，<code>target</code>参数表示所要拦截的目标对象，<code>handler</code>参数也是一个对象，用来定制拦截行为。</p><p>面是另一个拦截读取属性行为的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, propKey</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">35</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">time</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">title</span> <span class="comment">// 35</span></span><br></pre></td></tr></table></figure><p>上面代码中，作为构造函数，<code>Proxy</code>接受两个参数。第一个参数是所要代理的目标对象（上例是一个空对象），即如果没有<code>Proxy</code>的介入，操作原来要访问的就是这个对象；第二个参数是一个配置对象，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作。比如，上面代码中，配置对象有一个<code>get</code>方法，用来拦截对目标对象属性的访问请求。<code>get</code>方法的两个参数分别是目标对象和所要访问的属性。可以看到，由于拦截函数总是返回<code>35</code>，所以访问任何属性都得到<code>35</code>。</p><div class="note info flat"><p>注意，要使得<code>Proxy</code>起作用，必须针对<code>Proxy</code>实例（上例是<code>proxy</code>对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。</p></div><p>如果<code>handler</code>没有设置任何拦截，那就等同于直接通向原对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="property">a</span> = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">target.<span class="property">a</span> <span class="comment">// &quot;b&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>handler</code>是一个空对象，没有任何拦截效果，访问<code>proxy</code>就等同于访问<code>target</code>。</p><h2 id="Proxy-实例的方法"><a href="#Proxy-实例的方法" class="headerlink" title="Proxy 实例的方法"></a>Proxy 实例的方法</h2><p>Proxy 支持的拦截操作一览，一共 13 种。</p><ul><li>**get(target, propKey, receiver)**：拦截对象属性的读取，比如<code>proxy.foo</code>和<code>proxy[&#39;foo&#39;]</code>。</li><li>**set(target, propKey, value, receiver)**：拦截对象属性的设置，比如<code>proxy.foo = v</code>或<code>proxy[&#39;foo&#39;] = v</code>，返回一个布尔值。</li><li>**has(target, propKey)**：拦截<code>propKey in proxy</code>的操作，返回一个布尔值。</li><li>**deleteProperty(target, propKey)**：拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值。</li><li>**ownKeys(target)**：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性。</li><li>**getOwnPropertyDescriptor(target, propKey)**：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象。</li><li>**defineProperty(target, propKey, propDesc)**：拦截<code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</li><li>**preventExtensions(target)**：拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</li><li>**getPrototypeOf(target)**：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</li><li>**isExtensible(target)**：拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值。</li><li>**setPrototypeOf(target, proto)**：拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li><li>**apply(target, object, args)**：拦截 Proxy 实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code>。</li><li>**construct(target, args)**：拦截 Proxy 实例作为构造函数调用的操作，比如<code>new proxy(...args)</code>。</li></ul><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p><code>get</code>方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</p><p><code>get</code>方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (propKey <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[propKey]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(<span class="string">&#x27;Prop name &quot;&#x27;</span> + propKey + <span class="string">&#x27;&quot; does not exist.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// &quot;张三&quot;</span></span><br><span class="line">proxy.<span class="property">age</span> <span class="comment">// 抛出一个错误</span></span><br></pre></td></tr></table></figure><p>上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回<code>undefined</code>。</p><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><p><code>set</code>方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。</p><p>假定<code>Person</code>对象有一个<code>age</code>属性，该属性应该是一个不大于 200 的整数，那么可以使用<code>Proxy</code>保证<code>age</code>的属性值符合要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">obj, prop, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The age is not an integer&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;The age seems invalid&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, validator)</span><br><span class="line"></span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">person.<span class="property">age</span> <span class="comment">// 100</span></span><br><span class="line">person.<span class="property">age</span> = <span class="string">&#x27;young&#x27;</span> <span class="comment">// 报错</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">300</span> <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>上面代码中，由于设置了存值函数<code>set</code>，任何不符合要求的<code>age</code>属性赋值，都会抛出一个错误，这是数据验证的一种实现方法。利用<code>set</code>方法，还可以数据绑定，即每当对象发生变化时，会自动更新 DOM。</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><p><code>apply</code>方法拦截函数的调用、<code>call</code>和<code>apply</code>操作。</p><p><code>apply</code>方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（<code>this</code>）和目标对象的参数数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">target, ctx, args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">apply</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;I am the target&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="attr">apply</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I am the proxy&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"></span><br><span class="line"><span class="title function_">p</span>()</span><br><span class="line"><span class="comment">// &quot;I am the proxy&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>p</code>是 Proxy 的实例，当它作为函数调用时（<code>p()</code>），就会被<code>apply</code>方法拦截，返回一个字符串。</p><h3 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h3><p><code>has</code>方法用来拦截<code>HasProperty</code>操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是<code>in</code>运算符。</p><p><code>has</code>方法可以接受两个参数，分别是目标对象、需查询的属性名。</p><p>下面的例子使用<code>has</code>方法隐藏某些属性，不被<code>in</code>运算符发现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="attr">prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="string">&#x27;_prop&#x27;</span> <span class="keyword">in</span> proxy <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码中，如果原对象的属性名的第一个字符是下划线，<code>proxy.has</code>就会返回<code>false</code>，从而不会被<code>in</code>运算符发现。</p><h3 id="construct"><a href="#construct" class="headerlink" title="construct()"></a>construct()</h3><p><code>construct</code>方法用于拦截<code>new</code>命令，下面是拦截对象的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">construct</span>(<span class="params">target, args, newTarget</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">target</span>(...args)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>construct</code>方法可以接受三个参数。</p><ul><li><code>target</code>：目标对象</li><li><code>args</code>：构造函数的参数对象</li><li><code>newTarget</code>：创造实例对象时，<code>new</code>命令作用的构造函数（下面例子的<code>p</code>）</li></ul><h3 id="deleteProperty"><a href="#deleteProperty" class="headerlink" title="deleteProperty()"></a>deleteProperty()</h3><p><code>deleteProperty</code>方法用于拦截<code>delete</code>操作，如果这个方法抛出错误或者返回<code>false</code>，当前属性就无法被<code>delete</code>命令删除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&#x27;delete&#x27;</span>)</span><br><span class="line">    <span class="keyword">delete</span> target[key]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invariant</span>(<span class="params">key, action</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private &quot;<span class="subst">$&#123;key&#125;</span>&quot; property`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="keyword">delete</span> proxy.<span class="property">_prop</span></span><br><span class="line"><span class="comment">// Error: Invalid attempt to delete private &quot;_prop&quot; property</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>deleteProperty</code>方法拦截了<code>delete</code>操作符，删除第一个字符为下划线的属性会报错。</p><p>注意，目标对象自身的不可配置（configurable）的属性，不能被<code>deleteProperty</code>方法删除，否则报错。</p><h3 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty()"></a>defineProperty()</h3><p><code>defineProperty</code>方法拦截了<code>Object.defineProperty</code>操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">defineProperty</span>(<span class="params">target, key, descriptor</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span> <span class="comment">// 不会生效</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>defineProperty</code>方法返回<code>false</code>，导致添加新属性总是无效。</p><p>注意，如果目标对象不可扩展（non-extensible），则<code>defineProperty</code>不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则<code>defineProperty</code>方法不得改变这两个设置。</p><h3 id="getOwnPropertyDescriptor"><a href="#getOwnPropertyDescriptor" class="headerlink" title="getOwnPropertyDescriptor()"></a>getOwnPropertyDescriptor()</h3><p><code>getOwnPropertyDescriptor</code>方法拦截<code>Object.getOwnPropertyDescriptor()</code>，返回一个属性描述对象或者<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">getOwnPropertyDescriptor</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(target, key)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="string">&#x27;tar&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(proxy, <span class="string">&#x27;wat&#x27;</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(proxy, <span class="string">&#x27;_foo&#x27;</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(proxy, <span class="string">&#x27;baz&#x27;</span>)</span><br><span class="line"><span class="comment">// &#123; value: &#x27;tar&#x27;, writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>handler.getOwnPropertyDescriptor</code>方法对于第一个字符为下划线的属性名会返回<code>undefined</code>。</p><h3 id="getPrototypeOf"><a href="#getPrototypeOf" class="headerlink" title="getPrototypeOf()"></a>getPrototypeOf()</h3><p><code>getPrototypeOf</code>方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。</p><ul><li><code>Object.prototype.__proto__</code></li><li><code>Object.prototype.isPrototypeOf()</code></li><li><code>Object.getPrototypeOf()</code></li><li><code>Reflect.getPrototypeOf()</code></li><li><code>instanceof</code></li></ul><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proto = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_">getPrototypeOf</span>(<span class="params">target</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> proto</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(p) === proto <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>getPrototypeOf</code>方法拦截<code>Object.getPrototypeOf()</code>，返回<code>proto</code>对象。</p><p>注意，<code>getPrototypeOf</code>方法的返回值必须是对象或者<code>null</code>，否则报错。另外，如果目标对象不可扩展（non-extensible）， <code>getPrototypeOf</code>方法必须返回目标对象的原型对象。</p><h3 id="isExtensible"><a href="#isExtensible" class="headerlink" title="isExtensible()"></a>isExtensible()</h3><p><code>isExtensible</code>方法拦截<code>Object.isExtensible</code>操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">isExtensible</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;called&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(p)</span><br><span class="line"><span class="comment">// &quot;called&quot;</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码设置了<code>isExtensible</code>方法，在调用<code>Object.isExtensible</code>时会输出<code>called</code>。</p><p>注意，该方法只能返回布尔值，否则返回值会被自动转为布尔值。</p><p>这个方法有一个强限制，它的返回值必须与目标对象的<code>isExtensible</code>属性保持一致，否则就会抛出错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(proxy) === <span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(target)</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">isExtensible</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(p)</span><br><span class="line"><span class="comment">// Uncaught TypeError: &#x27;isExtensible&#x27; on proxy: trap result does not reflect extensibility of proxy target (which is &#x27;true&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="ownKeys"><a href="#ownKeys" class="headerlink" title="ownKeys()"></a>ownKeys()</h3><p><code>ownKeys</code>方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。</p><ul><li><code>Object.getOwnPropertyNames()</code></li><li><code>Object.getOwnPropertySymbols()</code></li><li><code>Object.keys()</code></li><li><code>for...in</code>循环</li></ul><p>下面是拦截<code>Object.keys()</code>的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="title function_">ownKeys</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(proxy)</span><br><span class="line"><span class="comment">// [ &#x27;a&#x27; ]</span></span><br></pre></td></tr></table></figure><p>上面代码拦截了对于<code>target</code>对象的<code>Object.keys()</code>操作，只返回<code>a</code>、<code>b</code>、<code>c</code>三个属性之中的<code>a</code>属性。</p><p>下面的例子是拦截第一个字符为下划线的属性名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  <span class="attr">_bar</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="attr">_prop</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&#x27;baz&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="title function_">ownKeys</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(target).<span class="title function_">filter</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> key[<span class="number">0</span>] !== <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(proxy)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;baz&quot;</span></span><br></pre></td></tr></table></figure><p>注意，使用<code>Object.keys</code>方法时，有三类属性会被<code>ownKeys</code>方法自动过滤，不会返回。</p><ul><li>目标对象上不存在的属性</li><li>属性名为 Symbol 值</li><li>不可遍历（<code>enumerable</code>）的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;secret&#x27;</span>)]: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, <span class="string">&#x27;key&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="title function_">ownKeys</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;secret&#x27;</span>), <span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(proxy)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>ownKeys</code>方法之中，显式返回不存在的属性（<code>d</code>）、Symbol 值（<code>Symbol.for(&#39;secret&#39;)</code>）、不可遍历的属性（<code>key</code>），结果都被自动过滤掉。</p><p><code>ownKeys</code>方法还可以拦截<code>Object.getOwnPropertyNames()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">ownKeys</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(p)</span><br><span class="line"><span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br></pre></td></tr></table></figure><p><code>for...in</code>循环也受到<code>ownKeys</code>方法的拦截。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">ownKeys</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> proxy) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// 没有任何输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>ownkeys</code>指定只返回<code>a</code>和<code>b</code>属性，由于<code>obj</code>没有这两个属性，因此<code>for...in</code>循环不会有任何输出。</p><p><code>ownKeys</code>方法返回的数组成员，只能是字符串或 Symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">ownKeys</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">123</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, &#123;&#125;, []]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(p)</span><br><span class="line"><span class="comment">// Uncaught TypeError: 123 is not a valid property name</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>ownKeys</code>方法虽然返回一个数组，但是每一个数组成员都不是字符串或 Symbol 值，因此就报错了。</p><p>如果目标对象自身包含不可配置的属性，则该属性必须被<code>ownKeys</code>方法返回，否则报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="number">10</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">ownKeys</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(p)</span><br><span class="line"><span class="comment">// Uncaught TypeError: &#x27;ownKeys&#x27; on proxy: trap result did not include &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>obj</code>对象的<code>a</code>属性是不可配置的，这时<code>ownKeys</code>方法返回的数组之中，必须包含<code>a</code>，否则会报错。</p><p>另外，如果目标对象是不可扩展的（non-extensible），这时<code>ownKeys</code>方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">ownKeys</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(p)</span><br><span class="line"><span class="comment">// Uncaught TypeError: &#x27;ownKeys&#x27; on proxy: trap returned extra keys but proxy target is non-extensible</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>obj</code>对象是不可扩展的，这时<code>ownKeys</code>方法返回的数组之中，包含了<code>obj</code>对象的多余属性<code>b</code>，所以导致了报错。</p><h3 id="preventExtensions"><a href="#preventExtensions" class="headerlink" title="preventExtensions()"></a>preventExtensions()</h3><p><code>preventExtensions</code>方法拦截<code>Object.preventExtensions()</code>。该方法必须返回一个布尔值，否则会被自动转为布尔值。</p><p>这个方法有一个限制，只有目标对象不可扩展时（即<code>Object.isExtensible(proxy)</code>为<code>false</code>），<code>proxy.preventExtensions</code>才能返回<code>true</code>，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">preventExtensions</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(proxy)</span><br><span class="line"><span class="comment">// Uncaught TypeError: &#x27;preventExtensions&#x27; on proxy: trap returned truish but the proxy target is extensible</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>proxy.preventExtensions</code>方法返回<code>true</code>，但这时<code>Object.isExtensible(proxy)</code>会返回<code>true</code>，因此报错。</p><p>为了防止出现这个问题，通常要在<code>proxy.preventExtensions</code>方法里面，调用一次<code>Object.preventExtensions</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">preventExtensions</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;called&#x27;</span>)</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(target)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(proxy)</span><br><span class="line"><span class="comment">// &quot;called&quot;</span></span><br><span class="line"><span class="comment">// Proxy &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="setPrototypeOf"><a href="#setPrototypeOf" class="headerlink" title="setPrototypeOf()"></a>setPrototypeOf()</h3><p><code>setPrototypeOf</code>方法主要用来拦截<code>Object.setPrototypeOf</code>方法。</p><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">setPrototypeOf</span>(<span class="params">target, proto</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Changing the prototype is forbidden&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> proto = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> target = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(proxy, proto)</span><br><span class="line"><span class="comment">// Error: Changing the prototype is forbidden</span></span><br></pre></td></tr></table></figure><p>上面代码中，只要修改<code>target</code>的原型对象，就会报错。</p><p>注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（non-extensible），<code>setPrototypeOf</code>方法不得改变目标对象的原型。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(八)：Set和Map数据结构</title>
      <link href="/archives/a31746e9.html"/>
      <url>/archives/a31746e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()[(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>)].<span class="title function_">forEach</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> s.<span class="title function_">add</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4</span></span><br></pre></td></tr></table></figure><p>上面代码通过<code>add()</code>方法向 Set 结构加入成员，结果表明 Set 结构<code>不会添加重复的值</code>。</p><p><code>Set</code>函数可以接受一个数组（或者具有 iterable 接口的其他数据结构：argument，元素集合，Set，Map，字符串）作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line">[...set]</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line">items.<span class="property">size</span> <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line">set.<span class="property">size</span> <span class="comment">// 56</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">div</span>) =&gt;</span> set.<span class="title function_">add</span>(div))</span><br><span class="line">set.<span class="property">size</span> <span class="comment">// 56</span></span><br></pre></td></tr></table></figure><h3 id="Set-实例的属性"><a href="#Set-实例的属性" class="headerlink" title="Set 实例的属性"></a>Set 实例的属性</h3><p>Set 结构的实例有以下属性。</p><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</li><li><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</li></ul><h3 id="Set-实例的操作方法"><a href="#Set-实例的操作方法" class="headerlink" title="Set 实例的操作方法"></a>Set 实例的操作方法</h3><p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p><ul><li><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。</li><li><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li><li><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</li></ul><p>上面这些属性和方法的实例如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 注意2被加入了两次</span></span><br><span class="line"></span><br><span class="line">s.<span class="property">size</span> <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">3</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">2</span>)</span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>下面是一个对比，看看在判断是否包括一个键上面，<code>Object</code>结构和<code>Set</code>结构的写法不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象的写法</span></span><br><span class="line"><span class="keyword">const</span> properties = &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (properties[someName]) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set的写法</span></span><br><span class="line"><span class="keyword">const</span> properties = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">properties.<span class="title function_">add</span>(<span class="string">&#x27;width&#x27;</span>)</span><br><span class="line">properties.<span class="title function_">add</span>(<span class="string">&#x27;height&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (properties.<span class="title function_">has</span>(someName)) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Array.from</code>方法可以将 Set 结构转为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(items)</span><br></pre></td></tr></table></figure><p>这就提供了去除数组重复成员的另一种方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dedupe</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(array))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">dedupe</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="Set-实例的遍历方法"><a href="#Set-实例的遍历方法" class="headerlink" title="Set 实例的遍历方法"></a>Set 实例的遍历方法</h3><p>Set 结构的实例有四个遍历方法，可以用于遍历成员。</p><ul><li><code>Set.prototype.keys()</code>：返回键名的遍历器</li><li><code>Set.prototype.values()</code>：返回键值的遍历器</li><li><code>Set.prototype.entries()</code>：返回键值对的遍历器</li><li><code>Set.prototype.forEach()</code>：使用回调函数遍历每个成员</li></ul><p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><h4 id="keys-，values-，entries"><a href="#keys-，values-，entries" class="headerlink" title="keys()，values()，entries()"></a>keys()，values()，entries()</h4><p><code>keys</code>方法、<code>values</code>方法、<code>entries</code>方法返回的都是遍历器对象（详见《Iterator 对象》一章）。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以<code>keys</code>方法和<code>values</code>方法的行为完全一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;red&quot;, &quot;red&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;green&quot;, &quot;green&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;blue&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>entries</code>方法返回的遍历器，同时包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。</p><p>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的<code>values</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] === <span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">values</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这意味着，可以省略<code>values</code>方法，直接用<code>for...of</code>循环遍历 Set。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>Set 结构的实例与数组一样，也拥有<code>forEach</code>方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>])</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 9 : 9</span></span><br></pre></td></tr></table></figure><p>上面代码说明，<code>forEach</code>方法的参数就是一个处理函数。该函数的参数与数组的<code>forEach</code>一致，依次为键值、键名、集合本身（上例省略了该参数）。这里需要注意，Set 结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。</p><p>另外，<code>forEach</code>方法还可以有第二个参数，表示绑定处理函数内部的<code>this</code>对象。</p><h4 id="遍历的应用"><a href="#遍历的应用" class="headerlink" title="遍历的应用"></a>遍历的应用</h4><p>扩展运算符（<code>...</code>）内部使用<code>for...of</code>循环，所以也可以用于 Set 结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"><span class="keyword">let</span> arr = [...set]</span><br><span class="line"><span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><p>扩展运算符和 Set 结构相结合，就可以去除数组的重复成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> unique = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"><span class="comment">// [3, 5, 2]</span></span><br></pre></td></tr></table></figure><p>而且，数组的<code>map</code>和<code>filter</code>方法也可以间接用于 Set 了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x * <span class="number">2</span>))</span><br><span class="line"><span class="comment">// 返回Set结构：&#123;2, 4, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> == <span class="number">0</span>))</span><br><span class="line"><span class="comment">// 返回Set结构：&#123;2, 4&#125;</span></span><br></pre></td></tr></table></figure><p>因此使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b])</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> b.<span class="title function_">has</span>(x)))</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !b.<span class="title function_">has</span>(x)))</span><br><span class="line"><span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure><p>如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用<code>Array.from</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">map</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> val * <span class="number">2</span>))</span><br><span class="line"><span class="comment">// set的值是2, 4, 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(set, <span class="function">(<span class="params">val</span>) =&gt;</span> val * <span class="number">2</span>))</span><br><span class="line"><span class="comment">// set的值是2, 4, 6</span></span><br></pre></td></tr></table></figure><p>上面代码提供了两种方法，直接在遍历操作中改变原来的 Set 结构。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">p</span>: <span class="string">&#x27;Hello World&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(o, <span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">m.<span class="title function_">get</span>(o) <span class="comment">// &quot;content&quot;</span></span><br><span class="line"></span><br><span class="line">m.<span class="title function_">has</span>(o) <span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">delete</span>(o) <span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">has</span>(o) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码使用 Map 结构的<code>set</code>方法，将对象<code>o</code>当作<code>m</code>的一个键，然后又使用<code>get</code>方法读取这个键，接着使用<code>delete</code>方法删除了这个键。</p><p>作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Author&#x27;</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// &quot;张三&quot;</span></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;title&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>) <span class="comment">// &quot;Author&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码在新建 Map 实例时，就指定了两个键<code>name</code>和<code>title</code>。</p><p>事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作<code>Map</code>构造函数的参数。这就是说，<code>Set</code>和<code>Map</code>都可以用来生成新的 Map。</p><h3 id="实例的属性和操作方法"><a href="#实例的属性和操作方法" class="headerlink" title="实例的属性和操作方法"></a>实例的属性和操作方法</h3><p>Map 结构的实例有以下属性和操作方法。</p><h4 id="size-属性"><a href="#size-属性" class="headerlink" title="size 属性"></a>size 属性</h4><p><code>size</code>属性返回 Map 结构的成员总数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="Map-prototype-set-key-value"><a href="#Map-prototype-set-key-value" class="headerlink" title="Map.prototype.set(key, value)"></a>Map.prototype.set(key, value)</h4><p><code>set</code>方法设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>) <span class="comment">// 键是字符串</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">262</span>, <span class="string">&#x27;standard&#x27;</span>) <span class="comment">// 键是数值</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>) <span class="comment">// 键是 undefined</span></span><br></pre></td></tr></table></figure><p><code>set</code>方法返回的是当前的<code>Map</code>对象，因此可以采用链式写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>).<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="Map-prototype-get-key"><a href="#Map-prototype-get-key" class="headerlink" title="Map.prototype.get(key)"></a>Map.prototype.get(key)</h4><p><code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>udefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">m.<span class="title function_">set</span>(hello, <span class="string">&#x27;Hello ES6!&#x27;</span>) <span class="comment">// 键是函数</span></span><br><span class="line"></span><br><span class="line">m.<span class="title function_">get</span>(hello) <span class="comment">// Hello ES6!</span></span><br></pre></td></tr></table></figure><h4 id="Map-prototype-has-key"><a href="#Map-prototype-has-key" class="headerlink" title="Map.prototype.has(key)"></a>Map.prototype.has(key)</h4><p><code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">262</span>, <span class="string">&#x27;standard&#x27;</span>)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;edition&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;years&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="number">262</span>) <span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Map-prototype-delete-key"><a href="#Map-prototype-delete-key" class="headerlink" title="Map.prototype.delete(key)"></a>Map.prototype.delete(key)</h4><p><code>delete</code>方法删除某个键，返回<code>true</code>。如果删除失败，返回<code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>)</span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="literal">undefined</span>)</span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="Map-prototype-clear"><a href="#Map-prototype-clear" class="headerlink" title="Map.prototype.clear()"></a>Map.prototype.clear()</h4><p><code>clear</code>方法清除所有成员，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p><ul><li><code>Map.prototype.keys()</code>：返回键名的遍历器。</li><li><code>Map.prototype.values()</code>：返回键值的遍历器。</li><li><code>Map.prototype.entries()</code>：返回所有成员的遍历器。</li><li><code>Map.prototype.forEach()</code>：遍历 Map 的所有成员。</li></ul><p>需要特别注意的是，Map 的遍历顺序就是插入顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;no&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码最后的那个例子，表示 Map 结构的默认遍历器接口（<code>Symbol.iterator</code>属性），就是<code>entries</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] === map.<span class="property">entries</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Map 结构转为数组结构，比较快速的方法是使用扩展运算符（<code>...</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">[...map.<span class="title function_">keys</span>()]</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[...map.<span class="title function_">values</span>()]</span><br><span class="line"><span class="comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span></span><br><span class="line"></span><br><span class="line">[...map.<span class="title function_">entries</span>()]</span><br><span class="line"><span class="comment">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br><span class="line"></span><br><span class="line">[...map]</span><br><span class="line"><span class="comment">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br></pre></td></tr></table></figure><p>结合数组的<code>map</code>方法、<code>filter</code>方法，可以实现 Map 的遍历和过滤（Map 本身没有<code>map</code>和<code>filter</code>方法）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map0 = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>).<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>([...map0].<span class="title function_">filter</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>))</span><br><span class="line"><span class="comment">// 产生 Map 结构 &#123;1 =&gt; &#x27;a&#x27;, 2 =&gt; &#x27;b&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="title class_">Map</span>([...map0].<span class="title function_">map</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">&#x27;_&#x27;</span> + v]))</span><br><span class="line"><span class="comment">// 产生 Map 结构 &#123;2 =&gt; &#x27;_a&#x27;, 4 =&gt; &#x27;_b&#x27;, 6 =&gt; &#x27;_c&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>此外，Map 还有一个<code>forEach</code>方法，与数组的<code>forEach</code>方法类似，也可以实现遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, key, map</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Key: %s, Value: %s&#x27;</span>, key, value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>forEach</code>方法还可以接受第二个参数，用来绑定<code>this</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reporter = &#123;</span><br><span class="line">  <span class="attr">report</span>: <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Key: %s, Value: %s&#x27;</span>, key, value)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, key, map</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">report</span>(key, value)</span><br><span class="line">&#125;, reporter)</span><br></pre></td></tr></table></figure><p>上面代码中，<code>forEach</code>方法的回调函数的<code>this</code>，就指向<code>reporter</code>。</p><h3 id="与其他数据结构的互相转换"><a href="#与其他数据结构的互相转换" class="headerlink" title="与其他数据结构的互相转换"></a>与其他数据结构的互相转换</h3><h4 id="Map-转为数组"><a href="#Map-转为数组" class="headerlink" title="Map 转为数组"></a>Map 转为数组</h4><p>前面已经提过，Map 转为数组最方便的方法，就是使用扩展运算符（<code>...</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="literal">true</span>, <span class="number">7</span>).<span class="title function_">set</span>(&#123; <span class="attr">foo</span>: <span class="number">3</span> &#125;, [<span class="string">&#x27;abc&#x27;</span>])</span><br><span class="line">;[...myMap]</span><br><span class="line"><span class="comment">// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ &#x27;abc&#x27; ] ] ]</span></span><br></pre></td></tr></table></figure><h4 id="数组-转为-Map"><a href="#数组-转为-Map" class="headerlink" title="数组 转为 Map"></a>数组 转为 Map</h4><p>将数组传入 Map 构造函数，就可以转为 Map。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="literal">true</span>, <span class="number">7</span>],</span><br><span class="line">  [&#123; <span class="attr">foo</span>: <span class="number">3</span> &#125;, [<span class="string">&#x27;abc&#x27;</span>]],</span><br><span class="line">])</span><br><span class="line"><span class="comment">// Map &#123;</span></span><br><span class="line"><span class="comment">//   true =&gt; 7,</span></span><br><span class="line"><span class="comment">//   Object &#123;foo: 3&#125; =&gt; [&#x27;abc&#x27;]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="Map-转为对象"><a href="#Map-转为对象" class="headerlink" title="Map 转为对象"></a><strong>Map 转为对象</strong></h4><p>如果所有 Map 的键都是字符串，它可以无损地转为对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strMapToObj</span>(<span class="params">strMap</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> strMap) &#123;</span><br><span class="line">    obj[k] = v</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>).<span class="title function_">set</span>(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="title function_">strMapToObj</span>(myMap)</span><br><span class="line"><span class="comment">// &#123; yes: true, no: false &#125;</span></span><br></pre></td></tr></table></figure><p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p><h4 id="对象转为-Map"><a href="#对象转为-Map" class="headerlink" title="对象转为 Map"></a>对象转为 Map</h4><p>对象转为 Map 可以通过<code>Object.entries()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj))</span><br></pre></td></tr></table></figure><p>此外，也可以自己实现一个转换函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objToStrMap</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> strMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">    strMap.<span class="title function_">set</span>(k, obj[k])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> strMap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">objToStrMap</span>(&#123; <span class="attr">yes</span>: <span class="literal">true</span>, <span class="attr">no</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="comment">// Map &#123;&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Map-转为-JSON"><a href="#Map-转为-JSON" class="headerlink" title="Map 转为 JSON"></a>Map 转为 JSON</h4><p>Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strMapToJson</span>(<span class="params">strMap</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">strMapToObj</span>(strMap))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>).<span class="title function_">set</span>(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="title function_">strMapToJson</span>(myMap)</span><br><span class="line"><span class="comment">// &#x27;&#123;&quot;yes&quot;:true,&quot;no&quot;:false&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mapToArrayJson</span>(<span class="params">map</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...map])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="literal">true</span>, <span class="number">7</span>).<span class="title function_">set</span>(&#123; <span class="attr">foo</span>: <span class="number">3</span> &#125;, [<span class="string">&#x27;abc&#x27;</span>])</span><br><span class="line"><span class="title function_">mapToArrayJson</span>(myMap)</span><br><span class="line"><span class="comment">// &#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="JSON-转为-Map"><a href="#JSON-转为-Map" class="headerlink" title="JSON 转为 Map"></a>JSON 转为 Map</h4><p>JSON 转为 Map，正常情况下，所有键名都是字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonToStrMap</span>(<span class="params">jsonStr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">objToStrMap</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonToStrMap</span>(<span class="string">&#x27;&#123;&quot;yes&quot;: true, &quot;no&quot;: false&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;&#x27;yes&#x27; =&gt; true, &#x27;no&#x27; =&gt; false&#125;</span></span><br></pre></td></tr></table></figure><p>但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonToMap</span>(<span class="params">jsonStr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonToMap</span>(<span class="string">&#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&#x27;abc&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(七)：Symbol</title>
      <link href="/archives/ad512fcf.html"/>
      <url>/archives/ad512fcf.html</url>
      
        <content type="html"><![CDATA[<p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p><p>ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p><p>Symbol 值通过<code>Symbol</code>函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"><span class="comment">// &quot;symbol&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>s</code>就是一个独一无二的值。<code>typeof</code>运算符的结果，表明变量<code>s</code>是 Symbol 数据类型，而不是字符串之类的其他类型。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>Symbol</code>函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p><p><code>Symbol</code>函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s1 <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2 <span class="comment">// Symbol(bar)</span></span><br><span class="line"></span><br><span class="line">s1.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line">s2.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(bar)&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>s1</code>和<code>s2</code>是两个 Symbol 值。如果不加参数，它们在控制台的输出都是<code>Symbol()</code>，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。</p><p>如果 Symbol 的参数是一个对象，就会调用该对象的<code>toString</code>方法，将其转为字符串，然后才生成一个 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(obj)</span><br><span class="line">sym <span class="comment">// Symbol(abc)</span></span><br></pre></td></tr></table></figure><p>注意，<code>Symbol</code>函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的<code>Symbol</code>函数的返回值是不相等的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数的情况</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数的情况</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>s1</code>和<code>s2</code>都是<code>Symbol</code>函数的返回值，而且参数相同，但是它们是不相等的。</p><h2 id="Symbol-值"><a href="#Symbol-值" class="headerlink" title="Symbol 值"></a>Symbol 值</h2><p>Symbol 值不能与其他类型的值进行运算，会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;My symbol&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;your symbol is &#x27;</span> +</span><br><span class="line">  sym <span class="comment">// TypeError: can&#x27;t convert symbol to string</span></span><br><span class="line">  <span class="string">`your symbol is <span class="subst">$&#123;sym&#125;</span>`</span></span><br><span class="line"><span class="comment">// TypeError: can&#x27;t convert symbol to string</span></span><br></pre></td></tr></table></figure><p>但是，Symbol 值可以显式转为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;My symbol&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>(sym) <span class="comment">// &#x27;Symbol(My symbol)&#x27;</span></span><br><span class="line">sym.<span class="title function_">toString</span>() <span class="comment">// &#x27;Symbol(My symbol)&#x27;</span></span><br></pre></td></tr></table></figure><p>另外，Symbol 值也可以转为布尔值，但是不能转为数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="title class_">Boolean</span>(sym) <span class="comment">// true</span></span><br><span class="line">!sym <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sym) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>(sym) <span class="comment">// TypeError</span></span><br><span class="line">sym + <span class="number">2</span> <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h2 id="Symbol-for-，Symbol-keyFor"><a href="#Symbol-for-，Symbol-keyFor" class="headerlink" title="Symbol.for()，Symbol.keyFor()"></a>Symbol.for()，Symbol.keyFor()</h2><p><code>Symbol.for()</code>方法 如果之前有相同参数的 symbol 值，找到这个值并返回，如果没有就创建一个新的 symbol 值。</p><p>有时，我们希望重新使用同一个 Symbol 值，<code>Symbol.for()</code>方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>s1</code>和<code>s2</code>都是 Symbol 值，但是它们都是由同样参数的<code>Symbol.for</code>方法生成的，所以实际上是同一个值。</p><p><code>Symbol.for()</code>与<code>Symbol()</code>这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。<code>Symbol.for()</code>不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的<code>key</code>是否已经存在，如果不存在才会新建一个值。比如，如果你调用<code>Symbol.for(&quot;cat&quot;)</code>30 次，每次都会返回同一个 Symbol 值，但是调用<code>Symbol(&quot;cat&quot;)</code>30 次，会返回 30 个不同的 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;bar&#x27;</span>) === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>) === <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码中，由于<code>Symbol()</code>写法没有登记机制，所以每次调用都会返回一个不同的值。</p><p><code>Symbol.keyFor()</code>方法返回一个已登记的 Symbol 类型值的<code>key</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s1) <span class="comment">// &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>s2</code>属于未登记的 Symbol 值，所以返回<code>undefined</code>。</p><p>注意，<code>Symbol.for()</code>为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">const</span> y = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x === y) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Symbol.for(&#39;bar&#39;)</code>是函数内部运行的，但是生成的 Symbol 值是登记在全局环境的。所以，第二次运行<code>Symbol.for(&#39;bar&#39;)</code>可以取到这个 Symbol 值。</p><p><code>Symbol.for()</code>的这个全局登记特性，可以用在不同的 iframe 或 service worker 中取到同一个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">iframe.<span class="property">src</span> = <span class="title class_">String</span>(<span class="variable language_">window</span>.<span class="property">location</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe)</span><br><span class="line"></span><br><span class="line">iframe.<span class="property">contentWindow</span>.<span class="property">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>) === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，iframe 窗口生成的 Symbol 值，可以在主页面得到。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(六)：对象的扩展</title>
      <link href="/archives/2c25c1c9.html"/>
      <url>/archives/2c25c1c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h2><p>ES6 允许直接写入变量和函数作为对象的属性和方法，让书写更加简洁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="keyword">const</span> baz = &#123; foo &#125;</span><br><span class="line">baz <span class="comment">// &#123;foo: &quot;bar&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> baz = &#123; <span class="attr">foo</span>: foo &#125;</span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>foo</code>直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值。除了属性简写，方法也可以简写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法用于函数的返回值，将会非常方便。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPoint</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">10</span></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPoint</span>()</span><br><span class="line"><span class="comment">// &#123;x:1, y:10&#125;</span></span><br></pre></td></tr></table></figure><p>CommonJS 模块输出一组变量，就非常合适使用简洁写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ms = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getItem</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> key <span class="keyword">in</span> ms ? ms[key] : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setItem</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  ms[key] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ms = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; getItem, setItem, clear &#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">getItem</span>: getItem,</span><br><span class="line">  <span class="attr">setItem</span>: setItem,</span><br><span class="line">  <span class="attr">clear</span>: clear,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>注意，简写的对象方法不能用作构造函数，会报错。</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">f</span>() <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h2 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h2><p>JavaScript 定义对象的属性，有两种方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">obj.<span class="property">foo</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">obj[<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;bc&#x27;</span>] = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>上面代码的方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号之内。</p><p>但是，如果使用字面量方式定义对象（使用大括号），在 ES5 中只能使用方法一（标识符）定义属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">abc</span>: <span class="number">123</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> propKey = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [propKey]: <span class="literal">true</span>,</span><br><span class="line">  [<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;bc&#x27;</span>]: <span class="number">123</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式还可以用于定义方法名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="string">&#x27;h&#x27;</span> + <span class="string">&#x27;ello&#x27;</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">hello</span>() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>注意，属性名表达式与简洁表示法，不能同时使用，会报错。</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> baz = &#123; [foo] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> baz = &#123; [foo]: <span class="string">&#x27;abc&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串<code>[object Object]</code>，这一点要特别小心。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keyA = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> keyB = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line">  [keyA]: <span class="string">&#x27;valueA&#x27;</span>,</span><br><span class="line">  [keyB]: <span class="string">&#x27;valueB&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject <span class="comment">// Object &#123;[object Object]: &quot;valueB&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>[keyA]</code>和<code>[keyB]</code>得到的都是<code>[object Object]</code>，所以<code>[keyB]</code>会把<code>[keyA]</code>覆盖掉，而<code>myObject</code>最后只有一个<code>[object Object]</code>属性。</p><h2 id="方法的-name-属性"><a href="#方法的-name-属性" class="headerlink" title="方法的 name 属性"></a>方法的 name 属性</h2><p>函数的<code>name</code>属性，返回函数名。对象方法也是函数，因此也有<code>name</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="property">sayName</span>.<span class="property">name</span> <span class="comment">// &quot;sayName&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，方法的<code>name</code>属性返回函数名（即方法名）。</p><p>如果对象的方法使用了取值函数（<code>getter</code>）和存值函数（<code>setter</code>），则<code>name</code>属性不是在该方法上面，而是该方法的属性的描述对象的<code>get</code>和<code>set</code>属性上面，返回值是方法名前加上<code>get</code>和<code>set</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">foo</span>() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">foo</span>.<span class="property">name</span></span><br><span class="line"><span class="comment">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">descriptor.<span class="property">get</span>.<span class="property">name</span> <span class="comment">// &quot;get foo&quot;</span></span><br><span class="line">descriptor.<span class="property">set</span>.<span class="property">name</span> <span class="comment">// &quot;set foo&quot;</span></span><br></pre></td></tr></table></figure><p>有两种特殊情况：<code>bind</code>方法创造的函数，<code>name</code>属性返回<code>bound</code>加上原函数的名字；<code>Function</code>构造函数创造的函数，<code>name</code>属性返回<code>anonymous</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>().<span class="property">name</span> <span class="comment">// &quot;anonymous&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">doSomething.<span class="title function_">bind</span>().<span class="property">name</span> <span class="comment">// &quot;bound doSomething&quot;</span></span><br></pre></td></tr></table></figure><p>如果对象的方法是一个 Symbol 值，那么<code>name</code>属性返回的是这个 Symbol 值的描述。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> key2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [key1]() &#123;&#125;,</span><br><span class="line">  [key2]() &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj[key1].<span class="property">name</span> <span class="comment">// &quot;[description]&quot;</span></span><br><span class="line">obj[key2].<span class="property">name</span> <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>key1</code>对应的 Symbol 值有描述，<code>key2</code>没有。</p><h2 id="对象的可枚举性和遍历"><a href="#对象的可枚举性和遍历" class="headerlink" title="对象的可枚举性和遍历"></a>对象的可枚举性和遍历</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">// configurable: true</span></span><br><span class="line"><span class="comment">// enumerable: true</span></span><br><span class="line"><span class="comment">// value: 1</span></span><br><span class="line"><span class="comment">// writable: true</span></span><br></pre></td></tr></table></figure><p><code>enumerable</code>属性成为<code>可枚举性</code>，如果该属性为 false，有一些操作会省略当前属性。</p><p>有四个操作会忽略 enumerable 为 false 的属性。</p><ul><li><code>for...in</code>循环：只遍历对象<code>自身</code>和<code>继承 </code>的可枚举属性。</li><li><code>Object.keys()</code>：返回对象<code>自身</code>的所有可枚举的属性的<code>键名 </code>。</li><li><code>JSON.stringify() </code>：只串行化对象<code>自身</code>的可枚举属性。</li><li><code>Object.assign()</code>：忽略<code>enumerable </code>为 false 的属性，只拷贝对象<code>自身 </code>的可枚举的属性。</li></ul><p><strong>属性的遍历</strong></p><ul><li><code>for...in </code>遍历对象<code>自身 </code>和<code>继承 </code>的可枚举属性。（不包括 Symbol 属性）</li><li><code>Object.keys() </code>返回一个数组，包括对象<code>自身 </code>的（不包括继承的）所有可枚举属性的键名。（不包括 Symbol 属性）</li><li><code>Object.getOwnPropertyNames(obj) </code>, 返回一个数组，包含对象<code>自身</code>的所有属性的键名。（不包括 Symbol 属性，但是包含不可枚举的属性）</li><li><code>Object.getOwnPropertySymbols(obj)</code>,返回一个数组，包含对象<code>自身</code>的所有 Symbol 属性的键名。</li><li><code>Reflect.ownKeys(obj)</code>，返回一个数组，包括对象<code>自身</code>的所有键名。（不管键名是否为 Symbol 值，不管是否可枚举）。</li></ul><h2 id="Object-的方法扩展"><a href="#Object-的方法扩展" class="headerlink" title="Object 的方法扩展"></a>Object 的方法扩展</h2><p><code>Object()</code> 方法可以把参数变成对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object(1)   // Number</span><br><span class="line">Object(true) // Boolean</span><br></pre></td></tr></table></figure><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><p>它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>不同之处只有两个：一是<code>+0</code>不等于<code>-0</code>，二是<code>NaN</code>等于自身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>ES5 可以通过下面的代码，部署<code>Object.is</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>, <span class="string">&#x27;is&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">      <span class="comment">// 针对+0 不等于 -0的情况</span></span><br><span class="line">      <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 针对NaN的情况</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2)</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p><p>注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2)</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p>如果只有一个参数，<code>Object.assign</code>会直接返回该参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj) === obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果该参数不是对象，则会先转成对象，然后返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="number">2</span>) <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><p>由于<code>undefined</code>和<code>null</code>无法转成对象，所以如果它们作为参数，就会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="literal">undefined</span>) <span class="comment">// 报错</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="literal">null</span>) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>但是，如果<code>undefined</code>和<code>null</code>不在首参数，就不会报错。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, <span class="literal">undefined</span>) === obj <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, <span class="literal">null</span>) === obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">const</span> v2 = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> v3 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, v1, v2, v3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>上述代码中数值和布尔值都会被忽略。这是因为只有字符串的包装对象，会产生可枚举属性。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>(<span class="keyword">true</span>) <span class="comment">// &#123;[[PrimitiveValue]]: true&#125;</span></span><br><span class="line"><span class="built_in">Object</span>(<span class="number">10</span>)  <span class="comment">//  &#123;[[PrimitiveValue]]: 10&#125;</span></span><br><span class="line"><span class="built_in">Object</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// &#123;0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3, [[PrimitiveValue]]: &quot;abc&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中，布尔值、数值、字符串分别转成对应的包装对象，可以看到它们的原始值都在包装对象的内部属性<code>[[PrimitiveValue]]</code>上面，这个属性是不会被<code>Object.assign</code>拷贝的。只有字符串的包装对象，会产生可枚举的实义属性，那些属性则会被拷贝。</p><p><code>Object.assign</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123;b: <span class="string">&#x27;c&#x27;</span>&#125;,</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">&#x27;invisible&#x27;</span>, &#123;</span><br><span class="line">    enumerable: <span class="keyword">false</span>,</span><br><span class="line">    value: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// &#123; b: &#x27;c&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>上述需要拷贝的对象只有一个不可枚举属性 invisible，所以这个属性并没有被拷贝进去。</p><p>属性名为 <code>Symbol</code> 值的属性，也会被拷贝：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123; a: <span class="string">&#x27;b&#x27;</span> &#125;, &#123; [<span class="built_in">Symbol</span>(<span class="string">&#x27;c&#x27;</span>)]: <span class="string">&#x27;d&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// &#123; a: &#x27;b&#x27;, Symbol(c): &#x27;d&#x27; &#125;</span></span><br></pre></td></tr></table></figure><div class="note flat"><p>注意点</p></div><p><strong>浅拷贝</strong></p><p>如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;a: &#123;b: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj1.a.b = <span class="number">2</span>;</span><br><span class="line">obj2.a.b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>同名属性的替换</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; a: &#123; b: <span class="string">&#x27;c&#x27;</span>, d: <span class="string">&#x27;e&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> source = &#123; a: &#123; b: <span class="string">&#x27;hello&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source)</span><br><span class="line"><span class="comment">// &#123; a: &#123; b: &#x27;hello&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>上述代码中，<code>a</code>被整个替换，不会得到<code>&#123; a: &#123; b: &#39;hello&#39;, d: &#39;e&#39; &#125; &#125;</code>这样的结果。</p><p><strong>数组的处理</strong></p><p>可以用来处理数组，但是会把数组视为对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure><p>上述代码中，以后一个数组的值替换了目标数组中对应下标的值。</p><p><strong>取值函数的处理</strong></p><p><code>Object.assign</code>只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">foo</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source)</span><br><span class="line"><span class="comment">// &#123; foo: 1 &#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>source</code>对象的<code>foo</code>属性是一个取值函数，<code>Object.assign</code>不会复制这个取值函数，只会拿到值以后，将这个值复制过去。</p><div class="note flat"><p>常见用途</p></div><p><strong>为对象添加属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, &#123; x, y &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为对象添加方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">SomeClass</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">anotherMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>克隆对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, origin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并多个对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">target, ...sources</span>) =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...sources)</span><br></pre></td></tr></table></figure><p><strong>为属性指定默认值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULTS</span> = &#123;</span><br><span class="line">  <span class="attr">logLevel</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processContent</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  options = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable constant_">DEFAULTS</span>, options)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>DEFAULTS</code>对象是默认值，<code>options</code>对象是用户提供的参数。<code>Object.assign</code>方法将<code>DEFAULTS</code>和<code>options</code>合并成一个新对象，如果两者有同名属性，则<code>options</code>的属性值会覆盖<code>DEFAULTS</code>的属性值。</p><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h3><p>ES5 的<code>Object.getOwnPropertyDescriptor()</code>获取一个对象中某个属性的描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="string">&#x27;123&#x27;</span>, length)</span><br><span class="line"><span class="comment">// &#123;value: 3, writable: false, enumrable: false, configurable：false&#125;</span></span><br></pre></td></tr></table></figure><p>ES2017 引入了<code>Object.getOwnPropertyDescriptors()</code>方法，返回指定对象所有自身属性（非继承属性）的描述对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">bar</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)</span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="OBject-keys"><a href="#OBject-keys" class="headerlink" title="OBject.keys()"></a>OBject.keys()</h3><p>ES5 引入了<code>Object.keys</code>方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="comment">// [&quot;foo&quot;, &quot;baz&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p><code>Object.values</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj)</span><br><span class="line"><span class="comment">// [&quot;bar&quot;, 42]</span></span><br></pre></td></tr></table></figure><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p><code>Object.entries()</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)</span><br><span class="line"><span class="comment">// [ [&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 42] ]</span></span><br></pre></td></tr></table></figure><h3 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h3><p><code>Object.fromEntries()</code>方法是<code>Object.entries()</code>的逆操作，用于将一个键值对数组转为对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">  [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>],</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p><code>Object.getPrototypeOf()</code>用于读取一个对象的原型对象，如果参数不是对象，会被自动转为对象。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Rectangle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rec = <span class="keyword">new</span> <span class="title class_">Rectangle</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(rec) === <span class="title class_">Rectangle</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(rec, <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(rec) === <span class="title class_">Rectangle</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果参数是 undefined 或 null，它们无法转为对象，所以会报错：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// TypeError: Cannot convert undefined or null to object</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// TypeError: Cannot convert undefined or null to object</span></span><br></pre></td></tr></table></figure><h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p><code>Object.setPrototypeOf</code>方法的作用与<code>__proto__</code>相同，用来设置一个对象的<code>prototype</code>对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法，如果第一个参数不是对象，会自动转为对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(object, prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">const</span> o = <span class="built_in">Object</span>.setPrototypeOf(&#123;&#125;, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>由于<code>undefined</code>和<code>null</code>无法转为对象，所以如果第一个参数是<code>undefined</code>或<code>null</code>，就会报错。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="literal">undefined</span>, &#123;&#125;)</span><br><span class="line"><span class="comment">// TypeError: Object.setPrototypeOf called on null or undefined</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="literal">null</span>, &#123;&#125;)</span><br><span class="line"><span class="comment">// TypeError: Object.setPrototypeOf called on null or undefined</span></span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(五)：函数的扩展</title>
      <link href="/archives/802ec22c.html"/>
      <url>/archives/802ec22c.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>在 ES6 之前，不能直接为函数的参数指定默认值，我们一般只能用变通的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    y = y || <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="string">&#x27;&#x27;</span> <span class="string">&quot; + y;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">log(&#x27;Hello&#x27;) // &#x27;Hello World&#x27;</span></span><br><span class="line"><span class="string">log(&#x27;Hello&#x27;, &#x27;China&#x27;) // &#x27;Hello China&#x27;</span></span><br><span class="line"><span class="string">log(&#x27;Hello&#x27;, &#x27;&#x27;) // &#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure><p>但是有个<code>缺点</code>，如果 y 赋值了，但是对应的布尔值为<code>false</code>的时候，默认值不起作用。所以我们要多加一个判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> y === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  y = <span class="string">&#x27;World&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 允许为函数的参数设置默认值，直接卸载参数定义的后面即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="string">&#x27;&#x27;</span> <span class="string">&quot; + y;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">log(&#x27;Hello&#x27;) // &#x27;Hello World&#x27;</span></span><br><span class="line"><span class="string">log(&#x27;Hello&#x27;, &#x27;China&#x27;) // &#x27;Hello China&#x27;</span></span><br><span class="line"><span class="string">log(&#x27;Hello&#x27;, &#x27;&#x27;) // &#x27;Hello &#x27;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>如果该值不严格等于<code>undefined</code>，默认值是不会生效的。还有一个容易忽略的地方，参数默认值不是传值的，而是每次都重新计算默认值的表达式的值。也就是说，函数的默认值是<code>惰性求值</code>的。</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">99</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">p = x + <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 101</span></span><br></pre></td></tr></table></figure><h3 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h3><p>参数默认值可以与解构赋值的默认值结合起来使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123; x, y = <span class="number">5</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;) <span class="comment">// 1 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;) <span class="comment">// 1 2</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// TypeError: Cannot read property &#x27;x&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>上述代码的 foo 函数，只是使用了对象的解构赋值默认值，没有使用函数的默认值，<strong>只有当 foo 函数的参数是一个对象的时候，变量 x 和 y 才会通过解构赋值生效，如果 foo 函数没有提供参数，变量 x 和 y 就不会生成，故而报错。通过提供函数的默认值，可以避免此错误。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123; x, y = <span class="number">5</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;) <span class="comment">// 1 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;) <span class="comment">// 1 2</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><p>我们来比较下面两种写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">m1</span>(<span class="params">&#123; x = <span class="number">0</span>, y = <span class="number">0</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">m2</span>(<span class="params">&#123; x, y &#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，都设置了默认值，区别是：<br>m1：函数参数的默认值是<code>空对象</code>，但是设置了对象解构赋值的默认值。<br>m2：函数参数的默认值是一个具有具体属性的对象，而没有设置对象解构赋值的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数没有参数的情况</span></span><br><span class="line"><span class="title function_">m1</span>() <span class="comment">// [0, 0]</span></span><br><span class="line"><span class="title function_">m2</span>() <span class="comment">// [0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都有值的情况</span></span><br><span class="line"><span class="title function_">m1</span>(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span> &#125;) <span class="comment">// [3, 8]</span></span><br><span class="line"><span class="title function_">m2</span>(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span> &#125;) <span class="comment">// [3, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 有值，y 无值的情况</span></span><br><span class="line"><span class="title function_">m1</span>(&#123; <span class="attr">x</span>: <span class="number">3</span> &#125;) <span class="comment">// [3, 0]</span></span><br><span class="line"><span class="title function_">m2</span>(&#123; <span class="attr">x</span>: <span class="number">3</span> &#125;) <span class="comment">// [3, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都无值的情况</span></span><br><span class="line"><span class="title function_">m1</span>(&#123;&#125;) <span class="comment">// [0, 0];</span></span><br><span class="line"><span class="title function_">m2</span>(&#123;&#125;) <span class="comment">// [undefined, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">m1</span>(&#123; <span class="attr">z</span>: <span class="number">3</span> &#125;) <span class="comment">// [0, 0]</span></span><br><span class="line"><span class="title function_">m2</span>(&#123; <span class="attr">z</span>: <span class="number">3</span> &#125;) <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="函数的-length-属性"><a href="#函数的-length-属性" class="headerlink" title="函数的 length 属性"></a>函数的 length 属性</h3><p>指定了默认值之后，函数的 length 属性将返回没有指定默认值的参数个数，也就是说，指定了默认值后，length 属性会失真。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">x = <span class="number">1</span>, y = <span class="number">2</span></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn1.<span class="property">length</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x, y</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn2.<span class="property">length</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="参数的默认值位置"><a href="#参数的默认值位置" class="headerlink" title="参数的默认值位置"></a>参数的默认值位置</h3><p>通常情况下，定义了默认值的参数，应该是函数的尾参数，因此这样比较容易看出到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是无法省略的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x=<span class="number">10</span>, y=<span class="number">20</span></span>) &#123;&#125;</span><br><span class="line">fn（<span class="number">1</span>，<span class="number">2</span>） <span class="comment">// 1 2</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>) <span class="comment">// 1 20</span></span><br><span class="line"><span class="title function_">fn</span>(,<span class="number">1</span>) <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>一旦设置了函数的默认值，函数进行声明初始化时，参数会<code>单独形成一个作用域</code>。等到初始化结束，这个作用域就会消失。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y = x</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">2</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数 f 调用时，参数<code>y = x</code>单独形成一个作用域，这个作用域里默认值 x 指向<code>函数第一个参数x</code>，而不是<code>全局变量x</code>，所以最后输出 2.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">y = x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>此时函数变量 y 的默认值 x 无定义，所以指向函数外的<code>全局变量x</code>。故最后输出 1。</p><p>下面这么写会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x = x</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure><p>上面函数的参数是<code>x = x</code>，单独形成一个作用域。其实执行的是<code>let x = x </code>，由于<code>暂时性死区</code>问题，这行代码会报错<code>x未定义 </code>。</p><p>我们看一个更复杂的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  x,</span></span><br><span class="line"><span class="params">  y = <span class="keyword">function</span> () &#123;</span></span><br><span class="line"><span class="params">    x = <span class="number">2</span></span></span><br><span class="line"><span class="params">  &#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span></span><br><span class="line">  <span class="title function_">y</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 3</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>函数 foo 中参数 y 的默认值是一个<code>函数</code>，<code>函数 </code>里的<code>x = 2</code>，其实这个 x 是指向第一个参数的，foo 函数里面又声明一个 x，<code>该变量与foo函数第一个参数x在不同的作用域中</code>，所以不是同一个变量，y()执行后，foo 函数内部变量 x 和全局变量 x 没有变。</p><p>如果把<code>var</code>去掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  x,</span></span><br><span class="line"><span class="params">  y = <span class="keyword">function</span> () &#123;</span></span><br><span class="line"><span class="params">    x = <span class="number">2</span></span></span><br><span class="line"><span class="params">  &#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  <span class="title function_">y</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 2</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>x = 3</code>变成一个赋值语句，操作的是<code>函数的第一个参数</code>，该赋值语句执行后，又执行了<code>y() </code>，也是对<code>函数的第一个参数</code>的操作，所以 foo 函数内的 log 输出 2。</p><h2 id="函数的-name-属性"><a href="#函数的-name-属性" class="headerlink" title="函数的 name 属性"></a>函数的 name 属性</h2><p>函数的 name 属性返回该函数的函数名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">foo.<span class="property">name</span> <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>ES6 对这个属性的行为做了一些修改，如果将一个匿名函数赋值给一个变量，ES5 的 name 属性会返回空字符串，而 ES6 会返回实际函数名</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &#x27;f&#x27;</span></span><br></pre></td></tr></table></figure><div class="note flat"><p>一些特殊情况：</p></div><ul><li>Function 构造函数返回的函数实例，name 属性值为 <code>anonymous</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>().<span class="property">name</span> <span class="comment">// &#x27;anonymous&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>bind</code> 方法返回的函数，name 属性值赋加上 bound 前缀</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">foo.<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &#x27;bound foo&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;.<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span>) <span class="comment">// &#x27;bound&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><p>用于获取函数的多余参数，这样就不需要使用<code>arguments </code>对象了。rest 参数搭配的变量是一个<code>数组 </code>，该变量将多余的参数放入数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>下面是用<code>rest</code>参数代替<code>arguments </code>变量的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arguments变量写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortNumbers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>).<span class="title function_">sort</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest参数写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sortNumbers</span> = (<span class="params">...numbers</span>) =&gt; numbers.<span class="title function_">sort</span>()</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>ES6 允许使用箭头定义函数,他的一个用处是简化回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = values.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">var</span> result = values.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br></pre></td></tr></table></figure><p>箭头函数和 rest 参数的结合:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">numbers</span> = (<span class="params">...numbers</span>) =&gt; numbers</span><br><span class="line"></span><br><span class="line"><span class="title function_">numbers</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// [1, 2, 3, 4];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">headAndTail</span> = (<span class="params">head, ...tail</span>) =&gt; [head, tail]</span><br><span class="line"></span><br><span class="line"><span class="title function_">headAndTail</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// [1, [2, 3, 4]]</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>箭头函数使用注意点</p></div><ul><li>函数体内的<code>this </code>对象，就是<code>定义时所在的对象</code>，而不是<code>使用时所在的对象</code>。</li><li>不可以当作<code>构造函数</code>，也就是说不可以用<code>new</code>命令。</li><li>不可以用<code>arguments</code>命令，该对象在函数体内不存在，但是可以用<code>rest</code>参数。</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</li></ul><p>上面四点中，第一点尤其重要，<code>this</code>对象的指向可以改变的，但在箭头函数中，<code>this</code>是固定的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(&#123; <span class="attr">id</span>: <span class="number">42</span> &#125;)</span><br><span class="line"><span class="comment">// id: 42</span></span><br></pre></td></tr></table></figure><p>在 foo 函数中有一个 setTimeout，里面的参数是一个箭头函数，这个箭头函数的定义生效是在<code>foo函数生成时</code>。如果是普通函数，<code>this</code>对象此时指向全局对象 window，这时就输出 21。<br>此例中，箭头函数导致<code>this</code>对象总是指向<code>函数定义生效时所在的对象 </code>（此例是{id: 42}），所以输出 42。</p><p>箭头函数可以让 setTimeout 里面的<code>this</code>对象，绑定在<code>定义时所在的作用域 </code>，而不是<code>使用时的作用域 </code>。我们看看另一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">s1</span> = <span class="number">0</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">s2</span> = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">s1</span>++, <span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s2</span>++</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="title class_">Timer</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;s1: &#x27;</span>, timer.<span class="property">s1</span>), <span class="number">3100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;s2: &#x27;</span>, timer.<span class="property">s2</span>), <span class="number">3100</span>)</span><br><span class="line"><span class="comment">// s1: 3</span></span><br><span class="line"><span class="comment">// s2: 0</span></span><br></pre></td></tr></table></figure><p>上述代码中，Timer 函数里定义了两个定时器，分别使用了箭头函数和普通函数。前者的<code>this</code>对象绑定在<code>定义时所在的作用域</code>（Timer 函数），后者的<code>this</code>对象绑定在<code>使用时所在的作用域</code>（全局对象 window）。所以，3100 毫秒之后，<code>timer.s1</code>被更新了 3 次，而<code>timer.s2 </code>一次都没更新。</p><p>箭头函数可以让<code>this</code>指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM 事件的回调函数封装在一个对象里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">      <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">event</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">doSomething</span>(event.<span class="property">type</span>),</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">doSomething</span>: <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Handling &#x27;</span> + type + <span class="string">&#x27; for &#x27;</span> + <span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，init 方法中使用了箭头函数，这导致箭头函数里面的<code>this</code>，总是指向<code>handler对象</code>。否则<code>this.doSomething</code>会报错，因为没有用箭头函数的话，<code>this</code>对象指向 document 对象。</p><p><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是<code>箭头函数根本没有自己的this </code>，导致<code>内部的this </code>就是<code>外层代码块的this</code>。正是因为它没有 this，所以也就不能用作构造函数。</p><p>箭头函数用 ES5 实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id:&#x27;</span>, _this.<span class="property">id</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，解释的很清楚，箭头函数里面的<code>_this </code>是外层 foo 函数内的<code>this</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = foo.<span class="title function_">call</span>(&#123; <span class="attr">id</span>: <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = f.<span class="title function_">call</span>(&#123; <span class="attr">id</span>: <span class="number">2</span> &#125;)()() <span class="comment">// id: 1</span></span><br><span class="line"><span class="keyword">var</span> t2 = <span class="title function_">f</span>().<span class="title function_">call</span>(&#123; <span class="attr">id</span>: <span class="number">3</span> &#125;)() <span class="comment">// id: 1</span></span><br><span class="line"><span class="keyword">var</span> t3 = <span class="title function_">f</span>()().<span class="title function_">call</span>(&#123; <span class="attr">id</span>: <span class="number">4</span> &#125;) <span class="comment">// id: 1</span></span><br></pre></td></tr></table></figure><p>上述代码中，只有一个<code>this</code>，就是 foo 函数的<code>this</code>，所以 t1，t2，t3 输出同样的结果。</p><h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p><code>尾调用</code>：就是指某个函数的<code>最后一步</code>是调用另一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">g</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码，函数 f 的最后一步是调用函数 g，这就叫做<code>尾调用</code>。</p><p>我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数 A 的内部调用函数 B，那么在 A 的调用帧上方，还会形成一个 B 的调用帧。等到 B 运行结束，将结果返回到 A，B 的调用帧才会消失。如果函数 B 内部还调用函数 C，那就还有一个 C 的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。</p><p>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> m = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">g</span>(m + n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">g</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title function_">g</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>面代码中，如果函数 g 不是尾调用，函数 f 就需要保存内部变量 m 和 n 的值、g 的调用位置等信息。但由于调用 g 之后，函数 f 就结束了，所以执行到最后一步，完全可以删除 f(x)的调用帧，只保留 g(3)的调用帧。</p><p>这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。</p><div class="note danger flat"><p>注意:只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addOne</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> one = <span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> b + one</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">inner</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数不会进行尾调用优化，因为内层函数 inner 用到了外层函数 addOne 的内部变量 one。</p><h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">factorial</span>(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>上面代码是一个阶乘函数，计算 n 的阶乘，最多需要保存 n 个调用记录，复杂度 O(n) 。</p><p>如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n, total</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">factorial</span>(n - <span class="number">1</span>, n * total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">factorial</span>(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><h2 id="递归函数的改写"><a href="#递归函数的改写" class="headerlink" title="递归函数的改写"></a>递归函数的改写</h2><p>尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。比如上面的例子，阶乘函数 factorial 需要用到一个中间变量 total，那就把这个中间变量改写成函数的参数。这样做的缺点就是不太直观，第一眼很难看出来，为什么计算 5 的阶乘，需要传入两个参数 5 和 1？</p><p>两个方法解决。</p><p>方法 1：再提供一个正常形式的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tailFactorial</span>(<span class="params">n, total</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">tailFactorial</span>(n - <span class="number">1</span>, n * total)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">tailFactorial</span>(n, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码还可以用<code>柯里化</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn, n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">m</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, m, n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tailFactorial</span>(<span class="params">n, total</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">tailFactorial</span>(n - <span class="number">1</span>, n * total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factorial = <span class="title function_">currying</span>(tailFactorial, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">factorial</span>(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>方法 2：采用 ES6 的函数默认值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">factorial</span>(n - <span class="number">1</span>, n * total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">factorial</span>(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>总结一下，递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现，这就是为什么尾递归对这些语言极其重要。对于其他支持尾调用优化的语言（比如 Lua，ES6），只需要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p><p>这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p><ul><li>func.arguments：返回调用时函数的参数。</li><li>func.caller：返回调用当前函数的那个函数。</li></ul><p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p><h2 id="尾递归优化的实现"><a href="#尾递归优化的实现" class="headerlink" title="尾递归优化的实现"></a>尾递归优化的实现</h2><p>尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。</p><p>它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用循环换掉递归。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sum</span>(x + <span class="number">1</span>, y - <span class="number">1</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">100000</span>)</span><br><span class="line"><span class="comment">// Uncaught RangeError: Maximum call stack size exceeded(…)</span></span><br></pre></td></tr></table></figure><p>上面代码中，sum 是一个递归函数，参数 x 是需要累加的值，参数 y 控制递归次数。一旦指定 sum 递归 100000 次，就会报错，提示超出调用栈的最大次数。</p><p>蹦床函数（trampoline）可以将递归执行转为循环执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (f &amp;&amp; f <span class="keyword">instanceof</span> Function) &#123;</span><br><span class="line">    f = <span class="title function_ invoke__">f</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是蹦床函数的一个实现，它接受一个函数 f 作为参数。只要 f 执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。</p><p>然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum.<span class="title function_">bind</span>(<span class="literal">null</span>, x + <span class="number">1</span>, y - <span class="number">1</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，sum 函数的每次执行，都会返回自身的另一个版本。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(四)：数组的扩展</title>
      <link href="/archives/1c5148b1.html"/>
      <url>/archives/1c5148b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ES6 对数组进行了一些扩展，包括原型方法的扩展和一些实例的运用</p><h2 id="Array-类上的扩展"><a href="#Array-类上的扩展" class="headerlink" title="Array 类上的扩展"></a>Array 类上的扩展</h2><p>Array 是一个类，也可以看做一个函数，他的返回值是一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>(x, y, z) <span class="comment">// [x, y, z]</span></span><br></pre></td></tr></table></figure><p><i class="fa fa-cog fa-spin"></i>但是，如果只有一个参数，并且参数是数字，那么返回有 n 个空位的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>(<span class="number">7</span>) <span class="comment">// [empty x 7]</span></span><br></pre></td></tr></table></figure><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>为了解决上面的这个问题，在 ES6 中扩展了这个新的方法，在参数是一个数字的时候返回的依然是一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">7</span>) <span class="comment">// [7]</span></span><br></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p><code>Array.from()</code> 方法用于将两类对象转为真正的数组：类似数组的对象，和可遍历对象（包括 ES6 新增的数据结构<code>set</code> 和 <code>map</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;123&#x27;</span>) = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="数组实例上扩展的方法"><a href="#数组实例上扩展的方法" class="headerlink" title="数组实例上扩展的方法"></a>数组实例上扩展的方法</h2><h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h3><p>数组实例的<code>copyWhthin()</code> 方法会在当前数组内部指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组，也就是说，这个方法会修改当前的的数据</p><ul><li>语法：它接受 3 个参数，这三个参数都应该是数值，如果不是数值，那么会自动转成数值<ul><li>target（必选）：从该位置开始替换数据</li><li>start（可选）：从该位置开始读取数据，默认为零，如果为负数，表示倒数</li><li>end（可寻）：到该位置停止读取数据，默认等于数组长度，如果为负数，表示倒数。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">copyWithin</span>(target, (start = <span class="number">0</span>), (endnote = <span class="variable language_">this</span>.<span class="property">length</span>))</span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">ary.<span class="title function_">copyWithin</span>(<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>) <span class="comment">//  [1, 2, 3, 4, 3, 4, 7, 8]</span></span><br><span class="line"><span class="comment">// 继续替换，原数组的length不变，如果有超出部分，会自动会截取</span></span><br><span class="line">ary.<span class="title function_">copyWithin</span>(<span class="number">3</span>, <span class="number">2</span>) <span class="comment">// [1, 2, 3, 3, 4, 3, 4, 7]</span></span><br></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h3><p><code>fill()</code> 方法使用给定值填充一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">ary.<span class="title function_">fill</span>(<span class="number">7</span>) = [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p><code>fill()</code> 方法还可以接收第二个和第三个参数，用于指定填充的起始位置和结束位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">ary.<span class="title function_">fill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>) <span class="comment">// [&#x27;a&#x27;, 7, 7, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><p>上面的代码表示，<code>fill()</code> 方法从 1 号位开始想原数组填充 7，到 3 位置之前结束，你可以简单记为：<code>包前不包后 </code>，基本上所有数组实例上的方法，参数是从索引 n 到索引 m 的都是 包含 n 不包含 m。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter()</code> 表示过滤，遍历数组，根据返回值去过滤原数组，并返回一个新数组,原数组不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ary2 = ary.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="comment">//如果返回true就留下当前项，false不留下</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> item === <span class="string">&#x27;number&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary2) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="find-和-findIndex"><a href="#find-和-findIndex" class="headerlink" title="find()和 findIndex()"></a>find()和 findIndex()</h3><p>数组实例的<code>find()</code>方法用于找出第一个符合条件的数组成员，他的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为 true 的成员，然后返回该成员，如果没有符合条件的成员，则返回 <code>undefined</code>。注意，他只返回第一个找到的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">ary.<span class="title function_">find</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>) <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><p><code>findIndex()</code> 和 <code>find()</code> 类似，只不过返回的是索引值，如果全部都不符合，返回 -1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">ary.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p><code>Array.prototype.includes()</code> 方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串<code>includes()</code> 方法类似。</p><p>这个方法的第二个参数表示搜索的起始位置，默认为零，如果第二个参数为负数，则表示倒数，如果这时他大于数组的长度（比如参数为 -4 ，数组长度为 3），则会重置为从 0 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary.<span class="title function_">includes</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// false</span></span><br><span class="line">ary.<span class="title function_">includes</span>(<span class="number">1</span>, -<span class="number">1</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p>也是一个遍历的方法，遍历数组，如果每一项都返回 <code>true</code> ,最后结果为 <code>true</code>, 只要有一个为 <code>false</code> ,结果为 <code>false</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> item === <span class="string">&#x27;number&#x27;</span></span><br><span class="line">&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">ary.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> item === <span class="string">&#x27;number&#x27;</span></span><br><span class="line">&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>遍历数组，只要有一项返回 <code>true</code> ,最后结果为 <code>true</code>, 只有全部为 <code>false</code> 时 ,结果为 <code>false</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">ary.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> item === <span class="string">&#x27;number&#x27;</span></span><br><span class="line">&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="reduce-，reduceRight"><a href="#reduce-，reduceRight" class="headerlink" title="reduce()，reduceRight()"></a>reduce()，reduceRight()</h3><p><code>reduce()</code>表示迭代，比如我们求和的时候可以用这个方法.他的第二个参数，会作为初始的 prev</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">  <span class="comment">// prev 上一次的返回值，item 当前项</span></span><br><span class="line">  <span class="keyword">return</span> prev + item</span><br><span class="line">&#125;, <span class="number">10</span>) <span class="comment">// 输出：25</span></span><br></pre></td></tr></table></figure><p><code>reduceRight()</code> 与<code>reduce()</code>类似，只不过是从右往左开始。</p><h3 id="entries-key-values"><a href="#entries-key-values" class="headerlink" title="entries(),key(),values()"></a>entries(),key(),values()</h3><p>他们都返回一个遍历器对象，可以用 for…of 循环遍历，唯一的区别在于，<code>key()</code> 是对键名的遍历，<code>values()</code> 是对键值的遍历， <code>entries()</code> 是对键值对的遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> ary.<span class="title function_">key</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> ary.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(elem)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> ary.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index, elem)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// 1 &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h2><p>数组的空位指数组的某一个位置没有任何值，比如<code>Array</code> 构造函数返回的数组都是空位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>注意：空位不是 <code>undefined</code>，一个位置的值等于 <code>undefined</code>依然是有值的，空位是没有任何值的，<code>in</code> 运算符可以说明这一点</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="literal">undefined</span>, ndefined, <span class="literal">undefined</span>] <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> [, , ,] <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面的代码说明，第一个数组的 0 号位置有值，但第二个数组没有值。</p><div class="note danger flat"><p>ES5 中对空位的处理不一致，大多数情况下会忽略空位</p></div><ul><li><code>forEach()</code>、<code>filter()</code>、<code>every()</code>、和 <code>some()</code> 会跳过空位</li><li><code>map()</code> 会跳过空位，但会保留这个值</li><li><code>join()</code> 和 <code>toString()</code> 会将空位视为<code>undefined</code>，而<code>undefined</code>和 <code>null</code> 会被理解成空字符串。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[, <span class="string">&#x27;a&#x27;</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">x, i</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i))   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">[, <span class="string">&#x27;a&#x27;</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="number">1</span>) <span class="comment">// [, 1]</span></span><br><span class="line"></span><br><span class="line">[, <span class="string">&#x27;a&#x27;</span>, <span class="literal">undefined</span>, <span class="literal">null</span>].<span class="title function_">join</span>(<span class="string">&#x27;#&#x27;</span>) <span class="comment">// &#x27;#a##&#x27;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>ES6 中明确将空位转为<code>undefined</code></p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="string">&#x27;a&#x27;</span>, , <span class="string">&#x27;b&#x27;</span>]) <span class="comment">// [&#x27;a&#x27;, undefined, &#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符是三个点（…），他如同 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><p>因此可以替代数组的<code>apply</code> 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>, <span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br></pre></td></tr></table></figure><div class="note flat"><p>扩展运算符的一些应用</p></div><ul><li>合并数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">concat</span>(more)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</span><br></pre></td></tr></table></figure><ul><li>与解构赋值结合</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line">a = list[<span class="number">0</span>], rest = list.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[a, ...rest] = list</span><br></pre></td></tr></table></figure><ul><li>字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;[...<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="comment">//  [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(三)：字符串的扩展</title>
      <link href="/archives/Infinity.html"/>
      <url>/archives/Infinity.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ES6 加强了对 Unicode 的支持，并且扩展了字符串对象。</p><h2 id="字符串原型上扩展的方法"><a href="#字符串原型上扩展的方法" class="headerlink" title="字符串原型上扩展的方法"></a>字符串原型上扩展的方法</h2><p>我们一般可以通过这种方法来查看，原型上有哪些方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><h3 id="includes-startsWith"><a href="#includes-startsWith" class="headerlink" title="includes(),startsWith()"></a>includes(),startsWith()</h3><p><code>indcludes()</code> 返回布尔值，表示是否找到了参数字符串</p><p><code>startsWith()</code> 返回布尔值，表示参数字符串是否存在源字符串的头部</p><ul><li>语法:第一个参数指定要查询的字符串，第二个参数（可选）是数字，表示开始查找的位置，这个参数如果不是数字将会转成数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">includes</span>(<span class="string">&#x27;指定字符&#x27;</span>, <span class="string">&#x27;开始查找的位置（可选参数）&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>) <span class="comment">// false</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&#x27;c&#x27;</span>, <span class="literal">null</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>startsWith()</code> 用法类似 <code>indcludes()</code></p><h3 id="endWith"><a href="#endWith" class="headerlink" title="endWith()"></a>endWith()</h3><p><code>endWith()</code> 返回布尔值，表示参数字符串是否存在源字符串的尾部</p><ul><li>语法：第一个参数指定要查询的字符串，第二个参数表示从前 n 个中查看，它针对前 n 个字符，而<code>indcludes()</code> <code>startsWith()</code> 针对第 n 个位置到字符串结束位置之间的字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">endWith</span>(<span class="string">&#x27;指定字符&#x27;</span>, <span class="string">&#x27;从前n个中查看（可选参数）&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="repeat（）"><a href="#repeat（）" class="headerlink" title="repeat（）"></a>repeat（）</h3><p><code>repeat()</code> 返回一个新字符串，表示将原字符串重复 n 次。</p><ul><li>语法：参数取整。如果是小数，会被取整；如果是负数或者 infinity，会报错；如果参数是 0 到-1 之间的小数，等同于 0；如果参数是字符串，则会转换成数字。参数 NaN 等同于 0。</li><li>例子：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>) <span class="comment">// &#x27;aaa&#x27;</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2.9</span>) <span class="comment">// &#x27;aa&#x27;</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>.<span class="title function_">repeat</span>(-<span class="number">2</span>) <span class="comment">//报错</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>.<span class="title function_">repeat</span>(-<span class="number">0.3</span>) <span class="comment">// ‘’</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>.<span class="title function_">repeat</span>(infinity) <span class="comment">//报错</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>.<span class="title function_">repeat</span>(‘a’) <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="padStart-，padEnd"><a href="#padStart-，padEnd" class="headerlink" title="padStart()，padEnd()"></a>padStart()，padEnd()</h3><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或者尾部进行补全。 <code>padStart()</code> 用于头部补， <code>padEnd()</code> 用于尾部补全 。</p><p>按照指定字符补全字符串的指定长度。</p><ul><li>语法：第一个参数：长度，第二个参数：指定字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">padStart</span>(length, <span class="string">&#x27;指定字符&#x27;</span>)</span><br><span class="line"><span class="title function_">padEnd</span>(length, <span class="string">&#x27;指定字符&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line">str.<span class="title function_">padStart</span>(<span class="number">5</span>, <span class="string">&#x27;x&#x27;</span>) <span class="comment">// &#x27;xxxab&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line">str.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&#x27;x&#x27;</span>) <span class="comment">// &#x27;abxxx&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>模板字符串是增强版的字符串,用反引号`` `标识。它可以当做普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通字符串</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">str1 += str <span class="number">2</span>  <span class="comment">// &#x27;helloworld&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串嵌入变量</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;world&#x27;</span><span class="string">`&lt;h1 class=&#x27;<span class="subst">$&#123;str1&#125;</span>&#x27;&gt;<span class="subst">$&#123;str2&#125;</span>&lt;/h1&gt; `</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多行字符串</span></span><br><span class="line">;<span class="string">`hello</span></span><br><span class="line"><span class="string">world`</span></span><br></pre></td></tr></table></figure><p>如果模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板中使用表达式</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>]<span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x + y&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>模板字符串甚至还能引用对象属性，调用函数，嵌套。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(二)：解构赋值</title>
      <link href="/archives/3babbc01.html"/>
      <url>/archives/3babbc01.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ES6 允许按照一定模式从数组和对象中提取值，然后对变量进行赋值，这被称为解构赋值。</p><h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>以前，我们为变量赋值一般都是直接指定值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>但是在 ES6 中，我们可以写成这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>上面的代码表示可以从数组中提取值，按照对应的位置对应变量赋值，他的本质就是一种 <code>模式匹配 </code> ，只要等号两边的模式相同，左边的变量就会被赋予对应的值，比如这种嵌套结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar]], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>]], <span class="number">3</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="当左右不匹配的情况"><a href="#当左右不匹配的情况" class="headerlink" title="当左右不匹配的情况"></a>当左右不匹配的情况</h3><p>正常情况下，我们的左右都应该是相同的，但是有时候我们也会遇到一些其他情况</p><ul><li>变量数多于值或变量找不到对应的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, m, n] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这种情况下就会解构不成功，相当于变量只定义未初始化，他的值是<code>undefined</code></p><ul><li>变量数少于值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, m, n] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>这种情况下，属于不完全结构，但是可以成功。</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul><li>变量有对应的值时候，会被赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="number">10</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>当变量没有对应的值，就会使用默认值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="number">10</span>] = [<span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="number">10</span>] = [<span class="number">1</span>, <span class="literal">undefined</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>ES6 内部使用严格相等运算符(===)判断一个位置是否有值，所以，如果一个数组成员不严格等于<code>undefined </code>，默认值是不会生效的。</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>比如上面的代码中，如果一个数组成员是<code>null </code> ，默认值就不会生效，因为<code>null </code>并不严格等于 <code>undefined</code> 。</p><ul><li>如果默认值是一个表达式（函数），那么这个表达式是<code>惰性求值 </code>的，即只有在用到的时候才会求值，如果能取到值，这个表达式根本不会执行。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="title function_">f</span>()] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y&#x27;</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="省略的情况"><a href="#省略的情况" class="headerlink" title="省略的情况"></a>省略的情况</h3><p>这种情况，我们只要将对应的位置空出来就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y&#x27;</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="不定参数赋值"><a href="#不定参数赋值" class="headerlink" title="不定参数赋值"></a>不定参数赋值</h3><p>比如说下面的代码中，我们想把<code>2,3,4,5</code>的值，都赋值给 <code>y </code>，我们就可以用到不定参数赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let [x, y] = [1, 2, 3, 4, 5]</span><br><span class="line">console.log(&#x27;x&#x27;) // 1</span><br><span class="line">console.log(&#x27;y&#x27;) // 2</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, ...y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y&#x27;</span>) <span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>这个<code>... </code> 是一个拓展运算符。</p><div class="note danger flat"><p>如果等号的右边不是数组（或者严格来说不是可遍历的结构），那么就会报错,比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let [foo] = 1;</span><br><span class="line"></span><br><span class="line">let [foo] = false;</span><br><span class="line"></span><br><span class="line">let [foo] = NaN;</span><br><span class="line"></span><br><span class="line">let [foo] = null;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="对象的结构赋值"><a href="#对象的结构赋值" class="headerlink" title="对象的结构赋值"></a>对象的结构赋值</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>类似于数组，结构都是一样的。但是值得注意的是，数组的元素是按次序排列的，变量的取值是由它的位置决定的，而对象的属性没有次序，变量必须与属性同名才能取到正确的值</p><ul><li>如果变量名和属性名是一样的，可以直接省略写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name， age&#125; = &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><ul><li>如果变量名和属性名不一样，我们必须这样写：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: newName, <span class="attr">age</span>: newAge &#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newName) <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newAge) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h3><p>与数组类似，对象的解构赋值我们同样可以设置默认值。默认值生效的条件也与数组类似：对象的属性值必须严格等于<code>undefined </code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x = <span class="number">3</span> &#125; = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y = <span class="number">5</span> &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="嵌套结构的对象"><a href="#嵌套结构的对象" class="headerlink" title="嵌套结构的对象"></a>嵌套结构的对象</h3><p>与数组类似，结构也可以用于嵌套结构的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">p: &#123;</span><br><span class="line">&#x27;hello&#x27;,</span><br><span class="line">&#123;y: &#x27;world&#x27;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let &#123;p, p: [x, &#123;y&#125;] &#125; = obj</span><br><span class="line">console.log(x) // hello</span><br><span class="line">console.log(y) // world</span><br><span class="line">console.log(p) // &#123;&#x27;hello&#x27;,&#123;y: &#x27;world&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p><strong>注意</strong>：如果结构模式是嵌套对象，而且子对象所在的副属性不存在，那么将会报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let &#123;foo: &#123;bar&#125;&#125; = &#123;bar： ’baz‘&#125; //报错</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="对已经声明的变量用于解构赋值"><a href="#对已经声明的变量用于解构赋值" class="headerlink" title="对已经声明的变量用于解构赋值"></a>对已经声明的变量用于解构赋值</h3><p><code>错误的写法</code>，这种情况下，{x} 会被理解成一个代码块，ES6 有块级作用域，就会导致语法报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>正确的写法 </code>，我们应该使用一个圆括号把它包起来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x</span><br><span class="line">;(&#123; x &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="对数组进行对象属性的结构"><a href="#对数组进行对象属性的结构" class="headerlink" title="对数组进行对象属性的结构"></a>对数组进行对象属性的结构</h3><p>数组的本质就是特殊的对象，因此可以对数组进行对象属性的结构赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="number">0</span>: first, <span class="number">2</span>: last &#125; = arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(last) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="字符串、数值和布尔值的解构赋值"><a href="#字符串、数值和布尔值的解构赋值" class="headerlink" title="字符串、数值和布尔值的解构赋值"></a>字符串、数值和布尔值的解构赋值</h2><p>字符串也可以进行解构赋值，如果是使用数组这样的形式，此时字符串被转换成了一个类似数组的对象.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b] = <span class="string">&#x27;hi&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// h</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// i</span></span><br></pre></td></tr></table></figure><p>类数组对象都会有一个 length 属性，因此，还可以对这个属性解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">length</span>: len &#125; = <span class="string">&#x27;hehe&#x27;</span></span><br><span class="line"><span class="title function_">console</span>(len) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>使用对象的形式，如果等号右边不是对象，默认转为对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a &#125; = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">__proto__</span>: a &#125; = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// Number &#123;0, constructor: ƒ, …&#125;</span></span><br></pre></td></tr></table></figure><h2 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h2><p>函数的参数也可以使用解构赋值,也可以设置默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getA</span>(<span class="params">[a, b, c, ...d]</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d) <span class="comment">// 1 2 3 [4, 5]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getA</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>在设置默认值的时候，你要注意下面两种写法，你会得到不一样的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getB</span>(<span class="params">&#123; name = <span class="string">&#x27;bar&#x27;</span>, age = <span class="number">10</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getB</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;) <span class="comment">// foo 20</span></span><br><span class="line"><span class="title function_">getB</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;) <span class="comment">// foo 20</span></span><br><span class="line"><span class="title function_">getB</span>(&#123;&#125;) <span class="comment">// bar 10</span></span><br><span class="line"><span class="title function_">getB</span>() <span class="comment">// bar 10</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getC</span>(<span class="params">&#123; name, age &#125; = &#123; name: <span class="string">&#x27;bar&#x27;</span>, age: <span class="number">20</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getC</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;) <span class="comment">// foo 10</span></span><br><span class="line"><span class="title function_">getC</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;) <span class="comment">// foo undefined</span></span><br><span class="line"><span class="title function_">getC</span>(&#123;&#125;) <span class="comment">// undefined undefined</span></span><br><span class="line"><span class="title function_">getC</span>() <span class="comment">// bar 20</span></span><br></pre></td></tr></table></figure><p>这是因为，下面的代码是为函数的参数指定默认值，而不是为变量指定默认值，所以会得到与上面的代码不同的结果</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6标准入门(一)：let和const定义变量</title>
      <link href="/archives/332d35b.html"/>
      <url>/archives/332d35b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>es5 时候只有 var 定义变量，只有全局作用域和函数作用域。es6 新增 let 和 const，存在块级作用域。<br>这里简述一下我对于 var，let，和 const 之间的区别的个人理解。</p><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>var 定义的变量可以修改，如果不初始化会输出 undefined，不会报错。在全局作用下声明的变量，相当于给 window 增加了一个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">// var a;//不会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数外var定义a：&#x27;</span> + a) <span class="comment">//可以输出a=1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">  a = <span class="number">4</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数内var定义a：&#x27;</span> + a) <span class="comment">//可以输出a=4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">change</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数调用后var定义a为函数内部修改值：&#x27;</span> + a) <span class="comment">//可以输出a=4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)</span><br></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const 定义的是一个常量，不可以重新赋值，而且必须初始化。没有变量提升，也不会给 window 增加属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="number">2</span> <span class="comment">//正确</span></span><br><span class="line"><span class="comment">// const b;//错误，必须初始化</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数外const定义b：&#x27;</span> + b) <span class="comment">//有输出值</span></span><br><span class="line"><span class="comment">// b = 5;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;函数外修改const定义b：&#x27; + b);//无法输出</span></span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let 是块级作用域，函数内部使用 let 定义后，对函数外部无影响。没有变量提升，也不会给 window 增加属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log(c) // 报错</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数外let定义c：&#x27;</span> + c) <span class="comment">//输出c=3</span></span><br><span class="line"><span class="comment">// let c = 3 // 报错，不允许重复声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> c = <span class="number">6</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数内let定义c：&#x27;</span> + c) <span class="comment">//输出c=6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">change</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数调用后let定义c不受函数内部定义影响：&#x27;</span> + c) <span class="comment">//输出c=3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>) <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《ES6 标准入门》（第 3 版） 阮一峰著</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6标准入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5中的一些扩展</title>
      <link href="/archives/f78977b6.html"/>
      <url>/archives/f78977b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h2><p>1、js 对象(数组) –&gt; json 对象(数组)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj / arr)</span><br></pre></td></tr></table></figure><p>2、json 对象(数组) –&gt; js 对象(数组)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(json)</span><br></pre></td></tr></table></figure><p>上面这两个方法是 ES5 中提供的。</p><p>我们要记住，我们通常说的“json 字符串”，只有两种：<strong>json 对象、json 数组</strong>。</p><p><code>typeof json字符串</code>的返回结果是 string。</p><h2 id="Object-的扩展"><a href="#Object-的扩展" class="headerlink" title="Object 的扩展"></a>Object 的扩展</h2><p>ES5 给 Object 扩展了一些静态方法，常用的有 2 个，我们接下来讲解。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(prototype, [descriptors])</span><br></pre></td></tr></table></figure><p>作用: 以指定对象为原型，创建新的对象。同时，第二个参数可以为为新的对象添加新的属性，并对此属性进行描述。</p><p><strong>举例 1</strong>：（没有第二个参数时）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">username</span>: <span class="string">&#x27;smyhvae&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">address</span>: <span class="string">&#x27;shenzhen&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br></pre></td></tr></table></figure><p>打印结果：</p><p><img src="http://img.smyhvae.com/20180401_2150.png"></p><p>我们发现，obj1 成为了 obj2 的原型。</p><p><strong>举例 2</strong>：（有第二个参数时）</p><p>第二个参数可以给新的对象添加新的属性。我们修改上面的代码，尝试给 obj2 添加新属性<code>sex</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">username</span>: <span class="string">&#x27;smyhvae&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">address</span>: <span class="string">&#x27;shenzhen&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj1, &#123;</span><br><span class="line">  <span class="attr">sex</span>: &#123;</span><br><span class="line">    <span class="comment">//给obj2添加新的属性`sex`。注意，这一行的冒号不要漏掉</span></span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">//通过value关键字设置sex的属性值</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br></pre></td></tr></table></figure><p>上方代码中，我们通过第 5 行的 sex 给 obj2 设置了一个新的属性<code>sex</code>，但是要通过<code>value</code>来设置属性值（第 6 行）。</p><p>设置完属性值后，这个属性值默认是不可修改的，要通过<code>writable</code>来设置。总而言之，这几个关键字的解释如下：</p><ul><li><code>value</code>：设置属性值。</li><li><code>writable</code>：标识当前属性值是否可修改。如果不写的话，默认为 false，不可修改。</li><li><code>configurable</code>：标识当前属性是否可以被删除。默认为 false，不可删除。</li><li><code>enumerable</code>：标识当前属性是否能用 for in 枚举。 默认为 false，不可。</li></ul><h4 id="单独设置属性"><a href="#单独设置属性" class="headerlink" title="单独设置属性"></a>单独设置属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj2, &#x27;sex&#x27;, &#123;</span><br><span class="line">        value: &#x27;cc&#x27;,</span><br><span class="line">        writable: true,</span><br><span class="line">        configurable: true,</span><br><span class="line">        enumerable: true,</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>这个方法有点难理解。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(object, descriptors)</span><br></pre></td></tr></table></figure><p><strong>作用</strong>：为指定对象定义扩展多个属性。</p><p>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;smyh&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;vae&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj2, &#123;</span><br><span class="line">  <span class="attr">fullName</span>: &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="comment">//监听扩展属性，当扩展属性发生变化的时候自动调用，自动调用后将变化的值作为实参注入到set函数</span></span><br><span class="line">      <span class="keyword">var</span> names = data.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>]</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">lastName</span> = names[<span class="number">1</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">fullName</span>)</span><br><span class="line">obj2.<span class="property">firstName</span> = <span class="string">&#x27;tim&#x27;</span></span><br><span class="line">obj2.<span class="property">lastName</span> = <span class="string">&#x27;duncan&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">fullName</span>)</span><br><span class="line">obj2.<span class="property">fullName</span> = <span class="string">&#x27;kobe-bryant&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">fullName</span>)</span><br></pre></td></tr></table></figure><ul><li><p>get ：用来获取当前属性值的回调函数</p></li><li><p>set ：修改当前属性值得触发的回调函数，并且实参即为修改后的值</p></li></ul><p>存取器属性：setter,getter 一个用来存值，一个用来取值。</p><h2 id="Object-的扩展（二）"><a href="#Object-的扩展（二）" class="headerlink" title="Object 的扩展（二）"></a>Object 的扩展（二）</h2><p>obj 对象本身就自带了两个方法。格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get 属性名()&#123;&#125; 用来得到当前属性值的回调函数</span><br><span class="line"></span><br><span class="line">set 属性名()&#123;&#125; 用来监视当前属性值变化的回调函数</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;bryant&#x27;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> names = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastName</span> = names[<span class="number">1</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">fullName</span>)</span><br><span class="line">obj.<span class="property">fullName</span> = <span class="string">&#x27;curry stephen&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">fullName</span>)</span><br></pre></td></tr></table></figure><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><blockquote><p>下面讲的这几个方法，都是给数组的实例用的。</p></blockquote><p><strong>方法 1</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">indexOf</span>(value)</span><br></pre></td></tr></table></figure><p>作用：获取 value 在数组中的第一个下标。</p><p><strong>方法 2</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">lastIndexOf</span>(value)</span><br></pre></td></tr></table></figure><p>作用：获取 value 在数组中的最后一个下标。</p><p><strong>方法 3</strong>：遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><p><strong>方法 4</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><p>作用：遍历数组返回一个新的数组，返回的是<strong>加工之后</strong>的新数组。</p><p><strong>方法 5</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><p>作用：遍历过滤出一个新的子数组，返回条件为 true 的值。</p><h2 id="函数-function-的扩展：bind"><a href="#函数-function-的扩展：bind" class="headerlink" title="函数 function 的扩展：bind()"></a>函数 function 的扩展：bind()</h2><blockquote><p>ES5 中新增了<code>bind()</code>函数来改变 this 的指向。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">bind</span>(obj)</span><br></pre></td></tr></table></figure><p>作用：将函数内的 this 绑定为 obj, 并将函数返回。</p><p><strong>面试题</strong>: call()、apply()和 bind()的区别：</p><ul><li><p>都能改变 this 的指向</p></li><li><p>call()/apply()是<strong>立即调用函数</strong></p></li><li><p>bind()：绑定完 this 后，不会立即调用当前函数，而是<strong>将函数返回</strong>，因此后面还需要再加<code>()</code>才能调用。</p></li></ul><p>PS：bind()传参的方式和 call()一样。</p><p><strong>分析</strong>：</p><p>为什么 ES5 中要加入 bind()方法来改变 this 的指向呢？因为 bind()不会立即调用当前函数。</p><p>bind()通常使用在回调函数中，因为回调函数并不会立即调用。如果你希望在回调函数中改变 this，不妨使用 bind()。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5中的严格模式</title>
      <link href="/archives/e6b31439.html"/>
      <url>/archives/e6b31439.html</url>
      
        <content type="html"><![CDATA[<h2 id="ES-的几个重要版本"><a href="#ES-的几个重要版本" class="headerlink" title="ES 的几个重要版本"></a>ES 的几个重要版本</h2><ul><li><p>ES5 : 09 年发布。</p></li><li><p>ES6(ES2015) : 2015 年发布，也称为 ECMA2015。</p></li><li><p>ES7(ES2016) : 2016 年发布，也称为 ECMA2016 (变化不大)。</p></li></ul><h2 id="严格模式的理解"><a href="#严格模式的理解" class="headerlink" title="严格模式的理解"></a>严格模式的理解</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>理解</strong>：除了正常运行模式(混杂模式)，ES5 添加了第二种运行模式：”严格模式”（strict mode）。</p><p>顾名思义，这种模式使得 Javascript 在更严格的语法条件下运行。</p><p><strong>目的</strong>：</p><ul><li><p>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为</p></li><li><p>消除代码运行的一些不安全之处，为代码的安全运行保驾护航</p></li><li><p>为未来新版本的 Javascript 做好铺垫</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>针对整个脚本文件：将<code>use strict</code>放在脚本文件的第一行，则整个脚本文件将以严格模式运行。</p></li><li><p>针对单个函数：将<code>use strict</code>放在函数体的第一行，则整个函数以严格模式运行。</p></li></ul><p>PS：如果浏览器不支持，则这句话只解析为一条简单的语句, 没有任何副作用。</p><p>脚本文件的变通写法：因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。</p><h3 id="语法和行为改变"><a href="#语法和行为改变" class="headerlink" title="语法和行为改变"></a>语法和行为改变</h3><ul><li><p>必须用 var 声明变量</p></li><li><p>禁止自定义的函数中的 this 指向 window</p></li><li><p>对象不能有重名的属性</p></li></ul><h2 id="严格模式和普通模式的区别"><a href="#严格模式和普通模式的区别" class="headerlink" title="严格模式和普通模式的区别"></a>严格模式和普通模式的区别</h2><blockquote><p>下面列举几条严格模式的内容。</p></blockquote><h3 id="全局变量显式声明"><a href="#全局变量显式声明" class="headerlink" title="全局变量显式声明"></a>全局变量显式声明</h3><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p><h3 id="禁止-this-关键字指向全局对象："><a href="#禁止-this-关键字指向全局对象：" class="headerlink" title="禁止 this 关键字指向全局对象："></a>禁止 this 关键字指向全局对象：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p>上方代码中，普通模式打印的是 window。严格模式下打印的是 undefined。</p><h3 id="构造函数必须通过-new-实例化对象"><a href="#构造函数必须通过-new-实例化对象" class="headerlink" title="构造函数必须通过 new 实例化对象"></a>构造函数必须通过 new 实例化对象</h3><p>构造函数必须通过 new 实例化对象，否则报错。因为 this 为 undefined，此时无法设置属性。</p><p>比如说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var Cat = function (name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat(&#x27;haha&#x27;);</span><br></pre></td></tr></table></figure><p>上方代码中，如果在严格模式下，则会报错。</p><h3 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h3><p>普通模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。</p><p>普通模式下，如果函数有多个重名的参数，可以用 arguments[i]读取。严格模式下，多个重名的参数属于语法错误。</p><p>比如下面这样的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;smyh&#x27;</span>;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;vae&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，在严格模式下属于语法错误，因为有重名的属性。</p><h3 id="函数必须声明在顶层"><a href="#函数必须声明在顶层" class="headerlink" title="函数必须声明在顶层"></a>函数必须声明在顶层</h3><p>将来 Javascript 的新版本会引入”块级作用域”。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。</p><h3 id="新增关键字"><a href="#新增关键字" class="headerlink" title="新增关键字"></a>新增关键字</h3><p>为了向将来 Javascript 的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async_promise异步函数笔记</title>
      <link href="/archives/c69cf5a7.html"/>
      <url>/archives/c69cf5a7.html</url>
      
        <content type="html"><![CDATA[<h3 id="写法不同"><a href="#写法不同" class="headerlink" title="写法不同"></a>写法不同</h3><p>ES5 正常写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getAjax(url,(res)=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><p>Promise</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get(url).then((res)=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><p>async_await</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(async ()=&gt;&#123;</span><br><span class="line">    let res = await get(url)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>ES5 写法和 promise 写法，主要区别在写法的不同，可以让回调函数，划分出去在.then 的函数里去执行，使得代码更加的另外，也可以将两个不同的参数，可以划分开来写。</li><li>async 和 promise 的区别，不要在于 async 时 promise 的语法糖，这种形式的写法在底层编译之后会自动转化成 promise 的写法</li></ul><h3 id="Promise-实现原理"><a href="#Promise-实现原理" class="headerlink" title="Promise 实现原理"></a>Promise 实现原理</h3><p>promise 需要实现的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function fn(resolve,reject)&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        if(true)&#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            reject()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new LcPromise(fn)</span><br><span class="line">p1.then(function(res)&#123;</span><br><span class="line">    document.body.style.background = &quot;greenyellow&quot;</span><br><span class="line">    console.log(&quot;这是成功做的事情&quot;)</span><br><span class="line">    console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">p1.catch(function(res)&#123;</span><br><span class="line">    document.body.style.background = &quot;pink&quot;</span><br><span class="line">    console.log(&quot;这是失败做的事情&quot;)</span><br><span class="line">    console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>p1promise 对象发送了异步操作，必然会有 1 个未来事件，在未来要执行。这个过程由传入的函数对象 fn 执行。函数 fn 里必然需要由成功执行和失败执行的函数</p><p>1 创建类构造对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class LcPromise&#123;</span><br><span class="line">    constructor(fn) &#123;</span><br><span class="line">        //将成功的事件函数集成在successList数组里</span><br><span class="line">        this.successList  = [];</span><br><span class="line">        //这里将所有的失败函数集成到failList里</span><br><span class="line">        this.failList = []</span><br><span class="line">        //pending,fullfilled,rejected</span><br><span class="line">        this.state = &quot;pending&quot;</span><br><span class="line">        //传入的函数对象,(异步操作的函数内容)</span><br><span class="line">        fn(this.resolveFn.bind(this),this.rejectFn.bind(this))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数的作用：</p><ul><li><p>声明成功函数放置的数组对象</p></li><li><p>声明失败函数放置的数组对象</p></li><li><p>定义初始化状态</p></li><li><p>调用传入进行执行异步内容的函数（在未来有成功的结果时调用传入进去的成功函数，在未来失败时调用传入进行的失败函数）</p><p>2.传入成功或者失败时需要调用的函数</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class LcPromise&#123;</span><br><span class="line">    constructor(fn) &#123;</span><br><span class="line"></span><br><span class="line">        //将成功的事件函数集成在successList数组里</span><br><span class="line">        this.successList  = [];</span><br><span class="line">        //这里将所有的失败函数集成到failList里</span><br><span class="line">        this.failList = []</span><br><span class="line">        //pending,fullfilled,rejected</span><br><span class="line">        this.state = &quot;pending&quot;</span><br><span class="line">        //传入的函数对象,(异步操作的函数内容)</span><br><span class="line">        fn(this.resolveFn.bind(this),this.rejectFn.bind(this))</span><br><span class="line">    &#125;</span><br><span class="line">    then(successFn,failFn)&#123;</span><br><span class="line">        if(typeof successFn==&#x27;function&#x27;)&#123;</span><br><span class="line">            this.successList.push(successFn)</span><br><span class="line">        &#125;</span><br><span class="line">        if(typeof failFn==&#x27;function&#x27;)&#123;</span><br><span class="line">            this.failList.push(failFn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch(failFn)&#123;</span><br><span class="line">        if(typeof failFn==&#x27;function&#x27;)&#123;</span><br><span class="line">            this.failList.push(failFn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：</p><ul><li>将成功和失败的函数传入值成功和失败的数组里</li></ul><p>定义调用成功和失败的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//promise aysnc await proxy Iteratror</span><br><span class="line">            class LcPromise&#123;</span><br><span class="line">                constructor(fn) &#123;</span><br><span class="line"></span><br><span class="line">                    //将成功的事件函数集成在successList数组里</span><br><span class="line">                    this.successList  = [];</span><br><span class="line">                    //这里将所有的失败函数集成到failList里</span><br><span class="line">                    this.failList = []</span><br><span class="line">                    //pending,fullfilled,rejected</span><br><span class="line">                    this.state = &quot;pending&quot;</span><br><span class="line">                    //传入的函数对象,(异步操作的函数内容)</span><br><span class="line">                    fn(this.resolveFn.bind(this),this.rejectFn.bind(this))</span><br><span class="line">                &#125;</span><br><span class="line">                then(successFn,failFn)&#123;</span><br><span class="line">                    if(typeof successFn==&#x27;function&#x27;)&#123;</span><br><span class="line">                        this.successList.push(successFn)</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(typeof failFn==&#x27;function&#x27;)&#123;</span><br><span class="line">                        this.failList.push(failFn)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch(failFn)&#123;</span><br><span class="line">                    if(typeof failFn==&#x27;function&#x27;)&#123;</span><br><span class="line">                        this.failList.push(failFn)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                resolveFn(res)&#123;</span><br><span class="line">                    this.state = &quot;fullfilled&quot;</span><br><span class="line">                    this.successList.forEach(function(item,index)&#123;</span><br><span class="line">                        //将成功的事件循环调用</span><br><span class="line">                        item(res)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                rejectFn(res)&#123;</span><br><span class="line">                    this.state = &#x27;rejected&#x27;</span><br><span class="line">                    //注册到的失败所有事件进行调用</span><br><span class="line">                    this.failList.forEach(function(item,index)&#123;</span><br><span class="line">                        item(res)</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                    throw Error(res);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>作用：</p><ul><li>成功时调用成功数组里所有的函数，失败时调用失败数组里所有的函数。</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>如何将 promise 与 async 和 await 结合使用</p><p>典型异步读写的回调操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(path,&#123;flag:&#x27;r&#x27;,encoding:&quot;utf-8&quot;&#125;,function(err,data)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        //console.log(err)</span><br><span class="line">        //失败执行的内容</span><br><span class="line">        reject(err)</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //console.log(data)</span><br><span class="line">        //成功执行的内容</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">    //console.log(456)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>转换成 promise 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new Promise(function(resolve,reject)&#123;</span><br><span class="line">    fs.readFile(path,&#123;flag:&#x27;r&#x27;,encoding:&quot;utf-8&quot;&#125;,function(err,data)&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>由于每次使用，都不想写这么多代码，那么就会把这样的写法直接进行函数的封装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function fsRead(path)&#123;</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">        fs.readFile(path,&#123;flag:&#x27;r&#x27;,encoding:&quot;utf-8&quot;&#125;,function(err,data)&#123;</span><br><span class="line">            if(err)&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用的时候，就可以使用 promise 写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p1 = fsRead(path) //就可以得到promise对象</span><br><span class="line">p1.then(function(data)&#123;</span><br><span class="line">    console.log(&#x27;输出数据:&#x27;,data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>asycn_await 写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(async ()=&gt;&#123;</span><br><span class="line">    let data = await fsRead(path)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>异步 async 函数调用之后也是一个 promise 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(async ()=&gt;&#123;</span><br><span class="line">    async function test()&#123;</span><br><span class="line">        let data = await fsRead(path)</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line">    let p = test()//异步函数调用后，也是一个promise对象</span><br><span class="line">    p.then(function(data)&#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    let a = await test()//异步函数调用后，也是一个promise对象</span><br><span class="line"></span><br><span class="line">    console.log(123)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常见命令</title>
      <link href="/archives/41e021ef.html"/>
      <url>/archives/41e021ef.html</url>
      
        <content type="html"><![CDATA[<p><code>npm</code>英文全称: <code>node package manager</code>，npm 为你和你的团队打开了连接整个 JavaScript 天才世界的一扇大门。它是世界上最大的软件注册表，每星期大约有 30 亿次的下载量，包含超过 600000 个 包（package） （即，代码模块）。来自各大洲的开源软件开发者使用 npm 互相分享和借鉴。包的结构使您能够轻松跟踪依赖项和版本。 我们平时开发项目都是需要使用 npm 下载依赖，常见的 npm 命令总结如下:</p><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>npm -v</code></td><td align="center">查看 npm 版本。</td></tr><tr><td align="center"><code>npm init</code></td><td align="center">初始化后会出现一个<code>package.json</code>配置文件。可以在后面加上<code>-y</code> ，快速跳过问答式界面。</td></tr><tr><td align="center"><code>npm install</code></td><td align="center">会根据项目中的<code>package.json</code>文件自动下载项目所需的全部依赖。</td></tr><tr><td align="center"><code>npm install 包名 --save-dev</code>(<code>npm install 包名 -D</code>)</td><td align="center">安装的包只用于开发环境，不用于生产环境，会出现在<code>package.json</code>文件中的<code>devDependencies</code>属性中。</td></tr><tr><td align="center"><code>npm install 包名 --save</code>(<code>npm install 包名 -S</code>)</td><td align="center">安装的包需要发布到生产环境的，会出现在 package.json 文件中的<code>dependencies</code>属性中。</td></tr><tr><td align="center"><code>npm list</code></td><td align="center">查看当前目录下已安装的 node 包。</td></tr><tr><td align="center"><code>npm list -g</code></td><td align="center">查看全局已经安装过的 node 包。</td></tr><tr><td align="center"><code>npm --help</code></td><td align="center">查看 npm 帮助命令。</td></tr><tr><td align="center"><code>npm update 包名</code></td><td align="center">更新指定包。</td></tr><tr><td align="center"><code>npm uninstall 包名</code></td><td align="center">卸载指定包。</td></tr><tr><td align="center"><code>npm config list</code></td><td align="center">查看配置信息。</td></tr><tr><td align="center"><code>npm 指定命令 --help</code></td><td align="center">查看指定命令的帮助。</td></tr><tr><td align="center"><code>npm info 指定包名</code></td><td align="center">查看远程 npm 上指定包的所有版本信息。</td></tr><tr><td align="center"><code>npm config set registry https://registry.npm.taobao.org</code></td><td align="center">修改包下载源，此例修改为了淘宝镜像。</td></tr><tr><td align="center"><code>npm root</code></td><td align="center">查看当前包的安装路径。</td></tr><tr><td align="center"><code>npm root -g</code></td><td align="center">查看全局的包的安装路径。</td></tr><tr><td align="center"><code>npm ls 包名</code></td><td align="center">查看本地安装的指定包及版本信息，没有显示 empty。</td></tr><tr><td align="center"><code>npm ls 包名 -g</code></td><td align="center">查看全局安装的指定包及版本信息，没有显示 empty。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> 前端 </category>
          
          <category> 工具 </category>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js与npm安装</title>
      <link href="/archives/4f1f2f20.html"/>
      <url>/archives/4f1f2f20.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>node 环境也是我们常用的环境之一，开发中我们也要经常用到 npm 包管理器，这里我们安装一下 node 环境。</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Hexo 是基于 Node.js 环境的静态博客，而且我们需要用到 npm 包管理工具。</p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载地址：<a href="https://nodejs.org/en/">Node.js</a> （LTS 为长期支持版，current 为当前最新版本。我们选择 LTS 版本为例。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142755.png"></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li><p>双击下载的安装包，点击 next 开始安装。</p></li><li><p>勾选接受协议选项，点击 next（下一步） 按钮 :</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142849.png"></p><ul><li>Node.js 默认安装目录为 “C:\Program Files\nodejs&quot; , 你可以修改目录，并点击 next（下一步）：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142932.png"></p><ul><li>点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步）：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142945.png"></p><ul><li>点击 Install（安装） 开始安装 Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321143002.png"></p><ul><li>安装过程：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321143014.png"></p><ul><li>点击 Finish（完成）按钮退出安装向导。</li></ul><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>检测 PATH 环境变量是否配置了 Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321143034.png"></p><p>我们可以看到环境变量中已经包含了 C:\Program Files\nodejs\，如果没有就添加上。</p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>在终端中输入<code>node -v</code>或者<code>node --version</code> 检查 node.js 版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br><span class="line">node <span class="literal">--version</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321143042.png"></p><p>在终端中输入<code>npm -v</code>检查 npm 包管理器版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321143128.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>node.js 和 npm 包管理工具到这里就安装完成了，开始愉快的使用吧！</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js安装 </tag>
            
            <tag> Node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node连接MySQL数据库</title>
      <link href="/archives/628e35f6.html"/>
      <url>/archives/628e35f6.html</url>
      
        <content type="html"><![CDATA[<p>这里简单介绍如何使用 Node.js 来连接 MySQL，并对数据库进行操作。</p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>本教程使用了<a href="https://www.runoob.com/nodejs/nodejs-npm.html#taobaonpm">淘宝定制的 cnpm 命令</a>进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install mysql</span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>在以下实例中根据你的实际配置修改数据库用户名、及密码及数据库名：</p><h2 id="test-js-文件代码："><a href="#test-js-文件代码：" class="headerlink" title="test.js 文件代码："></a>test.js 文件代码：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">connect</span>()</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is: &#x27;</span>, results[<span class="number">0</span>].<span class="property">solution</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>执行以下命令输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node test.js</span><br><span class="line">The solution is: 2</span><br></pre></td></tr></table></figure><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>测试的 MySQL 用户名为 root，密码为 123456，数据库为 test，你需要根据自己配置情况修改。</p><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>将上面我们提供的 SQL 文件导入数据库后，执行以下代码即可查询出数据：</p><h2 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">connection.<span class="title function_">connect</span>()</span><br><span class="line"><span class="keyword">var</span> sql = <span class="string">&#x27;SELECT * FROM websites&#x27;</span></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">connection.<span class="title function_">query</span>(sql, <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[SELECT ERROR] - &#x27;</span>, err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------SELECT------&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure><p>执行以下命令输出就结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ node test.js</span><br><span class="line">--------------------------SELECT----------------------------</span><br><span class="line">[ RowDataPacket &#123;</span><br><span class="line">    id: 1,</span><br><span class="line">    name: &#x27;Google&#x27;,</span><br><span class="line">    url: &#x27;https://www.google.cm/&#x27;,</span><br><span class="line">    alexa: 1,</span><br><span class="line">    country: &#x27;USA&#x27; &#125;,</span><br><span class="line">  RowDataPacket &#123;</span><br><span class="line">    id: 2,</span><br><span class="line">    name: &#x27;淘宝&#x27;,</span><br><span class="line">    url: &#x27;https://www.taobao.com/&#x27;,</span><br><span class="line">    alexa: 13,</span><br><span class="line">    country: &#x27;CN&#x27; &#125;</span><br><span class="line">]</span><br><span class="line">------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>我们可以向数据表 websties 插入数据：</p><h2 id="插入数据-1"><a href="#插入数据-1" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">connect</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addSql = <span class="string">&#x27;INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)&#x27;</span></span><br><span class="line"><span class="keyword">var</span> addSqlParams = [<span class="string">&#x27;工具&#x27;</span>, <span class="string">&#x27;https://a.sda.com&#x27;</span>, <span class="string">&#x27;23453&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>]</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">connection.<span class="title function_">query</span>(addSql, addSqlParams, <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[INSERT ERROR] - &#x27;</span>, err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------INSERT------&#x27;</span>)</span><br><span class="line">  <span class="comment">//console.log(&#x27;INSERT ID:&#x27;,result.insertId);</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;INSERT ID:&#x27;</span>, result)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------------\n\n&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure><p>执行以下命令输出就结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ node test.js</span><br><span class="line">--------------------------INSERT----------------------------</span><br><span class="line">INSERT ID: OkPacket &#123;</span><br><span class="line">  fieldCount: 0,</span><br><span class="line">  affectedRows: 1,</span><br><span class="line">  insertId: 6,</span><br><span class="line">  serverStatus: 2,</span><br><span class="line">  warningCount: 0,</span><br><span class="line">  message: &#x27;&#x27;,</span><br><span class="line">  protocol41: true,</span><br><span class="line">  changedRows: 0 &#125;</span><br><span class="line">-----------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>执行成功后，查看数据表，即可以看到添加的数据</p><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>我们也可以对数据库的数据进行修改：</p><h2 id="更新数据-1"><a href="#更新数据-1" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">connect</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> modSql = <span class="string">&#x27;UPDATE websites SET name = ?,url = ? WHERE Id = ?&#x27;</span></span><br><span class="line"><span class="keyword">var</span> modSqlParams = [<span class="string">&#x27;移动站&#x27;</span>, <span class="string">&#x27;https://a.aaa.com&#x27;</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">connection.<span class="title function_">query</span>(modSql, modSqlParams, <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[UPDATE ERROR] - &#x27;</span>, err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------UPDATE--------&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;UPDATE affectedRows&#x27;</span>, result.<span class="property">affectedRows</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------\n\n&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure><p>执行以下命令输出就结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------------------UPDATE----------------------------</span><br><span class="line">UPDATE affectedRows 1</span><br><span class="line">-----------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>执行成功后，查看数据表</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>我们可以使用以下代码来删除 id 为 6 的数据:</p><h2 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">connection.<span class="title function_">connect</span>()</span><br><span class="line"><span class="keyword">var</span> delSql = <span class="string">&#x27;DELETE FROM websites where id=6&#x27;</span></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">connection.<span class="title function_">query</span>(delSql, <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[DELETE ERROR] - &#x27;</span>, err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----DELETE-------&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DELETE affectedRows&#x27;</span>, result.<span class="property">affectedRows</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------\n\n&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure><p>执行以下命令输出就结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------------------DELETE----------------------------</span><br><span class="line">DELETE affectedRows 1</span><br><span class="line">-----------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>执行成功后，查看数据表</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Node基础 </category>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL子查询</title>
      <link href="/archives/9da3e761.html"/>
      <url>/archives/9da3e761.html</url>
      
        <content type="html"><![CDATA[<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ul><li>查询支持嵌套使用</li><li>查询各学生的语文、数学、英语的成绩</li></ul><h3 id="什么是子查询"><a href="#什么是子查询" class="headerlink" title="什么是子查询"></a>什么是子查询</h3><p>当一个查询是另一个查询的条件时,这个查询称之为子查询(内层查询)</p><h4 id="什么时候用？"><a href="#什么时候用？" class="headerlink" title="什么时候用？"></a>什么时候用？</h4><p>当查询需求比较复杂，一次性查询无法得到结果，需要多次查询时，</p><p>例如：给出一个部门名称，需要获得该部门所有的员工信息</p><p>分析：</p><p>1.需要先确定部门的 id</p><p>2.然后才能通过 id 确定员工</p><p>解决问题的方式是把一个复杂的问题拆分为若干个简单的问题</p><h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><p>首先明确子查询就是一个普通的查询,当一个查询需要作为子查询使用时,用括号包裹即可</p><h4 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h4><p>in 中的子查询只能包含一个列</p><p>例如：查询财务部有哪些人</p><p>正确的写法：select name from emp where dept_id in (select id from dept where name = “财务”);</p><p>错误的写法：select name from emp where dept_id in (select * from dept where name = “财务”);</p><h3 id="关键字：exists"><a href="#关键字：exists" class="headerlink" title="关键字：exists"></a>关键字：exists</h3><p>exists 后跟子查询，子查询有结果是为 True，没有结果时为 False。为 True 时外层执行，为 False 外层不执行</p><h3 id="如何使用？-1"><a href="#如何使用？-1" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>select <em>from emp where exists (select</em> from emp where salary &gt; 1000);</p><p>前面 exists 后面 如果 <em>后面</em> 查询有结果时，<em>前面</em> 才会执行</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6的介绍和环境配置</title>
      <link href="/archives/199f7244.html"/>
      <url>/archives/199f7244.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ECMAScript 是 JS 的语言标准。而 ES6 是新的 JS 语法标准。</p><p>PS：严格来说，ECMAScript 还包括其他很多语言的语言标准。</p><p>很多人在做业务选型的时候，会倾向于选 jQuery。其实 jQuery 的语法是偏向于 ES3 的。而现在主流的框架 Vue.js 和 React.js 的语法，是用的 ES6。</p><p>ES6 中增加了很多功能上的不足。比如：<strong>常量、作用域、对象代理、异步处理、类、继承</strong>等。这些在 ES5 中想实现，比较复杂，但是 ES6 对它们进行了封装。</p><h3 id="ECMAScript-发展历史"><a href="#ECMAScript-发展历史" class="headerlink" title="ECMAScript 发展历史"></a>ECMAScript 发展历史</h3><ul><li><p>1995 年：ECMAScript 诞生。</p></li><li><p>1997 年：ECMAScript 标准确立。</p></li><li><p>1999 年：ES3 出现，与此同时，IE5 风靡一时。</p></li><li><p>2009 年，ES5 出现，例如 foreach、Object.keys、Object.create 和 json 标准。</p></li><li><p>2015 年 6 月，ES6 正式发布。</p></li></ul><p>ES6 的目标是：让 JS 语言可以编写复杂的大型应用程序，成为企业级开发语言。</p><h3 id="ECMAScript-的各大版本"><a href="#ECMAScript-的各大版本" class="headerlink" title="ECMAScript 的各大版本"></a>ECMAScript 的各大版本</h3><ul><li><p>ES5 : 09 年发布。</p></li><li><p>ES6：ECMAScript 2015 年 6 月</p></li><li><p>ES7：ECMAScript 2016</p></li><li><p>ES8：ECMAScript 2017</p></li></ul><h3 id="ES6-的其他优势"><a href="#ES6-的其他优势" class="headerlink" title="ES6 的其他优势"></a>ES6 的其他优势</h3><ul><li><p>使用 babel 语法转换器，支持低端浏览器。</p></li><li><p>流行的库基本都是基于 ES6 构建。 React 默认使用 ES6 标准开发。</p></li></ul><h2 id="ES6-的环境配置（为了兼容-ES5）"><a href="#ES6-的环境配置（为了兼容-ES5）" class="headerlink" title="ES6 的环境配置（为了兼容 ES5）"></a>ES6 的环境配置（为了兼容 ES5）</h2><p>掌握 ES6 之后，如果要考虑 ES5 的兼容性，可以这样做：写 ES6 语法的 js 代码，然后通过 <code>Babel</code>将 ES6 转换为 ES5。</p><p>但是，在这之前，我们需要配置一下相关的环境。</p><h3 id="建立工程目录"><a href="#建立工程目录" class="headerlink" title="建立工程目录"></a>建立工程目录</h3><p>（1）先建立一个空的工程目录 <code>ES6Demo</code>，并在目录下建立两个文件夹 <code>src</code>和 <code>dist</code>：</p><ul><li><p><code>src</code>：书写 ES6 代码，我们写的 js 程序都放在这里。</p></li><li><p><code>dist</code>：利用 Babel 编译生成的 ES5 代码。<strong>我们在 HTML 页面需要引入 dist 里的 js 文件</strong>。</p></li></ul><p>（2）在 src 里新建文件 <code>index.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们引入 ES5 中的 js 文件，而不是引入 ES6 中的 js 文件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>，上方代码中，我们引入的是<code>dist</code>目录下的 js 文件。</p><p>然后我们新建文件 <code>src/index.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;smyhvae&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;qianguyihao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><p>这个文件是一个 ES6 语法 的 js 文件，稍后，我们尝试把这个 ES6 语法的 js 文件转化为 ES5 的 js 文件。</p><p>PS：我们在写代码时，能用单引号尽量用单引号，而不是双引号，前者在压缩之后，程序执行会更快。</p><h3 id="全局安装-Babel-cli"><a href="#全局安装-Babel-cli" class="headerlink" title="全局安装 Babel-cli"></a>全局安装 Babel-cli</h3><p>（1）初始化项目：</p><p>在安装 Babel 之前，需要先用 npm init 先初始化我们的项目。打开终端或者通过 cmd 打开命令行工具，进入项目目录，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>上方代码中，<code>-y</code> 代表全部默认同意，就不用一次次按回车了（稍后再根据需要，在文件中手动修改）。命令执行完成后，会在项目的根目录下生成 package.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smyhvae&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>PS：VS Code 里打开终端的快捷键是：<code>Contol + ~</code>。</p><p>（2）全局安装 Babel-cli：</p><p>在终端中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure><p><img src="http://img.smyhvae.com/20180304_1305.png"></p><p>如果安装比较慢的话，Mac 下可以使用<code>cnpm</code>进行安装 ，windows 下可以使用<code>nrm</code>切换到 taobao 的镜像。</p><p>（3）本地安装 babel-preset-es2015 和 babel-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015 babel-cli</span><br></pre></td></tr></table></figure><p><img src="http://img.smyhvae.com/20180304_1307.png"></p><p>安装完成后，会发现<code>package.json</code>文件，已经多了 devDependencies 选项：</p><p><img src="http://img.smyhvae.com/20180304_1308.png"></p><p>（4）新建.babelrc：</p><p>在根目录下新建文件<code>.babelrc</code>，输入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[</span><br><span class="line">        &quot;es2015&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）开始转换：</p><p>现在，我们应该可以将 ES6 的文件转化为 ES5 的文件了，命令如下：（此命令略显复杂）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src/index.js -o dist/index.js</span><br></pre></td></tr></table></figure><p>我们可以将上面这个命令进行简化一下。操作如下：</p><p>在文件 <code>package.json</code> 中修改键 <code>scripts</code>中的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel src/index.js -o dist/index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>修改后的效果如下：</p><p><img src="http://img.smyhvae.com/20180304_1315.png"></p><p>目前为止，环境配置好了。以后，我们执行如下命令，即可将<code>src/index.js</code>这个 ES6 文件转化为 <code>dist/index.js</code>这个 ES5 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>我们执行上面的命令之后，会发现， dist 目录下会生成 ES5 的 js 文件：</p><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;smyhvae&#x27;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;qianguyihao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><p>当我们打开网页后，就可以在浏览器的控制台，看到代码的输出结果。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> ES6学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL视图</title>
      <link href="/archives/cc98362f.html"/>
      <url>/archives/cc98362f.html</url>
      
        <content type="html"><![CDATA[<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>对于复杂的查询，在多次使用后，维护是一件非常麻烦的事情</li><li>解决：定义视图</li><li>视图本质就是对查询的一个封装</li><li>定义视图</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create view stuscore as</span><br><span class="line">select students.*,scores.score from scores</span><br><span class="line">inner join students on scores.stuid=students.id;</span><br></pre></td></tr></table></figure><ul><li>视图的用途就是查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stuscore;</span><br></pre></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 查询视图内容等同于查询表操作</span><br><span class="line">SELECT * from bookallinfo where cataory = &#x27;历史传记&#x27;;</span><br><span class="line">-- 视图实现模糊查找</span><br><span class="line">SELECT * from bookallinfo where bookname like &quot;%小%&quot;;</span><br><span class="line"></span><br><span class="line">-- 更新多字段</span><br><span class="line">UPDATE booktable SET bookname = &quot;小时代1&quot;,authorid=0,score = NULL  where id = 2;</span><br><span class="line"></span><br><span class="line">-- 删除</span><br><span class="line">-- 逻辑删除和物理删除</span><br><span class="line"></span><br><span class="line">-- 逻辑删除小时代书</span><br><span class="line">UPDATE booktable set isdelete = &quot;true&quot; where id = 2</span><br><span class="line"></span><br><span class="line">-- 物理删除</span><br><span class="line">-- DELETE from booktable WHERE bookname = &quot;鬼吹灯&quot;</span><br><span class="line">DELETE from booktable</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据排序</title>
      <link href="/archives/84c3a399.html"/>
      <url>/archives/84c3a399.html</url>
      
        <content type="html"><![CDATA[<ul><li>为了方便查看数据，可以对数据进行排序</li><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名</span><br><span class="line">order by 列1 asc|desc,列2 asc|desc,...</span><br></pre></td></tr></table></figure><ul><li>将行数据按照列 1 进行排序，如果某些行列 1 的值相同时，则按照列 2 排序，以此类推</li><li>默认按照列值从小到大排列</li><li>asc 从小到大排列，即升序</li><li>desc 从大到小排序，即降序</li><li>查询未删除男生学生信息，按学号降序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from students</span><br><span class="line">where gender=1 and isdelete=0</span><br><span class="line">order by id desc;</span><br></pre></td></tr></table></figure><ul><li>查询未删除科目信息，按名称升序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from subject</span><br><span class="line">where isdelete=0</span><br><span class="line">order by stitle;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL连接查询</title>
      <link href="/archives/9e1390b6.html"/>
      <url>/archives/9e1390b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="先看个问题"><a href="#先看个问题" class="headerlink" title="先看个问题"></a>先看个问题</h2><ul><li>问：查询每个学生每个科目的分数</li><li>分析：学生姓名来源于 students 表，科目名称来源于 subjects，分数来源于 scores 表，怎么将 3 个表放到一起查询，并将结果显示在同一个结果集中呢？</li><li>答：当查询结果来源于多张表时，需要使用连接查询</li><li>关键：找到表间的关系，当前的关系是<ul><li>students 表的 id—scores 表的 stuid</li><li>subjects 表的 id—scores 表的 subid</li></ul></li><li>则上面问题的答案是：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select students.sname,subjects.stitle,scores.score</span><br><span class="line">from scores</span><br><span class="line">inner join students on scores.stuid=students.id</span><br><span class="line">inner join subjects on scores.subid=subjects.id;</span><br></pre></td></tr></table></figure><ul><li>结论：当需要对有关系的多张表进行查询时，需要使用连接 join</li></ul><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ul><li>连接查询分类如下：<ul><li>表 A inner join 表 B：表 A 与表 B 匹配的行会出现在结果中</li><li>表 A left join 表 B：表 A 与表 B 匹配的行会出现在结果中，外加表 A 中独有的数据，未对应的数据使用 null 填充</li><li>表 A right join 表 B：表 A 与表 B 匹配的行会出现在结果中，外加表 B 中独有的数据，未对应的数据使用 null 填充</li></ul></li><li>在查询或条件中推荐使用“表名.列名”的语法</li><li>如果多个表中列名不重复可以省略“表名.”部分</li><li>如果表的名称太长，可以在表名后面使用’ as 简写名’或’ 简写名’，为表起个临时的简写名称</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li>查询学生的姓名、平均分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select students.sname,avg(scores.score)</span><br><span class="line">from scores</span><br><span class="line">inner join students on scores.stuid=students.id</span><br><span class="line">group by students.sname;</span><br></pre></td></tr></table></figure><ul><li>查询男生的姓名、总分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select students.sname,avg(scores.score)</span><br><span class="line">from scores</span><br><span class="line">inner join students on scores.stuid=students.id</span><br><span class="line">where students.gender=1</span><br><span class="line">group by students.sname;</span><br></pre></td></tr></table></figure><ul><li>查询科目的名称、平均分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select subjects.stitle,avg(scores.score)</span><br><span class="line">from scores</span><br><span class="line">inner join subjects on scores.subid=subjects.id</span><br><span class="line">group by subjects.stitle;</span><br></pre></td></tr></table></figure><ul><li>查询未删除科目的名称、最高分、平均分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select subjects.stitle,avg(scores.score),max(scores.score)</span><br><span class="line">from scores</span><br><span class="line">inner join subjects on scores.subid=subjects.id</span><br><span class="line">where subjects.isdelete=0</span><br><span class="line">group by subjects.stitle;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据聚合</title>
      <link href="/archives/822245c.html"/>
      <url>/archives/822245c.html</url>
      
        <content type="html"><![CDATA[<ul><li>为了快速得到统计数据，提供了 5 个聚合函数</li><li>count(*)表示计算总行数，括号中写星与列名，结果是相同的</li><li>查询学生总数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from students;</span><br></pre></td></tr></table></figure><ul><li>max(列)表示求此列的最大值</li><li>查询女生的编号最大值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(id) from students where gender=0;</span><br></pre></td></tr></table></figure><ul><li>min(列)表示求此列的最小值</li><li>查询未删除的学生最小编号</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(id) from students where isdelete=0;</span><br></pre></td></tr></table></figure><ul><li>sum(列)表示求此列的和</li><li>查询男生的编号之后</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(id) from students where gender=1;</span><br></pre></td></tr></table></figure><ul><li>avg(列)表示求此列的平均值</li><li>查询未删除女生的编号平均值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(id) from students where isdelete=0 and gender=0;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据分组</title>
      <link href="/archives/df21d8f8.html"/>
      <url>/archives/df21d8f8.html</url>
      
        <content type="html"><![CDATA[<ul><li>按照字段分组，表示此字段相同的数据会被放到一个组中</li><li>分组后，只能查询出相同的数据列，对于有差异的数据列无法出现在结果集中</li><li>可以对分组后的数据进行统计，做聚合运算</li><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列1,列2,聚合... from 表名 group by 列1,列2,列3...</span><br></pre></td></tr></table></figure><ul><li>查询男女生总数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select gender as 性别,count(*)</span><br><span class="line">from students</span><br><span class="line">group by gender;</span><br></pre></td></tr></table></figure><ul><li>查询各城市人数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select hometown as 家乡,count(*)</span><br><span class="line">from students</span><br><span class="line">group by hometown;</span><br></pre></td></tr></table></figure><h4 id="分组后的数据筛选"><a href="#分组后的数据筛选" class="headerlink" title="分组后的数据筛选"></a>分组后的数据筛选</h4><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 列1,列2,聚合... from 表名</span><br><span class="line">group by 列1,列2,列3...</span><br><span class="line">having 列1,...聚合...</span><br></pre></td></tr></table></figure><ul><li>having 后面的条件运算符与 where 的相同</li><li>查询男生总人数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方案一</span><br><span class="line">select count(*)</span><br><span class="line">from students</span><br><span class="line">where gender=1;</span><br><span class="line">-----------------------------------</span><br><span class="line">方案二：</span><br><span class="line">select gender as 性别,count(*)</span><br><span class="line">from students</span><br><span class="line">group by gender</span><br><span class="line">having gender=1;</span><br></pre></td></tr></table></figure><h4 id="对比-where-与-having"><a href="#对比-where-与-having" class="headerlink" title="对比 where 与 having"></a>对比 where 与 having</h4><ul><li>where 是对 from 后面指定的表进行数据筛选，属于对原始数据的筛选</li><li>having 是对 group by 的结果进行筛选</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据分页</title>
      <link href="/archives/344c0f13.html"/>
      <url>/archives/344c0f13.html</url>
      
        <content type="html"><![CDATA[<h2 id="获取部分行"><a href="#获取部分行" class="headerlink" title="获取部分行"></a>获取部分行</h2><ul><li>当数据量过大时，在一页中查看数据是一件非常麻烦的事情</li><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名</span><br><span class="line">limit start,count</span><br></pre></td></tr></table></figure><ul><li>从 start 开始，获取 count 条数据</li><li>start 索引从 0 开始</li></ul><h3 id="示例：分页"><a href="#示例：分页" class="headerlink" title="示例：分页"></a>示例：分页</h3><ul><li>已知：每页显示 m 条数据，当前显示第 n 页</li><li>求总页数：此段逻辑后面会在 python 中实现<ul><li>查询总条数 p1</li><li>使用 p1 除以 m 得到 p2</li><li>如果整除则 p2 为总数页</li><li>如果不整除则 p2+1 为总页数</li></ul></li><li>求第 n 页的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from students</span><br><span class="line">where isdelete=0</span><br><span class="line">limit (n-1)*m,m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地连接云服务器数据库</title>
      <link href="/archives/738bac5d.html"/>
      <url>/archives/738bac5d.html</url>
      
        <content type="html"><![CDATA[<p>我使用的阿里云 ECS 服务器，搭配宝塔面板。简单记录一下，在本地连接云服务器的方法。</p><p>首先，在宝塔面板安装好数据库，修改 root 密码。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423212406.png" alt="数据库"></p><p>进入 <code>phpadmin</code>。选择新建用户。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423212510.png" alt="image-20200423212509727"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423212652.png" alt="添加用户"></p><p>除此之外我们还要开放 <code>3306</code> 端口：在安全，防火墙这里放行。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423212753.png" alt="放行端口"></p><p>然后是在阿里云放行端口：在安全组中添加规则即可</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200423213002.png" alt="放行端口"></p><p>这样我们就可以在本地使用 Navicat Premium 等工具连接云服务器的数据库了。</p><p>虽然在网上看了很多教程，但是感觉我目前都并不适用，这里我简单记录一下，我的操作。</p>]]></content>
      
      
      <categories>
          
          <category> ECS云服务器 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔面板 </tag>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库范式</title>
      <link href="/archives/56cec031.html"/>
      <url>/archives/56cec031.html</url>
      
        <content type="html"><![CDATA[<h2 id="示例表数据"><a href="#示例表数据" class="headerlink" title="示例表数据"></a>示例表数据</h2><p>假设有一个名为<code>employee</code>的员工表，它有九个属性：<code>id</code>(员工编号)、<code>name</code>(员工名称)、<code>mobile</code>(电话)、<code>zip</code>(邮编)、<code>province</code>(省份)、<code>city</code>(城市)、<code>district</code>(区县)、<code>deptNo</code>(所属部门编号)、<code>deptName</code>(所属部门名称)、表总数据如下：</p><table><thead><tr><th>id</th><th>name</th><th>mobile</th><th>zip</th><th>province</th><th>city</th><th>district</th><th>deptNo</th><th>deptName</th></tr></thead><tbody><tr><td>101</td><td>张三</td><td>13910000001 13910000002</td><td>100001</td><td>北京</td><td>北京</td><td>海淀区</td><td>D1</td><td>部门 1</td></tr><tr><td>101</td><td>张三</td><td>13910000001 13910000002</td><td>100001</td><td>北京</td><td>北京</td><td>海淀区</td><td>D2</td><td>部门 2</td></tr><tr><td>102</td><td>李四</td><td>13910000003</td><td>200001</td><td>上海</td><td>上海</td><td>静安区</td><td>D3</td><td>部门 3</td></tr><tr><td>103</td><td>王五</td><td>13910000004</td><td>510001</td><td>广东省</td><td>广州</td><td>白云区</td><td>D4</td><td>部门 4</td></tr><tr><td>103</td><td>王五</td><td>13910000004</td><td>510001</td><td>广东省</td><td>广州</td><td>白云区</td><td>D5</td><td>部门 5</td></tr></tbody></table><p>由于此员工表是非规范化的，我们将面对如下的问题。</p><blockquote><ul><li><strong>修改异常</strong>：上表中张三有两条记录，因为他隶属于两个部门。如果我们要修改张三的地址，必修修改两行记录。假如一个部门得到了张三的新地址并进行了更新，而另一个部门没有，那么此时张三在表中会存在两个不同的地址，导致了数据不一致</li><li><strong>新增异常：</strong>假如一个新员工假如公司，他正处于入职培训阶段，还没有被正式分配到某个部门，如果<code>deptNo</code>字段不允许为空，我们就无法向<code>employee</code>表中新增该员工的数据。</li><li><strong>删除异常：</strong>假设公司撤销了 D3 部门，那么在删除<code>deptNo</code>为 D3 的行时，会将李四的信息也一并删除。因为他隶属于 D3 这一部门。</li></ul></blockquote><h2 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h2><blockquote><p><strong>表中的列只能含有原子性(不可再分)的值。</strong></p></blockquote><p>表中的张三有两个手机号存储在 mobile 列中，违反了 1NF 规则。为了使表满足 1NF，数据应该修改如下：</p><table><thead><tr><th>id</th><th>name</th><th>mobile</th><th>zip</th><th>province</th><th>city</th><th>district</th><th>deptNo</th><th>deptName</th></tr></thead><tbody><tr><td>101</td><td>张三</td><td>13910000001</td><td>100001</td><td>北京</td><td>北京</td><td>海淀区</td><td>D1</td><td>部门 1</td></tr><tr><td>101</td><td>张三</td><td>13910000002</td><td>100001</td><td>北京</td><td>北京</td><td>海淀区</td><td>D1</td><td>部门 1</td></tr><tr><td>101</td><td>张三</td><td>13910000001</td><td>100001</td><td>北京</td><td>北京</td><td>海淀区</td><td>D2</td><td>部门 2</td></tr><tr><td>101</td><td>张三</td><td>13910000002</td><td>100001</td><td>北京</td><td>北京</td><td>海淀区</td><td>D2</td><td>部门 2</td></tr><tr><td>102</td><td>李四</td><td>13910000003</td><td>200001</td><td>上海</td><td>上海</td><td>静安区</td><td>D3</td><td>部门 3</td></tr><tr><td>103</td><td>王五</td><td>13910000004</td><td>510001</td><td>广东省</td><td>广州</td><td>白云区</td><td>D4</td><td>部门 4</td></tr><tr><td>103</td><td>王五</td><td>13910000004</td><td>510001</td><td>广东省</td><td>广州</td><td>白云区</td><td>D5</td><td>部门 5</td></tr></tbody></table><h2 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式(2NF)"></a>第二范式(2NF)</h2><p>第二范式要同时满足下面两个条件</p><blockquote><ul><li><strong>满足第一范式</strong></li><li><strong>没有部分依赖</strong></li></ul></blockquote><p>例如，员工表的一个候选键是{id，mobile，deptNo}，而 deptName 依赖于 deptNo，同样 name 依赖于 id，因此不是 2NF 的。为了满足第二范式的条件，需要将这个表拆分成 employee、dept、employee_dept、employee_mobile 四个表。如下：</p><p><strong>员工表 employee</strong></p><table><thead><tr><th>id</th><th>name</th><th>zip</th><th>province</th><th>city</th><th>district</th></tr></thead><tbody><tr><td>101</td><td>张三</td><td>100001</td><td>北京</td><td>北京</td><td>海淀区</td></tr><tr><td>102</td><td>李四</td><td>200001</td><td>上海</td><td>上海</td><td>静安区</td></tr><tr><td>103</td><td>王五</td><td>510001</td><td>广东省</td><td>广州</td><td>白云区</td></tr></tbody></table><p><strong>部门表 dept</strong></p><table><thead><tr><th>deptNo</th><th>deptName</th></tr></thead><tbody><tr><td>D1</td><td>部门 1</td></tr><tr><td>D2</td><td>部门 2</td></tr><tr><td>D3</td><td>部门 3</td></tr><tr><td>D4</td><td>部门 4</td></tr><tr><td>D5</td><td>部门 5</td></tr></tbody></table><p><strong>员工部门关系表 employee_dept</strong></p><table><thead><tr><th>id</th><th>deptNo</th></tr></thead><tbody><tr><td>101</td><td>D1</td></tr><tr><td>101</td><td>D2</td></tr><tr><td>102</td><td>D3</td></tr><tr><td>103</td><td>D4</td></tr><tr><td>104</td><td>D5</td></tr></tbody></table><p><strong>员工电话表 employee_mobile</strong></p><table><thead><tr><th>id</th><th>mobile</th></tr></thead><tbody><tr><td>101</td><td>13910000001</td></tr><tr><td>101</td><td>13910000002</td></tr><tr><td>102</td><td>13910000003</td></tr><tr><td>103</td><td>13910000004</td></tr></tbody></table><h2 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式(3NF)"></a>第三范式(3NF)</h2><p>第三范式要同时满足下面两个条件</p><blockquote><ul><li><strong>满足第二范式</strong></li><li><strong>没有传递依赖</strong></li></ul></blockquote><p>例如，员工表的 province、city、district 依赖于 zip，而 zip 依赖于 id，换句话说，province、city、district 传递依赖于 id，违反了 3NF 规则。为了满足第三范式的条件，可以将这个表拆分成 employee 和 zip 两个表，如下</p><p><strong>employee</strong></p><table><thead><tr><th>id</th><th>name</th><th>zip</th></tr></thead><tbody><tr><td>101</td><td>张三</td><td>100001</td></tr><tr><td>102</td><td>李四</td><td>200001</td></tr><tr><td>103</td><td>王五</td><td>510001</td></tr></tbody></table><p><strong>地区表 area</strong></p><table><thead><tr><th>zip</th><th>province</th><th>city</th><th>district</th></tr></thead><tbody><tr><td>100001</td><td>北京</td><td>北京</td><td>海淀区</td></tr><tr><td>200001</td><td>上海</td><td>上海</td><td>静安区</td></tr><tr><td>51000</td><td>广东省</td><td>广州</td><td>白云区</td></tr></tbody></table><p>在关系数据库模型设计中，一般需要满足第三范式的要求。如果一个表具有良好的主外键设计，就应该是满足 3NF 的表。规范化带来的好处是通过减少数据冗余提高更新数据的效率，同时保证数据完整性。然而，我们在实际应用中也要防止过度规范化的问题。规范化程度越高，划分的表就越多，在查询数据时越有可能使用表连接操作。而如果连接的表过多，会影响查询性能。关键的问题是要依据业务需求，仔细权衡数据查询和数据更新关系，指定最合适的规范化程度。不要为了遵循严格的规范化规则而修改业务需求</p><h2 id="数据库一对一、一对多、多对多设计"><a href="#数据库一对一、一对多、多对多设计" class="headerlink" title="数据库一对一、一对多、多对多设计"></a>数据库一对一、一对多、多对多设计</h2><hr><p>数据库实体间有三种对应关系：一对一、一对多、多对多</p><p>一对一关系示例：</p><p>一个学生对应一个学生档案材料 每个人都有唯一的身份证号</p><p>一对多关系示例：</p><p>一个学生只属于一个班，但这个班有多名学生</p><p>多对多关系示例：</p><p>一个学生可以选择多门课，一门课也可以有多名学生</p><p>一个人可以有多个角色，一个角色可以有多个人</p><p>一、一对多关系处理</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200519190642.png" alt="image-20200519190634860"></p><p>设计数据库表：只需在 学生表 中多添加一个班级号的 ID 即可</p><p>二、多对多关系处理</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200519190703.png" alt="image-20200519190702170"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200519190801.png" alt="image-20200519190800713"></p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><ul><li><p>创建成绩表 scores，结构如下</p><ul><li>id</li><li>学生</li><li>科目</li><li>成绩</li></ul></li><li><p>思考：学生列应该存什么信息呢？</p></li><li><p>答：学生列的数据不是在这里新建的，而应该从学生表引用过来，关系也是一条数据；根据范式要求应该存储学生的编号，而不是学生的姓名等其它信息</p></li><li><p>同理，科目表也是关系列，引用科目表中的数据</p></li><li><p>创建表的语句如下</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table scores(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">stuid int,</span><br><span class="line">subid int,</span><br><span class="line">score decimal(5,2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><ul><li>思考：怎么保证关系列数据的有效性呢？任何整数都可以吗？</li><li>答：必须是学生表中 id 列存在的数据，可以通过外键约束进行数据的有效性验证</li><li>为 stuid 添加外键约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table scores add constraint stu_sco foreign key(stuid) references students(id);</span><br></pre></td></tr></table></figure><ul><li>此时插入或者修改数据时，如果 stuid 的值在 students 表中不存在则会报错</li><li>在创建表时可以直接创建约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table scores(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">stuid int,</span><br><span class="line">subid int,</span><br><span class="line">score decimal(5,2),</span><br><span class="line">foreign key(stuid) references students(id),</span><br><span class="line">foreign key(subid) references subjects(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键的级联操作"><a href="#外键的级联操作" class="headerlink" title="外键的级联操作"></a>外键的级联操作</h3><ul><li>在删除 students 表的数据时，如果这个 id 值在 scores 中已经存在，则会抛异常</li><li>推荐使用逻辑删除，还可以解决这个问题</li><li>可以创建表时指定级联操作，也可以在创建表后再修改外键的级联操作</li><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table scores add constraint stu_sco foreign key(stuid) references students(id) on delete cascade;</span><br></pre></td></tr></table></figure><ul><li>级联操作的类型包括：<ul><li>restrict（限制）：默认值，抛异常</li><li>cascade（级联）：如果主表的记录删掉，则从表中相关联的记录都将被删除</li><li>set null：将外键设置为空</li><li>no action：什么都不做</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
            <tag> 范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基本操作</title>
      <link href="/archives/25109d5c.html"/>
      <url>/archives/25109d5c.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-创建数据库"><a href="#MySQL-创建数据库" class="headerlink" title="MySQL 创建数据库"></a>MySQL 创建数据库</h2><hr><p>我们可以在登陆 MySQL 服务后，使用 <strong>create</strong> 命令创建数据库，语法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>以下命令简单的演示了创建数据库的过程，数据名为 SXT:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysql -u root -p</span><br><span class="line">Enter password:******  # 登录后进入终端</span><br><span class="line"></span><br><span class="line">mysql&gt; create DATABASE SXT;</span><br></pre></td></tr></table></figure><h3 id="使用-mysqladmin-创建数据库"><a href="#使用-mysqladmin-创建数据库" class="headerlink" title="使用 mysqladmin 创建数据库"></a>使用 mysqladmin 创建数据库</h3><p>使用普通用户，你可能需要特定的权限来创建或者删除 MySQL 数据库。</p><p>所以我们这边使用 root 用户登录，root 用户拥有最高权限，可以使用 mysql <strong>mysqladmin</strong> 命令来创建数据库。</p><p>以下命令简单的演示了创建数据库的过程，数据名为 SXT:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysqladmin -u root -p create SXT</span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure><p>以上命令执行成功后会创建 MySQL 数据库 SXT。</p><h2 id="MySQL-删除数据库"><a href="#MySQL-删除数据库" class="headerlink" title="MySQL 删除数据库"></a>MySQL 删除数据库</h2><hr><p>使用普通用户登陆 MySQL 服务器，你可能需要特定的权限来创建或者删除 MySQL 数据库，所以我们这边使用 root 用户登录，root 用户拥有最高权限。</p><p>在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失。</p><h3 id="drop-命令删除数据库"><a href="#drop-命令删除数据库" class="headerlink" title="drop 命令删除数据库"></a>drop 命令删除数据库</h3><p>drop 命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p>例如删除名为 SXT 的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database SXT;</span><br></pre></td></tr></table></figure><h2 id="MySQL-创建数据表"><a href="#MySQL-创建数据表" class="headerlink" title="MySQL 创建数据表"></a>MySQL 创建数据表</h2><p>创建 MySQL 数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>以下为创建 MySQL 数据表的 SQL 通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (column_name column_type);</span><br></pre></td></tr></table></figure><p>以下例子中我们将在 sxt 数据库中创建数据表 sxt_tbl：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `sxt_tbl`(</span><br><span class="line">   `sxt_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `sxt_title` VARCHAR(100) NOT NULL,</span><br><span class="line">   `sxt_author` VARCHAR(40) NOT NULL,</span><br><span class="line">   `submission_date` DATE,</span><br><span class="line">   PRIMARY KEY ( `sxt_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>实例解析：</p><ul><li>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>， 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> ，就会报错。</li><li>AUTO_INCREMENT 定义列为自增的属性，一般用于主键，数值会自动加 1。</li><li>PRIMARY KEY 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li><li>ENGINE 设置存储引擎，CHARSET 设置编码。</li></ul><h2 id="MySQL-删除数据表"><a href="#MySQL-删除数据表" class="headerlink" title="MySQL 删除数据表"></a>MySQL 删除数据表</h2><p>MySQL 中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>以下为删除 MySQL 数据表的通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name ;</span><br></pre></td></tr></table></figure><hr><h2 id="在命令提示窗口中删除数据表"><a href="#在命令提示窗口中删除数据表" class="headerlink" title="在命令提示窗口中删除数据表"></a>在命令提示窗口中删除数据表</h2><p>在 mysql&gt;命令提示窗口中删除数据表 SQL 语句为 <strong>DROP TABLE</strong> ：</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例删除了数据表 runoob_tbl:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; DROP TABLE sxt_tbl</span><br><span class="line">Query OK, 0 rows affected (0.8 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="MySQL-选择数据库"><a href="#MySQL-选择数据库" class="headerlink" title="MySQL 选择数据库"></a>MySQL 选择数据库</h2><p>在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。</p><hr><h3 id="从命令提示窗口中选择-MySQL-数据库"><a href="#从命令提示窗口中选择-MySQL-数据库" class="headerlink" title="从命令提示窗口中选择 MySQL 数据库"></a>从命令提示窗口中选择 MySQL 数据库</h3><p>在 mysql&gt; 提示窗口中可以很简单的选择特定的数据库。你可以使用 SQL 命令来选择指定的数据库。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以下实例选取了数据库 SXT:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysql -u root -p</span><br><span class="line">Enter password:******</span><br><span class="line">mysql&gt; use SXT;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>执行以上命令后，你就已经成功选择了 SXT 数据库，在后续的操作中都会在 SXT 数据库中执行。</p><p>**注意:**所有的数据库名，表名，表字段都是区分大小写的。所以你在使用 SQL 命令时需要输入正确的名称。</p><h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><p>MySQL 中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><hr><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>MySQL 支持所有标准 SQL 数值数据类型。</p><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型(FLOAT、REAL 和 DOUBLE PRECISION)。</p><p>关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。</p><p>BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。</p><p>作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 字节</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 字节</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 字节</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT 或 INTEGER</td><td align="left">4 字节</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 字节</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 字节</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 字节</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对 DECIMAL(M,D) ，如果 M&gt;D，为 M+2 否则为 D+2</td><td align="left">依赖于 M 和 D 的值</td><td align="left">依赖于 M 和 D 的值</td><td align="left">小数值</td></tr></tbody></table><hr><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME 和 YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的 MySQL 不能表示的值时使用”零”值。</p><p>TIMESTAMP 类型有专有的自动更新特性，将在后面描述。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 (字节)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038 结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><hr><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 字节</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 字节</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 字节</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 字节</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 字节</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 字节</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 字节</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 字节</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 字节</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 字节</td><td align="left">极大文本数据</td></tr></tbody></table><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p><h2 id="SQL-插入数据"><a href="#SQL-插入数据" class="headerlink" title="SQL 插入数据"></a>SQL 插入数据</h2><p>MySQL 表中使用 <strong>INSERT INTO</strong> SQL 语句来插入数据。</p><p>你可以通过 mysql&gt; 命令提示窗口中向数据表中插入数据，或者通过 PHP 脚本来插入数据。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>以下为向 MySQL 数据表插入数据通用的 <strong>INSERT INTO</strong> SQL 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p><hr><h3 id="通过命令提示窗口插入数据"><a href="#通过命令提示窗口插入数据" class="headerlink" title="通过命令提示窗口插入数据"></a>通过命令提示窗口插入数据</h3><p>以下我们将使用 SQL <strong>INSERT INTO</strong> 语句向 MySQL 数据表 SXT 插入数据</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>以下实例中我们将向 SXT 表插入三条数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p password;</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use SXT;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; INSERT INTO SXTl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 PHP&quot;, &quot;SXT&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, SXT, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 MySQL&quot;, &quot;SXT&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, SXT_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;JAVA 教程&quot;, &quot;SXT.COM&quot;, &#x27;2016-05-06&#x27;);</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 使用箭头标记 <strong>-&gt;</strong> 不是 SQL 语句的一部分，它仅仅表示一个新行，如果一条 SQL 语句太长，我们可以通过回车键来创建一个新行来编写 SQL 语句，SQL 语句的命令结束符为分号 **;**。</p><h2 id="MySQL-UPDATE-更新"><a href="#MySQL-UPDATE-更新" class="headerlink" title="MySQL UPDATE 更新"></a>MySQL UPDATE 更新</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><p>当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p><hr><p>通过命令提示符更新数据</p><p>以下我们将在 SQL UPDATE 命令使用 WHERE 子句来更新 runoob_tbl 表中指定的数据：</p><h2 id="MySQL-DELETE-语句"><a href="#MySQL-DELETE-语句" class="headerlink" title="MySQL DELETE 语句"></a>MySQL DELETE 语句</h2><p>你可以使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录。</p><p>你可以在 <strong>mysql&gt;</strong> 命令提示符或 PHP 脚本中执行该命令。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>以下是 SQL DELETE 语句从 MySQL 数据表中删除数据的通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure><ul><li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li><li>你可以在 WHERE 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><p>当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p><hr><h2 id="从命令行中删除数据"><a href="#从命令行中删除数据" class="headerlink" title="从命令行中删除数据"></a>从命令行中删除数据</h2><p>这里我们将在 SQL DELETE 命令中使用 WHERE 子句来删除 MySQL 数据表 runoob_tbl 所选的数据。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库查询基本操作</title>
      <link href="/archives/c4bd2243.html"/>
      <url>/archives/c4bd2243.html</url>
      
        <content type="html"><![CDATA[<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul><li>使用 where 子句对表中的数据筛选，结果为 true 的行会出现在结果集中</li><li>语法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 where 条件;</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ul><li>等于=</li><li>大于&gt;</li><li>大于等于&gt;=</li><li>小于&lt;</li><li>小于等于&lt;=</li><li>不等于!=或&lt;&gt;</li><li>查询编号大于 3 的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id&gt;3;</span><br></pre></td></tr></table></figure><ul><li>查询编号不大于 4 的科目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from subjects where id&lt;=4;</span><br></pre></td></tr></table></figure><ul><li>查询姓名不是“黄蓉”的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where sname!=&#x27;黄蓉&#x27;;</span><br></pre></td></tr></table></figure><ul><li>查询没被删除的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where isdelete=0;</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li>and</li><li>or</li><li>not</li><li>查询编号大于 3 的女同学</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id&gt;3 and gender=0;</span><br></pre></td></tr></table></figure><ul><li>查询编号小于 4 或没被删除的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id&lt;4 or isdelete=0;</span><br></pre></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><ul><li>like</li><li>%表示任意多个任意字符</li><li>_表示一个任意字符</li><li>查询姓黄的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where sname like &#x27;黄%&#x27;;</span><br></pre></td></tr></table></figure><ul><li>查询姓黄并且名字是一个字的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where sname like &#x27;黄_&#x27;;</span><br></pre></td></tr></table></figure><ul><li>查询姓黄或叫靖的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where sname like &#x27;黄%&#x27; or sname like &#x27;%靖%&#x27;;</span><br></pre></td></tr></table></figure><h2 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h2><ul><li>in 表示在一个非连续的范围内</li><li>查询编号是 1 或 3 或 8 的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id in(1,3,8);</span><br></pre></td></tr></table></figure><ul><li>between … and …表示在一个连续的范围内</li><li>查询学生是 3 至 8 的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id between 3 and 8;</span><br></pre></td></tr></table></figure><ul><li>查询学生是 3 至 8 的男生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id between 3 and 8 and gender=1;</span><br></pre></td></tr></table></figure><h2 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h2><ul><li>注意：null 与’’是不同的</li><li>判空 is null</li><li>查询没有填写地址的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where hometown is null;</span><br></pre></td></tr></table></figure><ul><li>判非空 is not null</li><li>查询填写了地址的学生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where hometown is not null;</span><br></pre></td></tr></table></figure><ul><li>查询填写了地址的女生</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where hometown is not null and gender=0;</span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><ul><li>小括号，not，比较运算符，逻辑运算符</li><li>and 比 or 先运算，如果同时出现并希望先算 or，需要结合()使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/archives/af3eed3c.html"/>
      <url>/archives/af3eed3c.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><p>HTTP 协议是 Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>HTTP 是一个基于 TCP/IP 通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><p>HTTP 是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于 1990 年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在 WWW 中使用的是 HTTP/1.0 的第六版，HTTP/1.1 的规范化工作正在进行之中，而且 HTTP-NG(Next Generation of HTTP)的建议已经提出。</p><p>HTTP 协议工作于客户端-服务端架构为上。浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端即 WEB 服务器发送所有请求。Web 服务器根据接收到的请求后，向客户端发送响应信息。</p><h2 id="HTTP-协议的主要特点"><a href="#HTTP-协议的主要特点" class="headerlink" title="HTTP 协议的主要特点"></a>HTTP 协议的主要特点</h2><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</p><p>2、灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</p><p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>4.无状态：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 5、支持 B/S 及 C/S 模式。</p><h2 id="HTTP-协议与-URL-的关系"><a href="#HTTP-协议与-URL-的关系" class="headerlink" title="HTTP 协议与 URL 的关系"></a>HTTP 协议与 URL 的关系</h2><p>HTTP 使用<strong>统一资源标识符</strong>（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL 是一种特殊类型的 URI，包含了用于查找某个资源的足够的信息。</p><p>URL,全称是 UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个 URL 为例，介绍下普通 URL 的各部分组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</span><br></pre></td></tr></table></figure><p>从上面的 URL 可以看出，一个完整的 URL 包括以下几部分：</p><p><strong>1.协议部分</strong>：该 URL 的协议部分为“http”，这代表网页使用的是 HTTP 协议。在 Internet 中可以使用多种协议，如 HTTP，FTP 等等本例中使用的是 HTTP 协议。在”HTTP”后面的“//”为分隔符。</p><p><strong>2.域名部分</strong>：该 URL 的域名部分为“<a href="www.baidu.com">www.baidu.com</a>”。一个 URL 中，也可以使用 IP 地址作为域名使用。</p><p><strong>3.端口部分</strong>：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个 URL 必须的部分，如果省略端口部分，将采用默认端口。</p><p><strong>4.虚拟目录部分</strong>：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个 URL 必须的部分。本例中的虚拟目录是“/news/”。</p><p><strong>5.文件名部分</strong>：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个 URL 必须的部分，如果省略该部分，则使用默认的文件名。</p><p><strong>6.锚部分</strong>：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个 URL 必须的部分。</p><p><strong>7.参数部分</strong>：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p><h2 id="URI-和-URL-的区别"><a href="#URI-和-URL-的区别" class="headerlink" title="URI 和 URL 的区别"></a>URI 和 URL 的区别</h2><p><strong>URI，是 uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</strong></p><p>Web 上可用的每种资源如 HTML 文档、图像、视频片段、程序等都是一个来 URI 来定位的 URI 一般由三部组成： ① 访问资源的命名机制 ② 存放资源的主机名 ③ 资源自身的名称，由路径表示，着重强调于资源。</p><p><strong>URL 是 uniform resource locator，统一资源定位器，它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</strong></p><p>URL 是 Internet 上用来描述信息资源的字符串，主要用在各种 WWW 客户程序和服务器程序上，特别是著名的 Mosaic。 采用 URL 可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL 一般由三部组成： ① 协议(或称为服务方式) ② 存有该资源的主机 IP 地址(有时也包括端口号) ③ 主机资源的具体地址。如目录和文件名等</p><p>URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如<a href="mailto:XXXXXX@java.XXX.com">mailto:XXXXXX@java.XXX.com</a>。</p><p>URI 是以一种抽象的，高层次概念定义统一资源标识，而 URL 和 URN 则是具体的资源标识的方式。URL 和 URN 都是一种 URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。</p><p>在 Java 的 URI 中，一个 URI 实例可以代表绝对的，也可以是相对的，只要它符合 URI 的语法规则。而 URL 类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。 在 Java 类库中，URI 类不包含任何访问资源的方法，它唯一的作用就是解析。 相反的是，URL 类可以打开一个到达资源的流。</p><blockquote><p>HTTP 之请求消息 Request</p></blockquote><p>客户端发送一个 HTTP 请求到服务器的请求消息包括以下格式：</p><p>请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。</p><ul><li>请求行以一个方法符号开头，以空格分开，后面跟着请求的 URI 和协议的版本。</li></ul><p>Get 请求例子，使用 Charles 抓取的 request：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /562f25980001b1b106000338.jpg HTTP/1.1</span><br><span class="line">Host    img.mukewang.com</span><br><span class="line">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span><br><span class="line">Accept    image/webp,image/*,*/*;q=0.8</span><br><span class="line">Referer    http://www.imooc.com/</span><br><span class="line">Accept-Encoding    gzip, deflate, sdch</span><br><span class="line">Accept-Language    zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure><p><strong>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.</strong></p><p>GET 说明请求类型为 GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是 HTTP1.1 版本。</p><p><strong>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</strong></p><p>从第二行起为请求头部，HOST 将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</p><p><strong>第三部分：空行，请求头部后面的空行是必须的</strong></p><p>即使第四部分的请求数据为空，也必须有空行。</p><p><strong>第四部分：请求数据也叫主体，可以添加任意的其他数据。</strong></p><p>这个例子的请求数据为空。</p><p>POST 请求例子，使用 Charles 抓取的 request：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP1.1</span><br><span class="line">Host:www.wrox.com</span><br><span class="line">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class="line">Content-Type:application/x-www-form-urlencoded</span><br><span class="line">Content-Length:40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure><p><strong>第一部分：请求行，第一行明了是 post 请求，以及 http1.1 版本。 第二部分：请求头部，第二行至第六行。 第三部分：空行，第七行的空行。 第四部分：请求数据，第八行。</strong></p><blockquote><p>HTTP 之响应消息 Response</p></blockquote><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个 HTTP 的响应消息。</p><p>HTTP 响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 22 May 2009 06:07:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;/head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">            &lt;!--body goes here--&gt;</span><br><span class="line">      &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>第一部分：状态行，由 HTTP 协议版本号， 状态码， 状态消息 三部分组成。</strong></p><p><strong>第一行为状态行，（HTTP/1.1）表明 HTTP 版本为 1.1 版本，状态码为 200，状态消息为（ok）</strong></p><p><strong>第二部分：消息报头，用来说明客户端要使用的一些附加信息</strong></p><p><strong>第二行和第三行为消息报头， Date:生成响应的日期和时间；Content-Type:指定了 MIME 类型的 HTML(text/html),编码类型是 UTF-8</strong></p><p><strong>第三部分：空行，消息报头后面的空行是必须的</strong></p><p><strong>第四部分：响应正文，服务器返回给客户端的文本信息。</strong></p><p>空行后面的 html 部分为响应正文。</p><blockquote><p>HTTP 协议之状态码</p></blockquote><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p><p>1xx：指示信息–表示请求已接收，继续处理</p><p>2xx：成功–表示请求已被成功接收、理解、接受</p><p>3xx：重定向–要完成请求必须进行更进一步的操作</p><p>4xx：客户端错误–请求有语法错误或请求无法实现</p><p>5xx：服务器端错误–服务器未能实现合法的请求</p><p>更多状态码<a href="http://www.ccccc.com/http/http-status-codes.html">http://www.CCCCC.com/http/http-status-codes.html</a></p><h2 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h2><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。 HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。 HTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><p>GET 请求指定的页面信息，并返回实体主体。 HEAD 类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。 PUT 从客户端向服务器传送的数据取代指定的文档的内容。 DELETE 请求服务器删除指定的页面。 CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。 OPTIONS 允许客户端查看服务器的性能。 TRACE 回显服务器收到的请求，主要用于测试或诊断。`</p><blockquote><p>HTTP 工作原理</p></blockquote><p>HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。HTTP 协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p><p>以下是 HTTP 请求/响应的步骤：</p><p><strong>1、客户端连接到 Web 服务器*</strong></p><p>一个 HTTP 客户端，通常是浏览器，与 Web 服务器的 HTTP 端口（默认为 80）建立一个 TCP 套接字连接。例如，<a href="http://www.xasxax.cn/">http://www.XASXAX.cn</a></p><p><strong>2、发送 HTTP 请求</strong></p><p>通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据 4 部分组成。</p><p><strong>3、服务器接受请求并返回 HTTP 响应</strong></p><p>Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据 4 部分组成。</p><p>**4、释放连接 TCP 连接 **</p><p>若 connection 模式为 close，则服务器主动关闭 TCP 连接，客户端被动关闭连接，释放 TCP 连接;若 connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p><p><strong>5、客户端浏览器解析 HTML 内容</strong></p><p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据 HTML，根据 HTML 的语法对其进行格式化，并在浏览器窗口中显示。</p><p>例如：在浏览器地址栏键入 URL，按下回车之后会经历以下流程：</p><p>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p><p>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立 TCP 连接;</p><p>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的 HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</p><p>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p><p>5、释放 TCP 连接;</p><p>6、浏览器将该 html 文本并显示内容;</p><blockquote><p>GET 和 POST 请求的区别</p></blockquote><p><strong>GET 请求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /books/?sex=man&amp;name=Professional HTTP/1.1 Host: www.wrox.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6) Gecko/20050225 Firefox/1.0.1 Connection: Keep-Alive</span><br></pre></td></tr></table></figure><p>注意最后一行是空行</p><p><strong>POST 请求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`POST / HTTP/1.1 Host: www.wrox.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6) Gecko/20050225 Firefox/1.0.1 Content-Type: application/x-www-form-urlencoded Content-Length: 40 Connection: Keep-Alive</span><br></pre></td></tr></table></figure><p>name=Professional%20Ajax&amp;publisher=Wiley`</p><p>1、GET 提交，请求的数据会附在 URL 之后（就是把数据放置在 HTTP 协议头中），以?分割 URL 和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用 BASE64 加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX 中的 XX 为该符号以 16 进制表示的 ASCII。</p><p>POST 提交：把提交的数据放置在是 HTTP 包的包体中。上文示例中红色字体标明的就是实际的传输数据</p><p>因此，GET 提交的数据会在地址栏中显示出来，而 POST 提交，地址栏不会改变</p><p>2、传输数据的大小：首先声明：HTTP 协议没有对传输的数据大小进行限制，HTTP 协议规范也没有对 URL 长度进行限制。</p><p>而在实际开发中存在的限制主要有：</p><p><strong>GET</strong>:特定浏览器和服务器对 URL 长度有限制，例如 IE 对 URL 长度的限制是 2083 字节(2K+35)。对于其他浏览器，如 Netscape、FireFox 等，理论上没有长度限制，其限制取决于操作系 统的支持。</p><p>因此对于 GET 提交时，传输数据就会受到 URL 长度的 限制。</p><p><strong>POST</strong>:由于不是通过 URL 传值，理论上数据不受 限。但实际各个 WEB 服务器会规定对 post 提交数据大小进行限制，Apache、IIS6 都有各自的配置。</p><p>3、安全性</p><p>POST 的安全性要比 GET 的安全性高。比如：通过 GET 提交数据，用户名和密码将明文出现在 URL 上，因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用 GET 提交数据还可能会造成 Cross-site request forgery 攻击</p><p>4、Http get,post,soap 协议都是在 http 上运行的</p><p>（1）get：请求参数是作为一个 key/value 对的序列（查询字符串）附加到 URL 上的 查询字符串的长度受到 web 浏览器和 web 服务器的限制（如 IE 最多支持 2048 个字符），不适合传输大型数据集同时，它很不安全</p><p>（2）post：请求参数是在 http 标题的一个不同部分（名为 entity body）传输的，这一部分用来传输表单信息，因此必须将 Content-type 设置为:application/x-www-form- urlencoded。post 设计用来支持 web 窗体上的用户字段，其参数也是作为 key/value 对传输。 但是：它不支持复杂数据类型，因为 post 没有定义传输数据结构的语义和规则。</p><p>（3）soap：是 http post 的一个专用版本，遵循一种特殊的 xml 消息格式 Content-type 设置为: text/xml 任何数据都可以 xml 化。</p><p>Http 协议定义了很多与服务器交互的方法，最基本的有 4 种，分别是 GET,POST,PUT,DELETE. 一个 URL 地址用于描述一个网络上的资源，而 HTTP 中的 GET, POST, PUT, DELETE 就对应着对这个资源的查，改，增，删 4 个操作。 我们最常见的就是 GET 和 POST 了。GET 一般用于获取/查询资源信息，而 POST 一般用于更新资源信息.</p><p>我们看看 GET 和 POST 的区别</p><ol><li>GET 提交的数据会放在 URL 之后，以?分割 URL 和传输数据，参数之间以&amp;相连，如 EditPosts.aspx?name=test1&amp;id=123456. POST 方法是把提交的数据放在 HTTP 包的 Body 中.</li><li>GET 提交的数据大小有限制（因为浏览器对 URL 的长度有限制），而 POST 方法提交的数据没有限制.</li><li>GET 方式需要使用 Request.QueryString 来取得变量的值，而 POST 方式通过 Request.Form 来获取变量的值。</li><li>GET 方式提交数据，会带来安全问题，比如一个登录页面，通过 GET 方式提交数据时，用户名和密码将出现在 URL 上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络通信原理 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> HTTP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信原理</title>
      <link href="/archives/bddabd5b.html"/>
      <url>/archives/bddabd5b.html</url>
      
        <content type="html"><![CDATA[<h2 id="协议及协议栈的基本概念"><a href="#协议及协议栈的基本概念" class="headerlink" title="协议及协议栈的基本概念"></a>协议及协议栈的基本概念</h2><h3 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a>什么是协议</h3><p>协议是网络中计算机或设备之间进行通信的一系列规则的集合。常用协议有 IP、TCP、HTTP、POP3、SMTP 等。</p><h3 id="什么是协议栈"><a href="#什么是协议栈" class="headerlink" title="什么是协议栈"></a>什么是协议栈</h3><p>在网络中，为了完成通信，必须使用多层上的多种协议。这些协议按照层次顺序组合在一起，构成了协议栈(Protocol Stack)，也称为协议族(Protocol Suite)。</p><h3 id="协议的作用"><a href="#协议的作用" class="headerlink" title="协议的作用"></a>协议的作用</h3><p>一个网络协议的作用主要有两个：一是建立对等层之间的虚拟通信，二是实现层次之间的无关性。</p><h3 id="层次间的无关性"><a href="#层次间的无关性" class="headerlink" title="层次间的无关性"></a>层次间的无关性</h3><p>所谓层次间无关性，就是指较高层次和相邻的相低层次进行通信时，只是利用较低层次提供的接口和服务，而不需了解底层实现该功能所采用的算法和协议的细节；较低层次也仅是使用从高层系统传送来的参数和控制信息，这就是层次间的无关性。</p><h2 id="网络协议族-栈组成"><a href="#网络协议族-栈组成" class="headerlink" title="网络协议族/栈组成"></a>网络协议族/栈组成</h2><p>网络通信协议的作用是负责在网络上建立通信通道和控制通过通道的信息流的规则。为了进行网络通信，通信双方必须遵守通信协议</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200424221702.png" alt="image-20200424221653995"></p><p>说明：网络协议与标准是基于 OSI 七层模型，每一层都有其对应的协议。</p><h2 id="常见的网络协议"><a href="#常见的网络协议" class="headerlink" title="常见的网络协议"></a>常见的网络协议</h2><p>TCP/IP：工业标准、开放式协议，Internet 网络的标准</p><p>IPX/SPX：Novell 开发的 Netware 操作系统使用的协议，IPX 为网际数据包交换协议，工作在网络层，SPX 为序列数据包交换协议，工作在传输层。</p><p>NetBIOS/NetBEUI：较小的协议栈，应用于 IBM 和早期的 Windows 系统，现在 Windows 仍然支持。</p><p>AppleTalk：Apple 公司的 Mac OS 中所采用的网络协议。</p><h3 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h3><p>TCP/IP 是分层协议，如层次图所示：从底层到应用层，分别是物理层，链路层，网络层，传输层，应用层。数据是层层封装，封装的方式一般都是在原有数据的前面加一个数据控制头。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200424221731.png" alt="image-20200424221730239"></p><h3 id="Telnet-协议"><a href="#Telnet-协议" class="headerlink" title="Telnet 协议"></a>Telnet 协议</h3><p>Telnet 是 TCP/IP 中的一种应用协议，可以为终端仿真提供支持。可使用户连接到主机上，使主机响应起来就像它直接连接在终端上一样。Telnet 在发送端和接收端使用 TCP 的 23 号端口以进行专用的通信。</p><p>IPV4</p><p>IP:1.1.1.1 — 255.255.255.255</p><p>IPV6</p><p>10 亿 10 亿 10 亿 10 亿</p><h3 id="FTP-协议"><a href="#FTP-协议" class="headerlink" title="FTP 协议"></a>FTP 协议</h3><p>FTP 协议使用 TCP20 号和 21 号端口，20 号端口用于数据交换，21 号端口用于建立连接，允许目录和文件访问，上传下载，不能远程执行文件。</p><p>TFTP 是简单文件传输协议（Trivial File Transfer Protocol，TFTP），TFTP 是无连接的，使用 UDP 的 69 号端口，用于当数据传输错误无关紧要而且无须安全性时的小型文件的传输。</p><h3 id="SMTP-协议"><a href="#SMTP-协议" class="headerlink" title="SMTP 协议"></a>SMTP 协议</h3><p>SMTP 是简单邮件传输协议（Simple Mail Transfer Protocol，SMTP）是为网络系统间的电子邮件交换而设计的。使用 25 端口。SMTP 只需要在接收端的一个电子邮件地址即可发送邮件。POP3 协议用来接收邮件.使用 110 端口</p><h3 id="DNS-服务"><a href="#DNS-服务" class="headerlink" title="DNS 服务"></a>DNS 服务</h3><p>DNS 是域名解析服务（Domain Name Service, DNS），作用是将域名转换为 IP 地址，或将 IP 地址转换为域名，用于解析完全合格域名（FQDN）。使用 53 号端口。</p><h3 id="DHCP-服务"><a href="#DHCP-服务" class="headerlink" title="DHCP 服务"></a>DHCP 服务</h3><p>DHCP 是动态主机配置协议(DHCP)，服务器可以提供的信息有:</p><p>1、IP 地址</p><p>2、子网掩码(subnet mask)</p><p>3、域名(domain name)</p><p>4、默认网关(default gateway)</p><p>5、DNS</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络通信原理 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+GitHub快速实现markdown图床</title>
      <link href="/archives/adff04af.html"/>
      <url>/archives/adff04af.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>之前使用了很多在线博客的编辑器都觉得很坑不顺手，我还是比较喜欢用 Typora 来写一些东西</p></li><li><p><a href="https://www.typora.io/">Tpyora</a>是一款优雅的 MarkDown 编辑器，也推荐给大家，至于安装和配置，也十分的简单，就和安装普通的应用程序一样。</p></li><li><p>在编写文档和记笔记的时候，都需要插入很多图片，通常情况下这些图片（截图）都是保存在本地的，当你分享文档或者你在本地编写的文档放到在线博客的时候就会出现图片丢失的问题，不然就得一张一张全部复制，体验极差，所以我想找一个图床来托管我的图片。</p><blockquote><p>图床：</p><p>图床简单来说就是一个便于在博文中插入在线图片连接的个人图片仓库。设置图床之后，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看，除非自己亲自删除。</p><p>图床工具：</p><p>所谓图床工具，就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言，PicGo 算得上一款比较优秀的图床工具。它是一款用 <code>Electron-vue</code> 开发的软件，可以支持微博，七牛云，腾讯云 COS，又拍云，GitHub，阿里云 OSS，SM.MS，imgur 等 8 种常用图床，功能强大，简单易用。这里我们使用 PicGo。</p></blockquote></li><li><p>我看大多数推荐的七牛云，腾讯云，微博等等，一方面需要各种注册收费，另一方面十分不稳定，既然是程序员，大家都会有自己的 GitHub 仓库，不如专门开一个仓库做自己的图床好了，既方便又简单。</p></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>​ 当然我还是在 windows 环境下来进行安装。如果你要使用 PicGo 的插件，还需要电脑安装 node 环境，因为 PicGo 的插件是用 npm 包管理工具进行安装的。</p><h3 id="下载软件并安装"><a href="#下载软件并安装" class="headerlink" title="下载软件并安装"></a>下载软件并安装</h3><ul><li><p>Typora：你可以点击 <a href="https://www.typora.io/">这里</a> 进行下载。</p></li><li><p>PIcGo：你可以点击 <a href="https://molunerfinn.com/PicGo/">这里</a> 进行下载。</p><ul><li>注：<strong>mac</strong> 系统选择 <strong>dmg</strong> 下载，<strong>windwos</strong> 系统选择 <strong>.exe</strong> 下载</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321140823.png"></p></li></ul><p>下载和安装过程都十分的简单，这里我们就不再赘述。安装好后，我们就正式开始！</p><hr><h2 id="GitHub-配置"><a href="#GitHub-配置" class="headerlink" title="GitHub 配置"></a>GitHub 配置</h2><ul><li>如果你嫌弃 GitHub 访问速度太慢的话，也可以用同样的方法布置到 Gitee 码云，不过我个人使用 GitHub 更多一点，所以我直接部署到了 GitHub。</li></ul><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>我们可以新建一个仓库或者使用已经有的库也可以。那么我新建一个库叫做 picgo。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321140907.png"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321140920.png"></p><h3 id="创建-Token"><a href="#创建-Token" class="headerlink" title="创建 Token"></a>创建 Token</h3><p>创建好后，需要在 GitHub 上生成一个 <em>token</em> 以便 PicGo 来操作我们的仓库，来到个人中心，选择 <em>Developer settings</em> 就能看到 <em>Personal access tokens_，我们在这里创建需要的 _token</em></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321140940.png"></p><p>点击 Generate new token 创建一个新 token，选择 repo，同时它会把包含其中的都会勾选上，我们勾选这些就可以了。然后拉到最下方点击绿色按钮，Generate token 即可。之后就会生成一个 <em>token</em> ，记得复制保存到其他地方，这个 <em>token</em> 只显示一次！</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141016.png"></p><h2 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 PicGo</h2><h3 id="配置默认图床"><a href="#配置默认图床" class="headerlink" title="配置默认图床"></a>配置默认图床</h3><ul><li>仓库名格式为 <code>用户名/仓库名</code></li><li>分支名：master</li><li>token：刚刚在 GitHub 创建的 token</li></ul><p>然后点击确定，设为默认图床。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141034.png"></p><h3 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h3><ul><li>先看一下 Typora 的端口号</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141043.png"></p><ul><li>打开 PicGo 设置，选择设置 Server，打开开关，并设置监听地址和端口与上面保持一致</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141115.png"></p><ul><li>打开配置文件，找到 server，保持一致。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141127.png"></p><h3 id="建议和一些其他事项"><a href="#建议和一些其他事项" class="headerlink" title="建议和一些其他事项"></a>建议和一些其他事项</h3><p>建议打开设置里的按照时间戳重命名，防止图片名字重复可能导致的一些失败。顺便提供一些常见错误的解决办法。</p><h4 id="错误：Failed-to-fetch"><a href="#错误：Failed-to-fetch" class="headerlink" title="错误：Failed to fetch"></a>错误：Failed to fetch</h4><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141139.png"></p><p>这个错误一般是由<strong>端口设置错误</strong>造成的，打开 picgo 的 log 文件</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141147.png"></p><p><strong>解决办法</strong>：打开 picgo 设置，点击设置代理选项，<strong>将端口改为 36677 端口</strong>，这是 picgo 推荐的默认端口号，然后保存，成功。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141155.png"></p><p>不过有的时候，设置好了后还是会报错 Failed to fetch，打开端口设置一看，端口变成了 366771，这是因为如果你打开了多个 picgo 程序，就会端口冲突，<strong>picgo 自动帮你把 36677 端口改为 366771 端口</strong>，导致错误。log 文件里也写得很清楚。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141202.png"></p><p><strong>解决办法</strong>：<strong>先把 picgo 中的端口设置改回 36677，然后退出所有 picgo 程序</strong>，再使用 typora 上传功能（会自动启动 picgo 程序）</p><h4 id="错误：-“success”-false"><a href="#错误：-“success”-false" class="headerlink" title="错误：{“success”,false}"></a>错误：{“success”,false}</h4><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141211.png"></p><p>这个错误是最常遇到的，第一个原因是<strong>文件名冲突</strong>了，如果你上传过一张 image1.jpg 的图片，再上传名称一样的图片就会失败。</p><p><strong>解决办法</strong>：打开 picgo 设置，将<strong>上传前重命名和时间戳重命名都打开</strong>。如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141220.png"></p><p>再次上传文件，出现一个确认文件名称的对话框（暂时没有找到默认确定的选项），点击确定，上传成功。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141229.png"></p><p>第二个原因，可能就是网络问题，显示服务端错误，这种情况下，可以更换默认图床，或者稍后再试。</p><p><strong>解决办法</strong>：更换默认图床或者多试几次，我经常遇到这种情况，在 github 上传失败的时候，我就把默认图床更改为 Gitee 上传到码云。</p><h2 id="一些使用方法"><a href="#一些使用方法" class="headerlink" title="一些使用方法"></a>一些使用方法</h2><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>把需要的图片拉进去，这里有三种上传图片的方式：</p><ul><li>menubar 图标拖拽上传（仅支持 macOS）</li><li>主窗口拖拽或者选择图片上传</li><li>剪贴板图片（最常见的是截图）上传（支持自定义快捷键）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141242.png"></p><p>上传完成之后，我们到相册就会看到上传成功后的照片了，另外在自己的仓库里，也能够看到上传的图片</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141308.png"></p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141316.png"></p><p>与此同时，除了单张上传外，其实还支持多张，批量上传，只需要选中多个文件，将其导入，或者拖入其中便可以了，这样再多的文件，也能够做到一次上传就能用的效果。</p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><ul><li>上传照片前，我们想重新命名这个图片名称，或者是在上传之后我们需要给图片重新命名，打开上传前重命名即可。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141324.png"></p><ul><li>查看当前上传的图床</li></ul><p>如果你设置了除 <em>GitHub</em> 以外的图床，而不清楚当前上传到了哪个图床时，没关系，在上传区能够看到这个图床是哪一个。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141338.png"></p><h2 id="在-Gitee-上部署图床"><a href="#在-Gitee-上部署图床" class="headerlink" title="在 Gitee 上部署图床"></a>在 Gitee 上部署图床</h2><p>与在 GitHub 部署操作类似，同样是新建仓库，获取 token 的步骤，然后配置 picgo，不过我们需要安装一个插件 <strong>gitee-uploader 1.1.2</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141347.png"></p><p>插件配置方法也与 GitHub 配置类似。GitHub 不好用的时候（报错服务端出错上传失败），可以试着切换默认图床到 Gitee。</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321141356.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到此，使用 Picgo GitHub（Gitee）配置一个 markdown 图床就完成了。以后再也不用担心 markdown 文档的图片问题了！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> MarkDown </tag>
            
            <tag> 图片上传 </tag>
            
            <tag> PicGo </tag>
            
            <tag> GitHub </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用方法简介</title>
      <link href="/archives/78c8944c.html"/>
      <url>/archives/78c8944c.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git-教程"><a href="#Git-教程" class="headerlink" title="Git 教程"></a>Git 教程</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>git 是一个分布式的版本管理工具，适用于多人开发团队进行代码的组织管理。</p><p>svn、hg、cvs 等</p><h2 id="代码版本管理"><a href="#代码版本管理" class="headerlink" title="代码版本管理"></a>代码版本管理</h2><ol><li>每天更新代码</li><li>多人合并代码</li></ol><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><p>我们可以去官网下载 git</p><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>安装完成后输入下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> learngit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> learngit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/Users/michael/learngit</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init<span class="comment">#初始化仓库</span></span></span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br><span class="line">ls -ah#查看隐藏的git目录，我们的版本库信息都在这里，一般情况下不需要编辑</span><br></pre></td></tr></table></figure><p>大家可以把版本库，想象仓库。存储东西。</p><h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p>创建好版本库之后，我们就可以对代码进行管理了。</p><p>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .#添加文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;wrote a readme file&quot;</span><span class="comment">#提交文件到版本库</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>做好版本管理很重要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status #查看分支状态</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^#回到上一个版本，HEAD~100回到上100个版本</span><br><span class="line"></span><br><span class="line">git reset --hard id#回到指定的版本</span><br><span class="line"></span><br><span class="line">git reflog#查看git命令</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>如果修改文件不想要了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [file]#撤销修改，还原文件</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>如何在已经提交的版本中删除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf [file]#真实删除</span><br><span class="line">git rm [file]#git删除</span><br><span class="line">git commit -m &quot;提交删除&quot;</span><br></pre></td></tr></table></figure><h2 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h2><p>本地版本</p><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>操作 github 或者马云 gitee</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone http://github.com/sadsada</span><br><span class="line"></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">git pull# git fetch &amp;&amp; git merge</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>分支是很关键的哦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch dev#创建分支</span><br><span class="line"></span><br><span class="line">git checkout dev #切换分支</span><br><span class="line"></span><br><span class="line">git branch -d dev   #删除分支</span><br><span class="line"></span><br><span class="line">git merge master #合并分支</span><br></pre></td></tr></table></figure><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>任意两个分支之间合并，并且同时修改了文件的同一行，就会有可能发生冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git  diff #查看冲突</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">手动操作文件解决冲突，提交</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit<span class="comment">#查看分支合并情况</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git安装教程</title>
      <link href="/archives/616a84f2.html"/>
      <url>/archives/616a84f2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>Git 是目前世界上最先进的分布式版本控制系统，在开发过程中，我们经常需要使用到 git 进行版本管理，我们先来进行安装一下。安装环境：windows。</p><h2 id="安装-Git-Bash"><a href="#安装-Git-Bash" class="headerlink" title="安装 Git Bash"></a>安装 Git Bash</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>你可以点击这里下载：<a href="https://git-scm.com/">Git Bash</a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li>下载完安装包后，双击安装程序，进入欢迎界面点击 Next&gt;</li><li>阅读协议，点击 Next&gt;</li><li>选择安装位置，默认就好，也可以自己选择，然后点击 Next&gt;<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142050.png"></li><li>选择安装组件：这里可以使用默认选项，点击 Next&gt;<br>_ 图标组件（Additional icons）：选择是否创建桌面快捷方式<br>_ 桌面浏览（Windows Explorer integration）<br>_ 使用 Git Bash 方式，shell 方式<br>_ 受用桌面程序方式<br>_ 关联配置文件：是否关联 git 配置文件，该配置文件主要显示文本编辑器样式<br>_ 关联 shell 脚本文件：是否关联 Bash 命令执行脚本文件 * 使用 TrueType 编码：在命令行中是否使用 TrueType 编码，该编码是微软和苹果公司制定的通用编码<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142101.png"></li><li>是否创建开始菜单快捷方式目录，点击 Next &gt;<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142111.png"></li><li>设置环境，选择使用什么样的命令行工具，一般情况我们使用默认配置，使用 Git Bash，点击 Next &gt;</li><li>Git 自带：使用 Git 自带的 Git Bash 命令行工具</li><li>系统自带 CMD：使用 windows 系统的命令行工具</li><li>二者都有：上面二者同时配置，但是注意，这样会将 windows 中的 find.exe 和 sort.exe 工具覆盖，如果不懂这些尽量不要选择<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142128.png"></li><li>设置 HTTPS 传输加密方式，默认就好，点击 Next &gt;<br>_ 使用 OpenSSL 库<br>_ 使用本机 Windows 安全通道库<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142138.png"></li><li>选择换行格式，默认就好，点击 Next &gt;<br>_ 让 Git 能够自动转换文件中的换行符：签出到本地时转换为 Windows 下的换行符，提交到服务器时转换为 Unix 下的换行符<br>_ 让 Git 在签出到本地时不做转换，保留原始文件的换行符；提交到服务器时转换为 Unix 下的换行符 * 让 Git 在签出到本地时和提交到服务器时都不做转换<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142151.png"></li><li>配置 Git bash 终端仿真器，点击 Next &gt;<br>_ 使用 MinTTY 终端<br>_ 使用 windows 默认的命令行<br><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142200.png"></li><li>性能配置，是否启用文件系统缓存，点击 Next &gt;</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142210.png"></p><ul><li>开始安装</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142221.png"></p><p>​</p><ul><li>安装完成，点击 Finish</li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142234.png"></p><p>​</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>安装成功后需要配置 Git 环境变量「注意该步骤为 Git 在 windows cmd 命令中配置，如果不配置，直接使用<strong>Git Bash</strong>即可」</p><ul><li>在 Path 变量中增加：C:\Program Files\Git\cmd</li></ul><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>打开 GItBash，输入命令，查看版本：</p><ul><li><p>命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure></li><li><p>安装成功显示如下图：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200321142343.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，git 就全部安装完成了，可以开始愉快的使用了！</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> GitBash安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS修改滚动条样式</title>
      <link href="/archives/b47882fe.html"/>
      <url>/archives/b47882fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="comment">/*滚动条整体样式*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>; <span class="comment">/*高宽分别对应横竖滚动条的尺寸*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="comment">/*滚动条里面小方块*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>) <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>) <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>) <span class="number">75%</span>,</span><br><span class="line">    transparent <span class="number">75%</span>,</span><br><span class="line">    transparent</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  <span class="comment">/*滚动条里面轨道*/</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>::-webkit-scrollbar 滚动条整体部分</li><li>::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</li><li>::-webkit-scrollbar-track 滚动条的轨道（里面装有 Thumb）</li><li>::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</li><li>::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）</li><li>::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</li><li>::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</li></ul><p>很简单吧！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是BFC、IFC、GFC、FFC</title>
      <link href="/archives/4df97024.html"/>
      <url>/archives/4df97024.html</url>
      
        <content type="html"><![CDATA[<h2 id="BFC、IFC、GFC、FFC"><a href="#BFC、IFC、GFC、FFC" class="headerlink" title="BFC、IFC、GFC、FFC"></a>BFC、IFC、GFC、FFC</h2><p>CSS2.1 中只有 BFC 和 IFC, CSS3 中才有 GFC 和 FFC。</p><p>到底什么是 BFC、IFC、GFC 和 FFC</p><h3 id="What’s-FC？"><a href="#What’s-FC？" class="headerlink" title="What’s FC？"></a>What’s FC？</h3><p>一定不是 KFC，FC 的全称是：Formatting Contexts，是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>BFC(Block Formatting Contexts)直译为”块级格式化上下文”。Block Formatting Contexts 就是页面上的一个隔离的渲染区域，容器里面的子元素不会在布局上影响到外面的元素，反之也是如此。如何产生 BFC？</p><ul><li><code>float</code>的值不为<code>none</code>。</li><li><code>overflow</code>的值不为<code>visible</code>。</li><li><code>position</code>的值不为<code>relative</code>和<code>static</code>。</li><li><code>display</code>的值为<code>table-cell</code>, <code>table-caption</code>, <code>inline-block</code>中的任何一个。</li></ul><p>那 BFC 一般有什么用呢？比如常见的多栏布局，结合块级别元素浮动，里面的元素则是在一个相对隔离的环境里运行。</p><h3 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h3><p>IFC(Inline Formatting Contexts)直译为”内联格式化上下文”，IFC 的 line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的 padding/margin 影响)</p><p>IFC 中的 line box 一般左右都贴紧整个 IFC，但是会因为 float 元素而扰乱。float 元素会位于 IFC 与 line box 之间，使得 line box 宽度缩短。 同个 ifc 下的多个 line box 高度会不同。 IFC 中时不可能有块级元素的，当插入块级元素时（如 p 中插入 div）会产生两个匿名块与 div 分隔开，即产生两个 IFC，每个 IFC 对外表现为块级元素，与 div 垂直排列。<br>那么 IFC 一般有什么用呢？</p><ul><li>水平居中：当一个块要在环境中水平居中时，设置其为<code>inline-block</code>则会在外层产生 IFC，通过<code>text-align</code>则可以使其水平居中。</li><li>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其<code>vertical-align:middle</code>，其他行内元素则可以在此父元素下垂直居中。</li></ul><h3 id="GFC"><a href="#GFC" class="headerlink" title="GFC"></a>GFC</h3><p>GFC(GridLayout Formatting Contexts)直译为”网格布局格式化上下文”，当为一个元素设置<code>display</code>值为<code>grid</code>的时候，此元素将会获得一个独立的渲染区域，我们可以通过在网格容器（grid container）上定义网格定义行（grid definition rows）和网格定义列（grid definition columns）属性各在网格项目（grid item）上定义网格行（grid row）和网格列（grid columns）为每一个网格项目（grid item）定义位置和空间。<br>那么 GFC 有什么用呢，和 table 又有什么区别呢？首先同样是一个二维的表格，但 GridLayout 会有更加丰富的属性来控制行列，控制对齐以及更为精细的渲染语义和控制。</p><h3 id="FFC"><a href="#FFC" class="headerlink" title="FFC"></a>FFC</h3><p>FFC(Flex Formatting Contexts)直译为”自适应格式化上下文”，<code>display</code>值为<code>flex</code>或者<code>inline-flex</code>的元素将会生成自适应容器（flex container），可惜这个牛逼的属性只有谷歌和火狐支持，不过在移动端也足够了，至少 safari 和 chrome 还是 OK 的，毕竟这俩在移动端才是王道。</p><p>Flex Box 由伸缩容器和伸缩项目组成。通过设置元素的 <code>display</code> 属性为 <code>flex</code> 或 <code>inline-flex</code> 可以得到一个伸缩容器。设置为 <code>flex</code> 的容器被渲染为一个块级元素，而设置为 <code>inline-flex</code> 的容器则渲染为一个行内元素。</p><p>伸缩容器中的每一个子元素都是一个伸缩项目。伸缩项目可以是任意数量的。伸缩容器外和伸缩项目内的一切元素都不受影响。简单地说，Flexbox 定义了伸缩容器内伸缩项目该如何布局。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC及其应用</title>
      <link href="/archives/ae14df56.html"/>
      <url>/archives/ae14df56.html</url>
      
        <content type="html"><![CDATA[<h2 id="常见定位方案"><a href="#常见定位方案" class="headerlink" title="常见定位方案"></a>常见定位方案</h2><p>在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:</p><ul><li>普通流 (normal flow)</li></ul><blockquote><p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p></blockquote><ul><li>浮动 (float)</li></ul><blockquote><p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p></blockquote><ul><li>绝对定位 (absolute positioning)</li></ul><blockquote><p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p></blockquote><h2 id="BFC-概念"><a href="#BFC-概念" class="headerlink" title="BFC 概念"></a>BFC 概念</h2><p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>那么 BFC 是什么呢？</p><p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。</p><p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong></p><p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p><h2 id="触发-BFC"><a href="#触发-BFC" class="headerlink" title="触发 BFC"></a>触发 BFC</h2><p>只要元素满足下面任一条件即可触发 BFC 特性：</p><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><h2 id="BFC-特性及应用"><a href="#BFC-特性及应用" class="headerlink" title="BFC 特性及应用"></a>BFC 特性及应用</h2><p><strong>1. 同一个 BFC 下外边距会发生折叠</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  div&#123; width: 100px; height: 100px; background: lightblue; margin: 100px; &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200417184953.png" alt="BFC"></p><p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。</p><p>首先这不是 CSS 的 bug，我们可以理解为一种规范，<strong>如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.container &#123; overflow: hidden; &#125; p &#123; width: 100px; height: 100px; background:</span><br><span class="line">lightblue; margin: 100px; &#125;</span><br></pre></td></tr></table></figure><p>这时候，两个盒子边距就变成了 200px</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200417185014.png" alt="BFC"></p><p><strong>2. BFC 可以包含浮动的元素（清除浮动）</strong></p><p>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #000;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;background: #eee;float: left;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200417185036.png" alt="清除浮动"></p><p>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #000;overflow: hidden&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;background: #eee;float: left;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200417185054.png" alt="清除浮动"></p><p><strong>3. BFC 可以阻止元素被浮动元素覆盖</strong></p><p>先来看一个文字环绕效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;float: left;background: lightblue&quot;</span>&gt;</span></span><br><span class="line">  我是一个左浮动的元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px; height: 200px;background: #eee&quot;</span>&gt;</span></span><br><span class="line">  我是一个没有设置浮动, 也没有触发 BFC 元素, width: 200px; height:200px;</span><br><span class="line">  background: #eee;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200417185107.png" alt="阻止覆盖"></p><p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 <strong>overflow: hidden</strong>，就会变成：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200417185116.png" alt="阻止覆盖"></p><p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div水平垂直居中的方法</title>
      <link href="/archives/40a53b67.html"/>
      <url>/archives/40a53b67.html</url>
      
        <content type="html"><![CDATA[<h1 id="div-水平垂直居中的方法"><a href="#div-水平垂直居中的方法" class="headerlink" title="div 水平垂直居中的方法"></a>div 水平垂直居中的方法</h1><p>在平时，我们经常会碰到让一个 div 框针对某个模块上下左右都居中（水平垂直居中），其实针对这种情况，我们有多种方法实现。</p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>绝对定位方法：不确定当前 div 的宽度和高度，采用 transform: translate(-50%,-50%); 当前 div 的父级添加相对定位（position: relative;）</p><p>图片展示：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200418180207.png" alt="image-20200418180158961"></p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    background:red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:50%;</span><br><span class="line">    top:50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><p>绝对定位方法：确定了当前 div 的宽度，margin 值为当前 div 宽度一半的负值</p><p>图片展示： 如方法一的图片展示</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    width:600px;</span><br><span class="line">    height: 600px;</span><br><span class="line">    background:red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:50%;</span><br><span class="line">    top:50%;</span><br><span class="line">    margin-left:-300px;</span><br><span class="line">    margin-top:-300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用top-left-right-bottom"><a href="#使用top-left-right-bottom" class="headerlink" title="使用top left right bottom"></a>使用<code>top left right bottom</code></h3><p>绝对定位方法：绝对定位下 top left right bottom 都设置 0</p><p>图片展示： 如方法一的图片展示</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div.child&#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    height: 600px;</span><br><span class="line">    background: red;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:0;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><p>flex 布局方法：当前 div 的父级添加 flex css 样式</p><p>展示图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200418180313.png" alt="image-20200418180312674"></p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    height:800px;</span><br><span class="line">    -webkit-display:flex;</span><br><span class="line">    display:flex;</span><br><span class="line">    -webkit-align-items:center;</span><br><span class="line">    align-items:center;</span><br><span class="line">    -webkit-justify-content:center;</span><br><span class="line">    justify-content:center;</span><br><span class="line">    border:1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">div.child&#123;</span><br><span class="line">    width:600px;</span><br><span class="line">    height:600px;</span><br><span class="line">    background-color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="table-cell"><a href="#table-cell" class="headerlink" title="table-cell"></a>table-cell</h3><p>table-cell 实现水平垂直居中: table-cell middle center 组合使用</p><p>展示图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200418180341.png" alt="image-20200418180340408"></p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.table-cell &#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: 240px;</span><br><span class="line">    height: 180px;</span><br><span class="line">    border:1px solid #666;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="calc-函数"><a href="#calc-函数" class="headerlink" title="calc() 函数"></a>calc() 函数</h3><p>绝对定位：calc() 函数动态计算实现水平垂直居中</p><p>展示图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200418180355.png" alt="image-20200418180354103"></p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.calc&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  width: 400px;</span><br><span class="line">  height: 160px;</span><br><span class="line">&#125;</span><br><span class="line">.calc .child&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  left:-webkit-calc((400px - 200px)/2);</span><br><span class="line">  top:-webkit-calc((160px - 50px)/2);</span><br><span class="line">  left:-moz-calc((400px - 200px)/2);</span><br><span class="line">  top:-moz-calc((160px - 50px)/2);</span><br><span class="line">  left:calc((400px - 200px)/2);</span><br><span class="line">  top:calc((160px - 50px)/2);</span><br><span class="line">&#125;　　</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
